/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
  return 0;
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AI swig_types[0]
#define SWIGTYPE_p_Analeptic swig_types[1]
#define SWIGTYPE_p_Armor swig_types[2]
#define SWIGTYPE_p_ArraySummonCard swig_types[3]
#define SWIGTYPE_p_AttackRangeSkill swig_types[4]
#define SWIGTYPE_p_BasicCard swig_types[5]
#define SWIGTYPE_p_BattleArraySkill swig_types[6]
#define SWIGTYPE_p_Card swig_types[7]
#define SWIGTYPE_p_CardEffectStruct swig_types[8]
#define SWIGTYPE_p_CardMoveReason swig_types[9]
#define SWIGTYPE_p_CardPattern swig_types[10]
#define SWIGTYPE_p_CardResponseStruct swig_types[11]
#define SWIGTYPE_p_CardUseStruct swig_types[12]
#define SWIGTYPE_p_Card__Suit swig_types[13]
#define SWIGTYPE_p_CardsMoveOneTimeStruct swig_types[14]
#define SWIGTYPE_p_CardsMoveStruct swig_types[15]
#define SWIGTYPE_p_Client swig_types[16]
#define SWIGTYPE_p_ClientPlayer swig_types[17]
#define SWIGTYPE_p_ClientSocket swig_types[18]
#define SWIGTYPE_p_DamageStruct swig_types[19]
#define SWIGTYPE_p_DeathStruct swig_types[20]
#define SWIGTYPE_p_DefensiveHorse swig_types[21]
#define SWIGTYPE_p_DelayedTrick swig_types[22]
#define SWIGTYPE_p_DistanceSkill swig_types[23]
#define SWIGTYPE_p_DummyCard swig_types[24]
#define SWIGTYPE_p_DyingStruct swig_types[25]
#define SWIGTYPE_p_Engine swig_types[26]
#define SWIGTYPE_p_EquipCard swig_types[27]
#define SWIGTYPE_p_FilterSkill swig_types[28]
#define SWIGTYPE_p_General swig_types[29]
#define SWIGTYPE_p_Horse swig_types[30]
#define SWIGTYPE_p_JudgeStruct swig_types[31]
#define SWIGTYPE_p_LogMessage swig_types[32]
#define SWIGTYPE_p_LuaAI swig_types[33]
#define SWIGTYPE_p_LuaArmor swig_types[34]
#define SWIGTYPE_p_LuaAttackRangeSkill swig_types[35]
#define SWIGTYPE_p_LuaBasicCard swig_types[36]
#define SWIGTYPE_p_LuaBattleArraySkill swig_types[37]
#define SWIGTYPE_p_LuaDistanceSkill swig_types[38]
#define SWIGTYPE_p_LuaFilterSkill swig_types[39]
#define SWIGTYPE_p_LuaFunction swig_types[40]
#define SWIGTYPE_p_LuaMaxCardsSkill swig_types[41]
#define SWIGTYPE_p_LuaSkillCard swig_types[42]
#define SWIGTYPE_p_LuaTargetModSkill swig_types[43]
#define SWIGTYPE_p_LuaTreasure swig_types[44]
#define SWIGTYPE_p_LuaTrickCard swig_types[45]
#define SWIGTYPE_p_LuaTriggerSkill swig_types[46]
#define SWIGTYPE_p_LuaViewAsSkill swig_types[47]
#define SWIGTYPE_p_LuaWeapon swig_types[48]
#define SWIGTYPE_p_MaxCardsSkill swig_types[49]
#define SWIGTYPE_p_OffensiveHorse swig_types[50]
#define SWIGTYPE_p_OneCardViewAsSkill swig_types[51]
#define SWIGTYPE_p_Package swig_types[52]
#define SWIGTYPE_p_PhaseChangeStruct swig_types[53]
#define SWIGTYPE_p_PindianStruct swig_types[54]
#define SWIGTYPE_p_Player swig_types[55]
#define SWIGTYPE_p_PlayerNumStruct swig_types[56]
#define SWIGTYPE_p_QDialog swig_types[57]
#define SWIGTYPE_p_QListT_Card_const_p_t swig_types[58]
#define SWIGTYPE_p_QListT_CardsMoveStruct_t swig_types[59]
#define SWIGTYPE_p_QListT_DelayedTrick_const_p_t swig_types[60]
#define SWIGTYPE_p_QListT_Player__Phase_t swig_types[61]
#define SWIGTYPE_p_QListT_Player__Place_t swig_types[62]
#define SWIGTYPE_p_QListT_Player_const_p_t swig_types[63]
#define SWIGTYPE_p_QListT_QVariant_t swig_types[64]
#define SWIGTYPE_p_QListT_ServerPlayer_p_t swig_types[65]
#define SWIGTYPE_p_QListT_Skill_const_p_t swig_types[66]
#define SWIGTYPE_p_QListT_TriggerEvent_t swig_types[67]
#define SWIGTYPE_p_QListT_bool_t swig_types[68]
#define SWIGTYPE_p_QListT_int_t swig_types[69]
#define SWIGTYPE_p_QMapT_ServerPlayer_p_QStringList_t swig_types[70]
#define SWIGTYPE_p_QObject swig_types[71]
#define SWIGTYPE_p_QString swig_types[72]
#define SWIGTYPE_p_QStringList swig_types[73]
#define SWIGTYPE_p_QThread swig_types[74]
#define SWIGTYPE_p_QVariant swig_types[75]
#define SWIGTYPE_p_RecoverStruct swig_types[76]
#define SWIGTYPE_p_Room swig_types[77]
#define SWIGTYPE_p_RoomThread swig_types[78]
#define SWIGTYPE_p_Scenario swig_types[79]
#define SWIGTYPE_p_ServerPlayer swig_types[80]
#define SWIGTYPE_p_Skill swig_types[81]
#define SWIGTYPE_p_SkillCard swig_types[82]
#define SWIGTYPE_p_Slash swig_types[83]
#define SWIGTYPE_p_SlashEffectStruct swig_types[84]
#define SWIGTYPE_p_TargetModSkill swig_types[85]
#define SWIGTYPE_p_Treasure swig_types[86]
#define SWIGTYPE_p_TrickCard swig_types[87]
#define SWIGTYPE_p_TriggerSkill swig_types[88]
#define SWIGTYPE_p_TrustAI swig_types[89]
#define SWIGTYPE_p_ViewAsSkill swig_types[90]
#define SWIGTYPE_p_Weapon swig_types[91]
#define SWIGTYPE_p_WrappedCard swig_types[92]
#define SWIGTYPE_p_int swig_types[93]
#define SWIGTYPE_p_p_ServerPlayer swig_types[94]
static swig_type_info *swig_types[96];
static swig_module_info swig_module = {swig_types, 95, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "sgs"
#define SWIG_init      luaopen_sgs
#define SWIG_init_user luaopen_sgs_user

#define SWIG_LUACODE   luaopen_sgs_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}



#include "structs.h"
#include "engine.h"
#include "client.h"
#include "namespace.h"
#include "standard.h"

#include <QDir>




#include "settings.h"

#include <QMessageBox>



static int GetFileNames(lua_State *lua) {
    const char *dirname = luaL_checkstring(lua, 1);
    QDir dir(dirname);
    QStringList filenames = dir.entryList(QDir::Files);

    lua_createtable(lua, filenames.length(), 0);

    for (int i = 0; i < filenames.length(); i++) {
        lua_pushstring(lua, filenames.at(i).toLatin1());
        lua_rawseti(lua, -2, i + 1);
    }

    return 1;
}

static int Print(lua_State *lua) {
    const char *msg = luaL_checkstring(lua, 1);
    qDebug("%s", msg);

    return 0;
}

static int AddTranslationEntry(lua_State *lua) {
    const char *key = luaL_checkstring(lua, 1);
    const char *value = luaL_checkstring(lua, 2);

    Sanguosha->addTranslationEntry(key, value);

    return 0;
}

static int GetConfig(lua_State *lua) {
    const char *key = luaL_checkstring(lua, 1);
    int type = lua_type(lua, 2);
    switch (type) {
    case LUA_TNUMBER: {
        int n = luaL_checkint(lua, 2);
        lua_pushinteger(lua, Config.value(key, n).toInt());

        break;
    }
    case LUA_TBOOLEAN: {
        bool b = lua_toboolean(lua, 2);
        lua_pushboolean(lua, Config.value(key, b).toBool());

        break;
    }
    case LUA_TSTRING: {
        const char *str = luaL_checkstring(lua, 2);
        QString qstr = Config.value(key, str).toString();
        lua_pushstring(lua, qstr.toUtf8().constData());

        break;
    }
    default:
        luaL_error(lua, "The second argument of %s should be a number, boolean or a string", __FUNCTION__);
    }

    return 1;
}

static int SetConfig(lua_State *lua) {
    const char *key = luaL_checkstring(lua, 1);
    int type = lua_type(lua, 2);

    switch (type) {
    case LUA_TNUMBER: {
        int n = luaL_checkint(lua, 2);
        Config.setValue(key, n);

        break;
    }
    case LUA_TBOOLEAN: {
        bool b = lua_toboolean(lua, 2);
        Config.setValue(key, b);

        break;
    }
    case LUA_TSTRING: {
        const char *str = luaL_checkstring(lua, 2);
        Config.setValue(key, str);

        break;
    }
    default:
        luaL_error(lua, "The second argument of %s should be a number, boolean or a string", __FUNCTION__);
    }

    return 0;
}

static int GetProperty(lua_State *lua) {
    void *udata;
    int result = SWIG_ConvertPtr(lua, 1, &udata, SWIGTYPE_p_QObject, 0);
    luaL_argcheck(lua, SWIG_IsOK(result), 1, "QObject *");

    QObject *obj = static_cast<QObject *>(udata);
    const char *property_name = luaL_checkstring(lua, 2);
    QVariant value = obj->property(property_name);

    switch (value.type()) {
    case QMetaType::Int: {
        lua_pushinteger(lua, value.toInt());
        break;
    }
    case QMetaType::Bool: {
        lua_pushboolean(lua, value.toBool());
        break;
    }
    case QMetaType::QString: {
        lua_pushstring(lua, value.toString().toUtf8().constData());
        break;
    }
    default:
        lua_pushnil(lua);
    }

    return 1;
}

static int Alert(lua_State *lua) {
    const char *msg = luaL_checkstring(lua, 1);

    QMessageBox::warning(NULL, "Lua warning", msg);

    return 0;
}



SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN void QVariant_setValue__SWIG_0(QVariant *self,int value){
        self->setValue(QVariant::fromValue(value));
    }
SWIGINTERN void QVariant_setValue__SWIG_1(QVariant *self,DamageStruct *damage){
        self->setValue(QVariant::fromValue(*damage));
    }
SWIGINTERN DamageStruct QVariant_toDamage(QVariant const *self){
        return self->value<DamageStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_2(QVariant *self,CardEffectStruct *effect){
        self->setValue(QVariant::fromValue(*effect));
    }
SWIGINTERN CardEffectStruct QVariant_toCardEffect(QVariant const *self){
        return self->value<CardEffectStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_3(QVariant *self,SlashEffectStruct *effect){
        self->setValue(QVariant::fromValue(*effect));
    }
SWIGINTERN SlashEffectStruct QVariant_toSlashEffect(QVariant const *self){
        return self->value<SlashEffectStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_4(QVariant *self,CardUseStruct *use){
        self->setValue(QVariant::fromValue(*use));
    }
SWIGINTERN CardUseStruct QVariant_toCardUse(QVariant const *self){
        return self->value<CardUseStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_5(QVariant *self,Card const *card){
        self->setValue(QVariant::fromValue(card));
    }
SWIGINTERN Card const *QVariant_toCard(QVariant const *self){
        return self->value<const Card *>();
    }
SWIGINTERN void QVariant_setValue__SWIG_6(QVariant *self,ServerPlayer *player){
        self->setValue(QVariant::fromValue(player));
    }
SWIGINTERN ServerPlayer *QVariant_toPlayer(QVariant const *self){
        return self->value<ServerPlayer *>();
    }
SWIGINTERN void QVariant_setValue__SWIG_7(QVariant *self,DyingStruct *dying){
        self->setValue(QVariant::fromValue(*dying));
    }
SWIGINTERN DyingStruct QVariant_toDying(QVariant const *self){
        return self->value<DyingStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_8(QVariant *self,DeathStruct *death){
        self->setValue(QVariant::fromValue(*death));
    }
SWIGINTERN DeathStruct QVariant_toDeath(QVariant const *self){
        return self->value<DeathStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_9(QVariant *self,RecoverStruct *recover){
        self->setValue(QVariant::fromValue(*recover));
    }
SWIGINTERN RecoverStruct QVariant_toRecover(QVariant const *self){
        return self->value<RecoverStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_10(QVariant *self,JudgeStruct *judge){
        self->setValue(QVariant::fromValue(judge));
    }
SWIGINTERN JudgeStruct *QVariant_toJudge(QVariant const *self){
        return self->value<JudgeStruct *>();
    }
SWIGINTERN void QVariant_setValue__SWIG_11(QVariant *self,PindianStruct *pindian){
        self->setValue(QVariant::fromValue(pindian));
    }
SWIGINTERN PindianStruct *QVariant_toPindian(QVariant const *self){
        return self->value<PindianStruct *>();
    }
SWIGINTERN void QVariant_setValue__SWIG_12(QVariant *self,PhaseChangeStruct *phase){
        self->setValue(QVariant::fromValue(*phase));
    }
SWIGINTERN PhaseChangeStruct QVariant_toPhaseChange(QVariant const *self){
        return self->value<PhaseChangeStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_13(QVariant *self,CardsMoveOneTimeStruct *move){
        self->setValue(QVariant::fromValue(*move));
    }
SWIGINTERN CardsMoveOneTimeStruct QVariant_toMoveOneTime(QVariant const *self){
        return self->value<CardsMoveOneTimeStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_14(QVariant *self,CardResponseStruct *resp){
        self->setValue(QVariant::fromValue(*resp));
    }
SWIGINTERN CardResponseStruct QVariant_toCardResponse(QVariant const *self){
        return self->value<CardResponseStruct>();
    }
SWIGINTERN void QVariant_setValue__SWIG_15(QVariant *self,PlayerNumStruct *cmcs){
        self->setValue(QVariant::fromValue(*cmcs));
    }
SWIGINTERN PlayerNumStruct QVariant_toPlayerNum(QVariant const *self){
        return self->value<PlayerNumStruct>();
    }
SWIGINTERN ServerPlayer *QList_Sl_ServerPlayer_Sm__Sg__at(QList< ServerPlayer * > const *self,int i){
        return self->value(i);
    }
SWIGINTERN Player const *QList_Sl_Player_SS_const_Sm__Sg__at(QList< Player const * > const *self,int i){
        return self->value(i);
    }
SWIGINTERN Card const *QList_Sl_Card_SS_const_Sm__Sg__at(QList< Card const * > const *self,int i){
        return self->value(i);
    }
SWIGINTERN int QList_Sl_int_Sg__at(QList< int > const *self,int i){
        return self->value(i);
    }
SWIGINTERN Skill const *QList_Sl_Skill_SS_const_Sm__Sg__at(QList< Skill const * > const *self,int i){
        return self->value(i);
    }
SWIGINTERN DelayedTrick const *QList_Sl_DelayedTrick_SS_const_Sm__Sg__at(QList< DelayedTrick const * > const *self,int i){
        return self->value(i);
    }
SWIGINTERN CardsMoveStruct QList_Sl_CardsMoveStruct_Sg__at(QList< CardsMoveStruct > const *self,int i){
        return self->value(i);
    }
SWIGINTERN Player::Place QList_Sl_Player_Place_Sg__at(QList< Player::Place > const *self,int i){
        return self->value(i);
    }
SWIGINTERN Player::Phase QList_Sl_Player_Phase_Sg__at(QList< Player::Phase > const *self,int i){
        return self->value(i);
    }
SWIGINTERN QVariant QList_Sl_QVariant_Sg__at(QList< QVariant > const *self,int i){
        return self->value(i);
    }
SWIGINTERN void Player_setTag(Player *self,char const *key,QVariant &value){
        self->tag[key] = value;
    }
SWIGINTERN QVariant Player_getTag(Player *self,char const *key){
        return self->tag[key];
    }
SWIGINTERN void Player_removeTag(Player *self,char const *tag_name){
        self->tag.remove(tag_name);
    }
SWIGINTERN void ServerPlayer_speak(ServerPlayer *self,char const *msg){
        QString str = QString::fromUtf8(msg);
        self->getRoom()->speakCommand(self, str);
    }
SWIGINTERN EquipCard *Card_toEquipCard(Card *self){
        return qobject_cast<EquipCard *>(self);
    }
SWIGINTERN Weapon *Card_toWeapon(Card *self){
        return qobject_cast<Weapon *>(self);
    }
SWIGINTERN Armor *Card_toArmor(Card *self){
        return qobject_cast<Armor *>(self);
    }
SWIGINTERN Treasure *Card_toTreasure(Card *self){
        return qobject_cast<Treasure *>(self);
    }
SWIGINTERN WrappedCard *Card_toWrapped(Card *self){
        return qobject_cast<WrappedCard *>(self);
    }
SWIGINTERN TrickCard *Card_toTrick(Card *self){
        return qobject_cast<TrickCard *>(self);
    }
SWIGINTERN void Card_cardOnUse(Card const *self,Room *room,CardUseStruct const &card_use){
         self->Card::onUse(room, card_use);
    }
SWIGINTERN bool Card_cardIsAvailable(Card const *self,Player const *player){
        return self->Card::isAvailable(player);
    }
SWIGINTERN QString Engine_getVersionNumber(Engine const *self){
        return self->getVersionNumber().toString();
    }
SWIGINTERN TriggerSkill const *Skill_toTriggerSkill(Skill const *self){
        return qobject_cast<const TriggerSkill *>(self);
    }
SWIGINTERN BattleArraySkill const *TriggerSkill_toBattleArraySkill(TriggerSkill const *self){
        return qobject_cast<const BattleArraySkill *>(self);
    }
SWIGINTERN QMap< ServerPlayer *,QStringList > TriggerSkill_TriggerSkillTriggerable(TriggerSkill const *self,TriggerEvent triggerEvent,Room *room,ServerPlayer *player,QVariant &data){
        return self->TriggerSkill::triggerable(triggerEvent, room, player, data);
    }
SWIGINTERN ServerPlayer *Room_nextPlayer(Room const *self,ServerPlayer *player){
        Q_UNUSED(self);
        return qobject_cast<ServerPlayer *>(player->getNextAlive());
    }
SWIGINTERN void Room_writeToConsole(Room *self,char const *msg){
        self->output(msg);
        qWarning("%s", msg);
    }
SWIGINTERN void Room_throwEvent(Room *self,TriggerEvent const event){
        Q_UNUSED(self);
        throw event;
    }


void Room::doScript(const QString &script) {
    SWIG_NewPointerObj(L, this, SWIGTYPE_p_Room, 0);
    lua_setglobal(L, "R");

    SWIG_NewPointerObj(L, current, SWIGTYPE_p_ServerPlayer, 0);
    lua_setglobal(L, "P");

    int err = luaL_dostring(L, script.toLatin1());
    if (err){
        QString err_str = lua_tostring(L, -1);
        lua_pop(L, 1);
        output(err_str);
        qWarning("%s", err_str.toLatin1().constData());
    }
}




#include "standard.h"
#include "standard-basics.h"


SWIGINTERN void EquipCard_equipOnInstall(EquipCard const *self,ServerPlayer *player){
        self->EquipCard::onInstall(player);
    }
SWIGINTERN void EquipCard_equipOnUninstall(EquipCard const *self,ServerPlayer *player){
        self->EquipCard::onUninstall(player);
    }


#include "lua-wrapper.h"
#include "clientplayer.h"

QMap<ServerPlayer *, QStringList> LuaTriggerSkill::triggerable(TriggerEvent triggerEvent, Room *room, ServerPlayer *player, QVariant &data) const{
    if (can_trigger == 0)
        return TriggerSkill::triggerable(triggerEvent, room, player, data);

    lua_State *l = room->getLuaState();

    lua_rawgeti(l, LUA_REGISTRYINDEX, can_trigger);

    LuaTriggerSkill *self = const_cast<LuaTriggerSkill *>(this);
    SWIG_NewPointerObj(l, self, SWIGTYPE_p_LuaTriggerSkill, 0);

    int e = static_cast<int>(triggerEvent);

    lua_pushinteger(l, e);

    SWIG_NewPointerObj(l, room, SWIGTYPE_p_Room, 0);

    // the third argument: player
    SWIG_NewPointerObj(l, player, SWIGTYPE_p_ServerPlayer, 0);

    // the last event: data
    SWIG_NewPointerObj(l, &data, SWIGTYPE_p_QVariant, 0);

    int error = lua_pcall(l, 5, 2, 0);
    if (error){
        const char *msg = lua_tostring(l, -1);
        lua_pop(l, 1);
        room->output(msg);
        return TriggerSkill::triggerable(triggerEvent, room, player, data);
    }
    else {
        QString trigger_str = lua_tostring(l, -2);
        QMap<ServerPlayer *, QStringList> skill_list;
        QString obj_name_str = lua_tostring(l, -1);
        if (obj_name_str.isNull()) {
            void *ask_who_p = NULL;
            int convert_result = SWIG_ConvertPtr(l, -1, &ask_who_p, SWIGTYPE_p_ServerPlayer, 0);
            if (!SWIG_IsOK(convert_result) || ask_who_p == NULL) {
                ServerPlayer *who = player;
                QStringList trigger_list = trigger_str.split("+");
                skill_list.insert(who, trigger_list);
            }
            else {
                ServerPlayer *who = static_cast<ServerPlayer *>(ask_who_p);
                QStringList trigger_list = trigger_str.split("+");
                skill_list.insert(who, trigger_list);
            }
        }
        else {
            QStringList who_skill_list = trigger_str.split("|");
            QStringList obj_name_list = obj_name_str.split("|");
            int index = 0;
            while (who_skill_list.size() > index) {
                ServerPlayer *who = player;
                if (obj_name_list.at(index).size() > index)
                    who = room->findPlayer(obj_name_list.at(index), true);
                if (who)
                    skill_list.insert(who, who_skill_list.at(index).split("+"));
                index++;
            }
        }

        lua_pop(l, 2);
        return skill_list;
    }
}

bool LuaTriggerSkill::cost(TriggerEvent triggerEvent, Room *room, ServerPlayer *player, QVariant &data, ServerPlayer *ask_who) const{
    if (on_cost == 0)
        return TriggerSkill::cost(triggerEvent, room, player, data, ask_who);

    lua_State *L = room->getLuaState();

    int e = static_cast<int>(triggerEvent);

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_cost);

    LuaTriggerSkill *self = const_cast<LuaTriggerSkill *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaTriggerSkill, 0);

    // the first argument: event
    lua_pushinteger(L, e);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);

    // the third argument: player
    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    // the forth event: data
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    // the last event: ask_who
    SWIG_NewPointerObj(L, ask_who, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 6, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
        return true;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaTriggerSkill::effect(TriggerEvent triggerEvent, Room *room, ServerPlayer *player, QVariant &data, ServerPlayer *ask_who) const{
    if (on_effect == 0)
        return TriggerSkill::effect(triggerEvent, room, player, data, ask_who);

    lua_State *L = room->getLuaState();

    int e = static_cast<int>(triggerEvent);

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_effect);

    LuaTriggerSkill *self = const_cast<LuaTriggerSkill *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaTriggerSkill, 0);

    // the first argument: event
    lua_pushinteger(L, e);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);

    // the third argument: player
    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    // the forth event: data
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    // the last event: ask_who
    SWIG_NewPointerObj(L, ask_who, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 6, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

QMap<ServerPlayer *, QStringList> LuaBattleArraySkill::triggerable(TriggerEvent triggerEvent, Room *room, ServerPlayer *player, QVariant &data) const{
    if (can_trigger == 0)
        return BattleArraySkill::triggerable(triggerEvent, room, player, data);

    lua_State *l = room->getLuaState();

    lua_rawgeti(l, LUA_REGISTRYINDEX, can_trigger);

    LuaBattleArraySkill *self = const_cast<LuaBattleArraySkill *>(this);
    SWIG_NewPointerObj(l, self, SWIGTYPE_p_LuaBattleArraySkill, 0);

    int e = static_cast<int>(triggerEvent);

    lua_pushinteger(l, e);

    SWIG_NewPointerObj(l, room, SWIGTYPE_p_Room, 0);

    // the third argument: player
    SWIG_NewPointerObj(l, player, SWIGTYPE_p_ServerPlayer, 0);

    // the last event: data
    SWIG_NewPointerObj(l, &data, SWIGTYPE_p_QVariant, 0);

    int error = lua_pcall(l, 5, 2, 0);
    if (error){
        const char *msg = lua_tostring(l, -1);
        lua_pop(l, 1);
        room->output(msg);
        return TriggerSkill::triggerable(triggerEvent, room, player, data);
    }
    else {
        QString trigger_str = lua_tostring(l, -2);
        QMap<ServerPlayer *, QStringList> skill_list;
        QString obj_name_str = lua_tostring(l, -1);
        if (obj_name_str.isNull()) {
            void *ask_who_p = NULL;
            int convert_result = SWIG_ConvertPtr(l, -1, &ask_who_p, SWIGTYPE_p_ServerPlayer, 0);
            if (!SWIG_IsOK(convert_result) || ask_who_p == NULL) {
                ServerPlayer *who = player;
                QStringList trigger_list = trigger_str.split("+");
                skill_list.insert(who, trigger_list);
            }
            else {
                ServerPlayer *who = static_cast<ServerPlayer *>(ask_who_p);
                QStringList trigger_list = trigger_str.split("+");
                skill_list.insert(who, trigger_list);
            }
        }
        else {
            QStringList who_skill_list = trigger_str.split("|");
            QStringList obj_name_list = obj_name_str.split("|");
            int index = 0;
            while (who_skill_list.size() > index) {
                ServerPlayer *who = player;
                if (obj_name_list.at(index).size() > index)
                    who = room->findPlayer(obj_name_list.at(index), true);
                if (who)
                    skill_list.insert(who, who_skill_list.at(index).split("+"));
                index++;
            }
        }

        lua_pop(l, 2);
        return skill_list;
    }
}

bool LuaBattleArraySkill::cost(TriggerEvent triggerEvent, Room *room, ServerPlayer *player, QVariant &data, ServerPlayer *ask_who) const{
    if (on_cost == 0)
        return BattleArraySkill::cost(triggerEvent, room, player, data, ask_who);

    lua_State *L = room->getLuaState();

    int e = static_cast<int>(triggerEvent);

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_cost);

    LuaBattleArraySkill *self = const_cast<LuaBattleArraySkill *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaBattleArraySkill, 0);

    // the first argument: event
    lua_pushinteger(L, e);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);

    // the third argument: player
    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    // the forth event: data
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    // the last event: ask_who
    SWIG_NewPointerObj(L, ask_who, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 6, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
        return true;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaBattleArraySkill::effect(TriggerEvent triggerEvent, Room *room, ServerPlayer *player, QVariant &data, ServerPlayer *ask_who) const{
    if (on_effect == 0)
        return BattleArraySkill::effect(triggerEvent, room, player, data, ask_who);

    lua_State *L = room->getLuaState();

    int e = static_cast<int>(triggerEvent);

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_effect);

    LuaBattleArraySkill *self = const_cast<LuaBattleArraySkill *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaBattleArraySkill, 0);

    // the first argument: event
    lua_pushinteger(L, e);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);

    // the third argument: player
    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    // the forth event: data
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    // the last event: ask_who
    SWIG_NewPointerObj(L, ask_who, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 6, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

#include <QMessageBox>

static void Error(lua_State *L) {
    const char *error_string = lua_tostring(L, -1);
    lua_pop(L, 1);
    QMessageBox::warning(NULL, "Lua script error!", error_string);
}

int LuaDistanceSkill::getCorrect(const Player *from, const Player *to) const{
    if (correct_func == 0)
        return 0;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, correct_func);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaDistanceSkill, 0);
    SWIG_NewPointerObj(L, from, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, to, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return 0;
    }

    int correct = lua_tointeger(L, -1);
    lua_pop(L, 1);

    return correct;
}

int LuaMaxCardsSkill::getExtra(const ServerPlayer *target, MaxCardsType::MaxCardsCount type) const{
    if (extra_func == 0)
        return 0;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, extra_func);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaMaxCardsSkill, 0);
    SWIG_NewPointerObj(L, target, SWIGTYPE_p_ServerPlayer, 0);

    int e = static_cast<int>(type);
    lua_pushinteger(L, e);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return 0;
    }

    int extra = lua_tointeger(L, -1);
    lua_pop(L, 1);

    return extra;
}

int LuaMaxCardsSkill::getFixed(const ServerPlayer *target, MaxCardsType::MaxCardsCount type) const{
    if (fixed_func == 0)
        return 0;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, fixed_func);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaMaxCardsSkill, 0);
    SWIG_NewPointerObj(L, target, SWIGTYPE_p_ServerPlayer, 0);

    int e = static_cast<int>(type);
    lua_pushinteger(L, e);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return 0;
    }

    int extra = lua_tointeger(L, -1);
    lua_pop(L, 1);

    return extra;
}

int LuaTargetModSkill::getResidueNum(const Player *from, const Card *card) const{
    if (residue_func == 0)
        return 0;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, residue_func);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaTargetModSkill, 0);
    SWIG_NewPointerObj(L, from, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, card, SWIGTYPE_p_Card, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return 0;
    }

    int residue = lua_tointeger(L, -1);
    lua_pop(L, 1);

    return residue;
}

int LuaTargetModSkill::getDistanceLimit(const Player *from, const Card *card) const{
    if (distance_limit_func == 0)
        return 0;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, distance_limit_func);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaTargetModSkill, 0);
    SWIG_NewPointerObj(L, from, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, card, SWIGTYPE_p_Card, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return 0;
    }

    int distance_limit = lua_tointeger(L, -1);
    lua_pop(L, 1);

    return distance_limit;
}

int LuaTargetModSkill::getExtraTargetNum(const Player *from, const Card *card) const{
    if (extra_target_func == 0)
        return 0;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, extra_target_func);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaTargetModSkill, 0);
    SWIG_NewPointerObj(L, from, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, card, SWIGTYPE_p_Card, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return 0;
    }

    int extra_target_func = lua_tointeger(L, -1);
    lua_pop(L, 1);

    return extra_target_func;
}

bool LuaFilterSkill::viewFilter(const Card *to_select) const{
    if (view_filter == 0)
        return false;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, view_filter);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaFilterSkill, 0);
    SWIG_NewPointerObj(L, to_select, SWIGTYPE_p_Card, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return false;
    }

    bool result = lua_toboolean(L, -1);
    lua_pop(L, 1);
    return result;
}

int LuaAttackRangeSkill::getExtra(const Player *target, bool include_weapon) const{
    if (extra_func == 0)
        return AttackRangeSkill::getExtra(target, include_weapon);

    lua_State *l = Sanguosha->getLuaState();

    lua_rawgeti(l, LUA_REGISTRYINDEX, extra_func);

    SWIG_NewPointerObj(l, this, SWIGTYPE_p_LuaAttackRangeSkill, 0);
    SWIG_NewPointerObj(l, target, SWIGTYPE_p_Player, 0);
    lua_pushboolean(l, include_weapon);

    int error = lua_pcall(l, 3, 1, 0);
    if (error){
        Error(l);
        return AttackRangeSkill::getExtra(target, include_weapon);
    }

    int extra = lua_tointeger(l, -1);
    lua_pop(l, 1);

    return extra;
}

int LuaAttackRangeSkill::getFixed(const Player *target, bool include_weapon) const{
    if (fixed_func == 0)
        return AttackRangeSkill::getFixed(target, include_weapon);

    lua_State *l = Sanguosha->getLuaState();

    lua_rawgeti(l, LUA_REGISTRYINDEX, fixed_func);

    SWIG_NewPointerObj(l, this, SWIGTYPE_p_LuaAttackRangeSkill, 0);
    SWIG_NewPointerObj(l, target, SWIGTYPE_p_Player, 0);
    lua_pushboolean(l, include_weapon);

    int error = lua_pcall(l, 3, 1, 0);
    if (error){
        Error(l);
        return AttackRangeSkill::getFixed(target, include_weapon);
    }

    int extra = lua_tointeger(l, -1);
    lua_pop(l, 1);

    return extra;
}

const Card *LuaFilterSkill::viewAs(const Card *originalCard) const{
    if (view_as == 0)
        return NULL;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, view_as);

    SWIG_NewPointerObj(L, this, SWIGTYPE_p_LuaFilterSkill, 0);
    SWIG_NewPointerObj(L, originalCard, SWIGTYPE_p_Card, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return NULL;
    }

    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result)) {
        const Card *card = static_cast<const Card *>(card_ptr);
        return card;
    }
    else
        return NULL;
}

// ----------------------

void LuaViewAsSkill::pushSelf(lua_State *L) const{
    LuaViewAsSkill *self = const_cast<LuaViewAsSkill *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaViewAsSkill, 0);
}

bool LuaViewAsSkill::viewFilter(const QList<const Card *> &selected, const Card *to_select) const{
    if (view_filter == 0)
        return false;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, view_filter);

    pushSelf(L);

    lua_createtable(L, selected.length(), 0);
    for (int i = 0; i < selected.length(); i++){
        const Card *card = selected[i];
        SWIG_NewPointerObj(L, card, SWIGTYPE_p_Card, 0);
        lua_rawseti(L, -2, i + 1);
    }

    const Card *card = to_select;
    SWIG_NewPointerObj(L, card, SWIGTYPE_p_Card, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error){
        Error(L);
        return false;
    }
    else{
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

const Card *LuaViewAsSkill::viewAs(const QList<const Card *> &cards) const{
    if (view_as == 0)
        return NULL;

    lua_State *L = Sanguosha->getLuaState();

    lua_rawgeti(L, LUA_REGISTRYINDEX, view_as);

    pushSelf(L);

    lua_createtable(L, cards.length(), 0);
    for (int i = 0; i < cards.length(); i++) {
        const Card *card = cards[i];
        SWIG_NewPointerObj(L, card, SWIGTYPE_p_Card, 0);
        lua_rawseti(L, -2, i + 1);
    }

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return NULL;
    }

    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result)) {
        const Card *card = static_cast<const Card *>(card_ptr);
        return card;
    }
    else
        return NULL;
}

bool LuaViewAsSkill::isEnabledAtPlay(const Player *player) const{
    if (enabled_at_play == 0)
        return ViewAsSkill::isEnabledAtPlay(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, enabled_at_play);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaViewAsSkill::isEnabledAtResponse(const Player *player, const QString &pattern) const{
    if (enabled_at_response == 0)
        return ViewAsSkill::isEnabledAtResponse(player, pattern);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, enabled_at_response);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_Player, 0);

    lua_pushstring(L, pattern.toLatin1());

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaViewAsSkill::isEnabledAtNullification(const ServerPlayer *player) const{
    if (enabled_at_nullification == 0)
        return ViewAsSkill::isEnabledAtNullification(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, enabled_at_nullification);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}
// ---------------------

void LuaSkillCard::pushSelf(lua_State *L) const{
    LuaSkillCard *self = const_cast<LuaSkillCard *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaSkillCard, 0);
}

bool LuaSkillCard::targetFilter(const QList<const Player *> &targets, const Player *to_select, const Player *self) const{
    if (filter == 0)
        return SkillCard::targetFilter(targets, to_select, self);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, filter);

    pushSelf(L);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_Player, 0);
        lua_rawseti(L, -2, i + 1);
    }

    SWIG_NewPointerObj(L, to_select, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 4, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaSkillCard::targetsFeasible(const QList<const Player *> &targets, const Player *self) const{
    if (feasible == 0)
        return SkillCard::targetsFeasible(targets, self);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, feasible);

    pushSelf(L);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_Player, 0);
        lua_rawseti(L, -2, i + 1);
    }

    SWIG_NewPointerObj(L, self, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

void LuaSkillCard::onUse(Room *room, const CardUseStruct &card_use) const{
    if (about_to_use == 0)
        return SkillCard::onUse(room, card_use);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, about_to_use);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, &card_use, SWIGTYPE_p_CardUseStruct, 0);

    int error = lua_pcall(L, 3, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

void LuaSkillCard::use(Room *room, ServerPlayer *source, QList<ServerPlayer *> &targets) const{
    if (on_use == 0)
        return SkillCard::use(room, source, targets);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_use);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, source, SWIGTYPE_p_ServerPlayer, 0);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_ServerPlayer, 0);
        lua_rawseti(L, -2, i + 1);
    }

    int error = lua_pcall(L, 4, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

void LuaSkillCard::onEffect(const CardEffectStruct &effect) const{
    if (on_effect == 0)
        return SkillCard::onEffect(effect);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_effect);

    pushSelf(L);

    SWIG_NewPointerObj(L, &effect, SWIGTYPE_p_CardEffectStruct, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = effect.to->getRoom();
        room->output(error_msg);
    }
}

const Card *LuaSkillCard::validate(CardUseStruct &cardUse) const{
    if (on_validate == 0)
        return SkillCard::validate(cardUse);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_validate);

    pushSelf(L);

    SWIG_NewPointerObj(L, &cardUse, SWIGTYPE_p_CardUseStruct, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return SkillCard::validate(cardUse);
    }

    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result)) {
        const Card *card = static_cast<const Card *>(card_ptr);
        return card;
    }
    else
        return SkillCard::validate(cardUse);
}

const Card *LuaSkillCard::validateInResponse(ServerPlayer *user) const{
    if (on_validate_in_response == 0)
        return SkillCard::validateInResponse(user);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_validate_in_response);

    pushSelf(L);

    SWIG_NewPointerObj(L, user, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return SkillCard::validateInResponse(user);
    }

    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result)) {
        const Card *card = static_cast<const Card *>(card_ptr);
        return card;
    }
    else
        return SkillCard::validateInResponse(user);
}

void LuaSkillCard::extraCost(Room *room, const CardUseStruct &card_use) const{
    if (extra_cost == 0)
        return SkillCard::extraCost(room, card_use);


    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, extra_cost);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, &card_use, SWIGTYPE_p_CardUseStruct, 0);

    int error = lua_pcall(L, 3, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

// ---------------------

void LuaBasicCard::pushSelf(lua_State *L) const{
    LuaBasicCard *self = const_cast<LuaBasicCard *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaBasicCard, 0);
}

bool LuaBasicCard::targetFilter(const QList<const Player *> &targets, const Player *to_select, const Player *self) const{
    if (filter == 0)
        return BasicCard::targetFilter(targets, to_select, self);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, filter);

    pushSelf(L);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_Player, 0);
        lua_rawseti(L, -2, i + 1);
    }

    SWIG_NewPointerObj(L, to_select, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 4, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaBasicCard::targetsFeasible(const QList<const Player *> &targets, const Player *self) const{
    if (feasible == 0)
        return BasicCard::targetsFeasible(targets, self);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, feasible);

    pushSelf(L);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_Player, 0);
        lua_rawseti(L, -2, i + 1);
    }

    SWIG_NewPointerObj(L, self, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

void LuaBasicCard::onUse(Room *room, const CardUseStruct &card_use) const{
    if (about_to_use == 0)
        return BasicCard::onUse(room, card_use);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, about_to_use);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, &card_use, SWIGTYPE_p_CardUseStruct, 0);

    int error = lua_pcall(L, 3, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

void LuaBasicCard::use(Room *room, ServerPlayer *source, QList<ServerPlayer *> &targets) const{
    if (on_use == 0)
        return BasicCard::use(room, source, targets);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_use);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, source, SWIGTYPE_p_ServerPlayer, 0);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_ServerPlayer, 0);
        lua_rawseti(L, -2, i + 1);
    }

    int error = lua_pcall(L, 4, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

void LuaBasicCard::onEffect(const CardEffectStruct &effect) const{
    if (on_effect == 0)
        return BasicCard::onEffect(effect);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_effect);

    pushSelf(L);

    SWIG_NewPointerObj(L, &effect, SWIGTYPE_p_CardEffectStruct, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = effect.to->getRoom();
        room->output(error_msg);
    }
}

bool LuaBasicCard::isAvailable(const Player *player) const{
    if (available == 0)
        return BasicCard::isAvailable(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, available);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

// ---------------------

void LuaTrickCard::pushSelf(lua_State *L) const{
    LuaTrickCard *self = const_cast<LuaTrickCard *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaTrickCard, 0);
}

bool LuaTrickCard::targetFilter(const QList<const Player *> &targets, const Player *to_select, const Player *self) const{
    if (filter == 0)
        return TrickCard::targetFilter(targets, to_select, self);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, filter);

    pushSelf(L);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_Player, 0);
        lua_rawseti(L, -2, i + 1);
    }

    SWIG_NewPointerObj(L, to_select, SWIGTYPE_p_Player, 0);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 4, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

bool LuaTrickCard::targetsFeasible(const QList<const Player *> &targets, const Player *self) const{
    if (feasible == 0)
        return TrickCard::targetsFeasible(targets, self);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, feasible);

    pushSelf(L);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_Player, 0);
        lua_rawseti(L, -2, i + 1);
    }

    SWIG_NewPointerObj(L, self, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

void LuaTrickCard::onNullified(ServerPlayer *target) const{
    if (on_nullified == 0)
        return TrickCard::onNullified(target);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_nullified);

    pushSelf(L);

    SWIG_NewPointerObj(L, target, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        target->getRoom()->output(error_msg);
    }
}

bool LuaTrickCard::isCancelable(const CardEffectStruct &effect) const{
    if (is_cancelable == 0)
        return TrickCard::isCancelable(effect);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, is_cancelable);

    pushSelf(L);

    SWIG_NewPointerObj(L, &effect, SWIGTYPE_p_CardEffectStruct, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

void LuaTrickCard::onUse(Room *room, const CardUseStruct &card_use) const{
    if (about_to_use == 0)
        return TrickCard::onUse(room, card_use);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, about_to_use);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, &card_use, SWIGTYPE_p_CardUseStruct, 0);

    int error = lua_pcall(L, 3, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

void LuaTrickCard::use(Room *room, ServerPlayer *source, QList<ServerPlayer *> &targets) const{
    if (on_use == 0)
        return TrickCard::use(room, source, targets);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_use);

    pushSelf(L);

    SWIG_NewPointerObj(L, room, SWIGTYPE_p_Room, 0);
    SWIG_NewPointerObj(L, source, SWIGTYPE_p_ServerPlayer, 0);

    lua_createtable(L, targets.length(), 0);
    for (int i = 0; i < targets.length(); i++) {
        SWIG_NewPointerObj(L, targets.at(i), SWIGTYPE_p_ServerPlayer, 0);
        lua_rawseti(L, -2, i + 1);
    }

    int error = lua_pcall(L, 4, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

void LuaTrickCard::onEffect(const CardEffectStruct &effect) const{
    if (on_effect == 0)
        return TrickCard::onEffect(effect);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_effect);

    pushSelf(L);

    SWIG_NewPointerObj(L, &effect, SWIGTYPE_p_CardEffectStruct, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = effect.to->getRoom();
        room->output(error_msg);
    }
}

bool LuaTrickCard::isAvailable(const Player *player) const{
    if (available == 0)
        return TrickCard::isAvailable(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, available);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_Player, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        Error(L);
        return false;
    }
    else {
        bool result = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return result;
    }
}

void LuaWeapon::pushSelf(lua_State *L) const{
    LuaWeapon *self = const_cast<LuaWeapon *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaWeapon, 0);
}

void LuaWeapon::onInstall(ServerPlayer *player) const{
    if (on_install == 0)
        return Weapon::onInstall(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_install);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = player->getRoom();
        room->output(error_msg);
    }
}

void LuaWeapon::onUninstall(ServerPlayer *player) const{
    if (on_uninstall == 0)
        return Weapon::onUninstall(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_uninstall);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = player->getRoom();
        room->output(error_msg);
    }
}

void LuaArmor::pushSelf(lua_State *L) const{
    LuaArmor *self = const_cast<LuaArmor *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaArmor, 0);
}

void LuaArmor::onInstall(ServerPlayer *player) const{
    if (on_install == 0)
        return Armor::onInstall(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_install);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = player->getRoom();
        room->output(error_msg);
    }
}

void LuaArmor::onUninstall(ServerPlayer *player) const{
    if (on_uninstall == 0)
        return Armor::onUninstall(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_uninstall);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = player->getRoom();
        room->output(error_msg);
    }
}


void LuaTreasure::pushSelf(lua_State *L) const{
    LuaTreasure *self = const_cast<LuaTreasure *>(this);
    SWIG_NewPointerObj(L, self, SWIGTYPE_p_LuaTreasure, 0);
}

void LuaTreasure::onInstall(ServerPlayer *player) const{
    if (on_install == 0)
        return Treasure::onInstall(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_install);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = player->getRoom();
        room->output(error_msg);
    }
}

void LuaTreasure::onUninstall(ServerPlayer *player) const{
    if (on_uninstall == 0)
        return Treasure::onUninstall(player);

    lua_State *L = Sanguosha->getLuaState();

    // the callback
    lua_rawgeti(L, LUA_REGISTRYINDEX, on_uninstall);

    pushSelf(L);

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        Room *room = player->getRoom();
        room->output(error_msg);
    }
}




#include "ai.h"




bool LuaAI::askForSkillInvoke(const QString &skill_name, const QVariant &data) {
    if (callback == 0)
        return TrustAI::askForSkillInvoke(skill_name, data);

    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    lua_pushstring(L, skill_name.toLatin1());
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
    else {
        bool invoke = lua_toboolean(L, -1);
        lua_pop(L, 1);
        return invoke;
    }

    return false;
}

QString LuaAI::askForChoice(const QString &skill_name, const QString &choices, const QVariant &data) {
    if (callback == 0)
        return TrustAI::askForChoice(skill_name, choices, data);

    lua_State *L = room->getLuaState();
    pushCallback(L, __FUNCTION__);
    lua_pushstring(L, skill_name.toLatin1());
    lua_pushstring(L, choices.toLatin1());
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);
    int error = lua_pcall(L, 4, 1, 0);
    const char *result = lua_tostring(L, -1);
    lua_pop(L, 1);
    if (error) {
        room->output(result);
        return TrustAI::askForChoice(skill_name, choices, data);
    }
    return result;
}

void LuaAI::activate(CardUseStruct &card_use) {
    Q_ASSERT(callback);

    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, &card_use, SWIGTYPE_p_CardUseStruct, 0);

    int error = lua_pcall(L, 2, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        TrustAI::activate(card_use);
    }
}

AI *Room::cloneAI(ServerPlayer *player) {
    if (L == NULL)
        return new TrustAI(player);

    lua_getglobal(L, "CloneAI");

    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 1, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        output(error_msg);
    }
    else {
        void *ai_ptr;
        int result = SWIG_ConvertPtr(L, -1, &ai_ptr, SWIGTYPE_p_AI, 0);
        lua_pop(L, 1);
        if (SWIG_IsOK(result)) {
            AI *ai = static_cast<AI *>(ai_ptr);
            return ai;
        }
    }

    return new TrustAI(player);
}

ServerPlayer *LuaAI::askForYiji(const QList<int> &cards, const QString &reason, int &card_id) {
    if (callback == 0)
        return TrustAI::askForYiji(cards, reason, card_id);

    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    lua_createtable(L, cards.length(), 0);
    lua_pushstring(L, reason.toLatin1());

    for (int i = 0; i < cards.length(); i++) {
        int elem = cards.at(i);
        lua_pushnumber(L, elem);
        lua_rawseti(L, -3, i + 1);
    }

    int error = lua_pcall(L, 3, 2, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
        return NULL;
    }

    void *player_ptr;
    int result = SWIG_ConvertPtr(L, -2, &player_ptr, SWIGTYPE_p_ServerPlayer, 0);
    int number = lua_tonumber(L, -1);
    lua_pop(L, 2);

    if (SWIG_IsOK(result)) {
        card_id = number;
        return static_cast<ServerPlayer *>(player_ptr);
    }

    return NULL;
}

void LuaAI::filterEvent(TriggerEvent event, ServerPlayer *player, const QVariant &data) {
    if (callback == 0)
        return;

    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    lua_pushinteger(L, event);
    SWIG_NewPointerObj(L, player, SWIGTYPE_p_ServerPlayer, 0);
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    int error = lua_pcall(L, 4, 0, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);
    }
}

const Card *LuaAI::askForCard(const QString &pattern, const QString &prompt, const QVariant &data) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    lua_pushstring(L, pattern.toLatin1());
    lua_pushstring(L, prompt.toLatin1());
    SWIG_NewPointerObj(L, &data, SWIGTYPE_p_QVariant, 0);

    int error = lua_pcall(L, 4, 1, 0);
    const char *result = lua_tostring(L, -1);
    lua_pop(L, 1);
    if (error) {
        room->output(result);
        return TrustAI::askForCard(pattern, prompt, data);
    }

    if (result == NULL)
        return TrustAI::askForCard(pattern, prompt, data);

    return Card::Parse(result);
}

int LuaAI::askForCardChosen(ServerPlayer *who, const QString &flags, const QString &reason, Card::HandlingMethod method) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, who, SWIGTYPE_p_ServerPlayer, 0);
    lua_pushstring(L, flags.toLatin1());
    lua_pushstring(L, reason.toLatin1());
    lua_pushinteger(L, (int)method);

    int error = lua_pcall(L, 5, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForCardChosen(who, flags, reason, method);
    }

    if (lua_isnumber(L, -1)) {
        int result = lua_tointeger(L, -1);
        lua_pop(L, 1);
        return result;
    }

    room->output(QString("The result of function %1 should be an integer!").arg(__FUNCTION__));
    lua_pop(L, 1);
    return TrustAI::askForCardChosen(who, flags, reason, method);
}

ServerPlayer *LuaAI::askForPlayerChosen(const QList<ServerPlayer *> &targets, const QString &reason) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, &targets, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0);
    lua_pushstring(L, reason.toLatin1());

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForPlayerChosen(targets, reason);
    }

    void *player_ptr;
    int result = SWIG_ConvertPtr(L, -1, &player_ptr, SWIGTYPE_p_ServerPlayer, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result))
        return static_cast<ServerPlayer *>(player_ptr);
    else
        return TrustAI::askForPlayerChosen(targets, reason);
}

const Card *LuaAI::askForNullification(const Card *trick, ServerPlayer *from, ServerPlayer *to, bool positive) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, trick, SWIGTYPE_p_Card, 0);
    SWIG_NewPointerObj(L, from, SWIGTYPE_p_ServerPlayer, 0);
    SWIG_NewPointerObj(L, to, SWIGTYPE_p_ServerPlayer, 0);
    lua_pushboolean(L, positive);

    int error = lua_pcall(L, 5, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForNullification(trick, from, to, positive);
    }

    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result))
        return static_cast<const Card *>(card_ptr);
    else
        return TrustAI::askForNullification(trick, from, to, positive);
}

const Card *LuaAI::askForCardShow(ServerPlayer *requestor, const QString &reason) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, requestor, SWIGTYPE_p_ServerPlayer, 0);
    lua_pushstring(L, reason.toLatin1());

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForCardShow(requestor, reason);
    }
    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result))
        return static_cast<const Card *>(card_ptr);
    else
        return TrustAI::askForCardShow(requestor, reason);
}

const Card *LuaAI::askForSinglePeach(ServerPlayer *dying) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, dying, SWIGTYPE_p_ServerPlayer, 0);

    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForSinglePeach(dying);
    }
    const char *result = lua_tostring(L, -1);
    lua_pop(L, 1);
    if (result == NULL)
        return TrustAI::askForSinglePeach(dying);

    return Card::Parse(result);
}

const Card *LuaAI::askForPindian(ServerPlayer *requestor, const QString &reason) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    SWIG_NewPointerObj(L, requestor, SWIGTYPE_p_ServerPlayer, 0);
    lua_pushstring(L, reason.toLatin1());

    int error = lua_pcall(L, 3, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForPindian(requestor, reason);
    }

    void *card_ptr;
    int result = SWIG_ConvertPtr(L, -1, &card_ptr, SWIGTYPE_p_Card, 0);
    lua_pop(L, 1);
    if (SWIG_IsOK(result))
        return static_cast<const Card *>(card_ptr);
    else
        return TrustAI::askForPindian(requestor, reason);
}

Card::Suit LuaAI::askForSuit(const QString &reason) {
    lua_State *L = room->getLuaState();

    pushCallback(L, __FUNCTION__);
    lua_pushstring(L, reason.toLatin1());
    int error = lua_pcall(L, 2, 1, 0);
    if (error) {
        const char *error_msg = lua_tostring(L, -1);
        lua_pop(L, 1);
        room->output(error_msg);

        return TrustAI::askForSuit(reason);
    }

    if (lua_isnumber(L, -1)) {
        Card::Suit result = (Card::Suit)lua_tointeger(L, -1);
        lua_pop(L, 1);
        return result;
    }

    return TrustAI::askForSuit(reason);
}


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_QVariant__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *result = 0 ;
  
  SWIG_check_num_args("QVariant::QVariant",0,0)
  result = (QVariant *)new QVariant();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QVariant,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QVariant__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  QVariant *result = 0 ;
  
  SWIG_check_num_args("QVariant::QVariant",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("QVariant::QVariant",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (QVariant *)new QVariant(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QVariant,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QVariant__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  QVariant *result = 0 ;
  
  SWIG_check_num_args("QVariant::QVariant",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("QVariant::QVariant",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (QVariant *)new QVariant((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QVariant,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QVariant__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  QVariant *result = 0 ;
  
  SWIG_check_num_args("QVariant::QVariant",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("QVariant::QVariant",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (QVariant *)new QVariant(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QVariant,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QVariant__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > arg1 ;
  QList< QVariant > *argp1 ;
  QVariant *result = 0 ;
  
  SWIG_check_num_args("QVariant::QVariant",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("QVariant::QVariant",1,"QList< QVariant >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("new_QVariant",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  arg1 = *argp1;
  
  result = (QVariant *)new QVariant(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QVariant,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QVariant(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_QVariant__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_QVariant_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_QVariant__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_QVariant__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_QVariant__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_QVariant__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_QVariant'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QVariant::QVariant()\n"
    "    QVariant::QVariant(int)\n"
    "    QVariant::QVariant(char const *)\n"
    "    QVariant::QVariant(bool)\n"
    "    QVariant::QVariant(QList< QVariant >)\n");
  lua_error(L);return 0;
}


static int _wrap_QVariant_toInt(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  int result;
  
  SWIG_check_num_args("QVariant::toInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toInt",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toInt",1,SWIGTYPE_p_QVariant);
  }
  
  result = (int)((QVariant const *)arg1)->toInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toString(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  QString result;
  
  SWIG_check_num_args("QVariant::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toString",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toString",1,SWIGTYPE_p_QVariant);
  }
  
  result = ((QVariant const *)arg1)->toString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toStringList(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("QVariant::toStringList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toStringList",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toStringList",1,SWIGTYPE_p_QVariant);
  }
  
  result = ((QVariant const *)arg1)->toStringList();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toBool(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  bool result;
  
  SWIG_check_num_args("QVariant::toBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toBool",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toBool",1,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((QVariant const *)arg1)->toBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toList(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  QList< QVariant > result;
  
  SWIG_check_num_args("QVariant::toList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toList",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toList",1,SWIGTYPE_p_QVariant);
  }
  
  result = ((QVariant const *)arg1)->toList();
  {
    QList< QVariant > * resultptr = new QList< QVariant >((const QList< QVariant > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_QVariant_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QVariant::setValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  QVariant_setValue__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  DamageStruct *arg2 = (DamageStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_DamageStruct);
  }
  
  QVariant_setValue__SWIG_1(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toDamage(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  DamageStruct result;
  
  SWIG_check_num_args("QVariant::toDamage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toDamage",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toDamage",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toDamage((QVariant const *)arg1);
  {
    DamageStruct * resultptr = new DamageStruct((const DamageStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DamageStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardEffectStruct *arg2 = (CardEffectStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"CardEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  QVariant_setValue__SWIG_2(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toCardEffect(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardEffectStruct result;
  
  SWIG_check_num_args("QVariant::toCardEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toCardEffect",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toCardEffect",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toCardEffect((QVariant const *)arg1);
  {
    CardEffectStruct * resultptr = new CardEffectStruct((const CardEffectStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardEffectStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  SlashEffectStruct *arg2 = (SlashEffectStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_SlashEffectStruct);
  }
  
  QVariant_setValue__SWIG_3(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toSlashEffect(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  SlashEffectStruct result;
  
  SWIG_check_num_args("QVariant::toSlashEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toSlashEffect",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toSlashEffect",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toSlashEffect((QVariant const *)arg1);
  {
    SlashEffectStruct * resultptr = new SlashEffectStruct((const SlashEffectStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SlashEffectStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardUseStruct *arg2 = (CardUseStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_CardUseStruct);
  }
  
  QVariant_setValue__SWIG_4(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toCardUse(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardUseStruct result;
  
  SWIG_check_num_args("QVariant::toCardUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toCardUse",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toCardUse",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toCardUse((QVariant const *)arg1);
  {
    CardUseStruct * resultptr = new CardUseStruct((const CardUseStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardUseStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_Card);
  }
  
  QVariant_setValue__SWIG_5(arg1,(Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toCard(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("QVariant::toCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toCard",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toCard",1,SWIGTYPE_p_QVariant);
  }
  
  result = (Card *)QVariant_toCard((QVariant const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_ServerPlayer);
  }
  
  QVariant_setValue__SWIG_6(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toPlayer(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("QVariant::toPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toPlayer",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toPlayer",1,SWIGTYPE_p_QVariant);
  }
  
  result = (ServerPlayer *)QVariant_toPlayer((QVariant const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  DyingStruct *arg2 = (DyingStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"DyingStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DyingStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_DyingStruct);
  }
  
  QVariant_setValue__SWIG_7(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toDying(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  DyingStruct result;
  
  SWIG_check_num_args("QVariant::toDying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toDying",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toDying",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toDying((QVariant const *)arg1);
  {
    DyingStruct * resultptr = new DyingStruct((const DyingStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DyingStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  DeathStruct *arg2 = (DeathStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"DeathStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeathStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_DeathStruct);
  }
  
  QVariant_setValue__SWIG_8(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toDeath(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  DeathStruct result;
  
  SWIG_check_num_args("QVariant::toDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toDeath",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toDeath",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toDeath((QVariant const *)arg1);
  {
    DeathStruct * resultptr = new DeathStruct((const DeathStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DeathStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  RecoverStruct *arg2 = (RecoverStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"RecoverStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_RecoverStruct);
  }
  
  QVariant_setValue__SWIG_9(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toRecover(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  RecoverStruct result;
  
  SWIG_check_num_args("QVariant::toRecover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toRecover",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toRecover",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toRecover((QVariant const *)arg1);
  {
    RecoverStruct * resultptr = new RecoverStruct((const RecoverStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RecoverStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  JudgeStruct *arg2 = (JudgeStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_JudgeStruct);
  }
  
  QVariant_setValue__SWIG_10(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toJudge(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  JudgeStruct *result = 0 ;
  
  SWIG_check_num_args("QVariant::toJudge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toJudge",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toJudge",1,SWIGTYPE_p_QVariant);
  }
  
  result = (JudgeStruct *)QVariant_toJudge((QVariant const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_JudgeStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  PindianStruct *arg2 = (PindianStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_PindianStruct);
  }
  
  QVariant_setValue__SWIG_11(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toPindian(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  PindianStruct *result = 0 ;
  
  SWIG_check_num_args("QVariant::toPindian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toPindian",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toPindian",1,SWIGTYPE_p_QVariant);
  }
  
  result = (PindianStruct *)QVariant_toPindian((QVariant const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PindianStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  PhaseChangeStruct *arg2 = (PhaseChangeStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"PhaseChangeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PhaseChangeStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_PhaseChangeStruct);
  }
  
  QVariant_setValue__SWIG_12(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toPhaseChange(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  PhaseChangeStruct result;
  
  SWIG_check_num_args("QVariant::toPhaseChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toPhaseChange",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toPhaseChange",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toPhaseChange((QVariant const *)arg1);
  {
    PhaseChangeStruct * resultptr = new PhaseChangeStruct((const PhaseChangeStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PhaseChangeStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardsMoveOneTimeStruct *arg2 = (CardsMoveOneTimeStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  QVariant_setValue__SWIG_13(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toMoveOneTime(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardsMoveOneTimeStruct result;
  
  SWIG_check_num_args("QVariant::toMoveOneTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toMoveOneTime",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toMoveOneTime",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toMoveOneTime((QVariant const *)arg1);
  {
    CardsMoveOneTimeStruct * resultptr = new CardsMoveOneTimeStruct((const CardsMoveOneTimeStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardsMoveOneTimeStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardResponseStruct *arg2 = (CardResponseStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"CardResponseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_CardResponseStruct);
  }
  
  QVariant_setValue__SWIG_14(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_toCardResponse(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  CardResponseStruct result;
  
  SWIG_check_num_args("QVariant::toCardResponse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toCardResponse",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toCardResponse",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toCardResponse((QVariant const *)arg1);
  {
    CardResponseStruct * resultptr = new CardResponseStruct((const CardResponseStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardResponseStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  PlayerNumStruct *arg2 = (PlayerNumStruct *) 0 ;
  
  SWIG_check_num_args("QVariant::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::setValue",1,"QVariant *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QVariant::setValue",2,"PlayerNumStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_setValue",1,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("QVariant_setValue",2,SWIGTYPE_p_PlayerNumStruct);
  }
  
  QVariant_setValue__SWIG_15(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QVariant_setValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DamageStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardEffectStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SlashEffectStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardUseStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DyingStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DeathStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RecoverStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_JudgeStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_PindianStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_PhaseChangeStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardsMoveOneTimeStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardResponseStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_PlayerNumStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_15(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_QVariant_setValue__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'QVariant_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QVariant::setValue(int)\n"
    "    QVariant::setValue(DamageStruct *)\n"
    "    QVariant::setValue(CardEffectStruct *)\n"
    "    QVariant::setValue(SlashEffectStruct *)\n"
    "    QVariant::setValue(CardUseStruct *)\n"
    "    QVariant::setValue(Card const *)\n"
    "    QVariant::setValue(ServerPlayer *)\n"
    "    QVariant::setValue(DyingStruct *)\n"
    "    QVariant::setValue(DeathStruct *)\n"
    "    QVariant::setValue(RecoverStruct *)\n"
    "    QVariant::setValue(JudgeStruct *)\n"
    "    QVariant::setValue(PindianStruct *)\n"
    "    QVariant::setValue(PhaseChangeStruct *)\n"
    "    QVariant::setValue(CardsMoveOneTimeStruct *)\n"
    "    QVariant::setValue(CardResponseStruct *)\n"
    "    QVariant::setValue(PlayerNumStruct *)\n");
  lua_error(L);return 0;
}


static int _wrap_QVariant_toPlayerNum(lua_State* L) {
  int SWIG_arg = 0;
  QVariant *arg1 = (QVariant *) 0 ;
  PlayerNumStruct result;
  
  SWIG_check_num_args("QVariant::toPlayerNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QVariant::toPlayerNum",1,"QVariant const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QVariant_toPlayerNum",1,SWIGTYPE_p_QVariant);
  }
  
  result = QVariant_toPlayerNum((QVariant const *)arg1);
  {
    PlayerNumStruct * resultptr = new PlayerNumStruct((const PlayerNumStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PlayerNumStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_QVariant(void *obj) {
QVariant *arg1 = (QVariant *) obj;
delete arg1;
}
static swig_lua_method swig_QVariant_methods[] = {
    {"toInt", _wrap_QVariant_toInt}, 
    {"toString", _wrap_QVariant_toString}, 
    {"toStringList", _wrap_QVariant_toStringList}, 
    {"toBool", _wrap_QVariant_toBool}, 
    {"toList", _wrap_QVariant_toList}, 
    {"toDamage", _wrap_QVariant_toDamage}, 
    {"toCardEffect", _wrap_QVariant_toCardEffect}, 
    {"toSlashEffect", _wrap_QVariant_toSlashEffect}, 
    {"toCardUse", _wrap_QVariant_toCardUse}, 
    {"toCard", _wrap_QVariant_toCard}, 
    {"toPlayer", _wrap_QVariant_toPlayer}, 
    {"toDying", _wrap_QVariant_toDying}, 
    {"toDeath", _wrap_QVariant_toDeath}, 
    {"toRecover", _wrap_QVariant_toRecover}, 
    {"toJudge", _wrap_QVariant_toJudge}, 
    {"toPindian", _wrap_QVariant_toPindian}, 
    {"toPhaseChange", _wrap_QVariant_toPhaseChange}, 
    {"toMoveOneTime", _wrap_QVariant_toMoveOneTime}, 
    {"toCardResponse", _wrap_QVariant_toCardResponse}, 
    {"setValue", _wrap_QVariant_setValue}, 
    {"toPlayerNum", _wrap_QVariant_toPlayerNum}, 
    {0,0}
};
static swig_lua_attribute swig_QVariant_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QVariant_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QVariant_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QVariant_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QVariant_bases[] = {0};
static const char *swig_QVariant_base_names[] = {0};
static swig_lua_class _wrap_class_QVariant = { "QVariant", &SWIGTYPE_p_QVariant,_wrap_new_QVariant, swig_delete_QVariant, swig_QVariant_methods, swig_QVariant_attributes, { "QVariant", swig_QVariant_cls_methods, swig_QVariant_cls_attributes, swig_QVariant_cls_constants }, swig_QVariant_bases, swig_QVariant_base_names };

static int _wrap_new_SPlayerList(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *result = 0 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::QList",0,0)
  result = (QList< ServerPlayer * > *)new QList< ServerPlayer * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::length",1,"QList< ServerPlayer * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_length",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  result = (int)((QList< ServerPlayer * > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  ServerPlayer *temp2 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::append",1,"QList< ServerPlayer * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::append",2,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_append",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_append");
  arg2=(ServerPlayer **)&temp2;
  (arg1)->append((ServerPlayer *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  ServerPlayer *temp2 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::prepend",1,"QList< ServerPlayer * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::prepend",2,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_prepend",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_prepend");
  arg2=(ServerPlayer **)&temp2;
  (arg1)->prepend((ServerPlayer *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::isEmpty",1,"QList< ServerPlayer * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_isEmpty",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  result = (bool)((QList< ServerPlayer * > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  ServerPlayer *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::contains",1,"QList< ServerPlayer * > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::contains",2,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_contains",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_contains");
  arg2=(ServerPlayer **)&temp2;
  result = (bool)((QList< ServerPlayer * > const *)arg1)->contains((ServerPlayer *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::first",1,"QList< ServerPlayer * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_first",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  result = (ServerPlayer *)((QList< ServerPlayer * > const *)arg1)->first();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::last",1,"QList< ServerPlayer * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_last",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  result = (ServerPlayer *)((QList< ServerPlayer * > const *)arg1)->last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  int arg2 ;
  ServerPlayer **arg3 = 0 ;
  ServerPlayer *temp3 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::replace",1,"QList< ServerPlayer * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< ServerPlayer * >::replace",3,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_replace",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(ServerPlayer *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_ServerPlayer,0,3,"SPlayerList_replace");
  arg3=(ServerPlayer **)&temp3;
  (arg1)->replace(arg2,(ServerPlayer *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::removeAt",1,"QList< ServerPlayer * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_removeAt",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  ServerPlayer *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::removeAll",1,"QList< ServerPlayer * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::removeAll",2,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_removeAll",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_removeAll");
  arg2=(ServerPlayer **)&temp2;
  result = (int)(arg1)->removeAll((ServerPlayer *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  ServerPlayer *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::removeOne",1,"QList< ServerPlayer * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::removeOne",2,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_removeOne",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_removeOne");
  arg2=(ServerPlayer **)&temp2;
  result = (bool)(arg1)->removeOne((ServerPlayer *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::mid",1,"QList< ServerPlayer * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< ServerPlayer * >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_mid",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< ServerPlayer * > const *)arg1)->mid(arg2,arg3);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  int arg2 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::mid",1,"QList< ServerPlayer * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_mid",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< ServerPlayer * > const *)arg1)->mid(arg2);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SPlayerList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SPlayerList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SPlayerList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< ServerPlayer * >::mid(int,int) const\n"
    "    QList< ServerPlayer * >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_SPlayerList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  int arg3 ;
  ServerPlayer *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::indexOf",1,"QList< ServerPlayer * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::indexOf",2,"ServerPlayer *const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< ServerPlayer * >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_indexOf",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_indexOf");
  arg2=(ServerPlayer **)&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((ServerPlayer *const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  ServerPlayer **arg2 = 0 ;
  ServerPlayer *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< ServerPlayer * >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::indexOf",1,"QList< ServerPlayer * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::indexOf",2,"ServerPlayer *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_indexOf",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  temp2=(ServerPlayer *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_ServerPlayer,0,2,"SPlayerList_indexOf");
  arg2=(ServerPlayer **)&temp2;
  result = (int)(arg1)->indexOf((ServerPlayer *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPlayerList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SPlayerList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SPlayerList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SPlayerList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< ServerPlayer * >::indexOf(ServerPlayer *const &,int)\n"
    "    QList< ServerPlayer * >::indexOf(ServerPlayer *const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SPlayerList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) 0 ;
  int arg2 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("QList< ServerPlayer * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< ServerPlayer * >::at",1,"QList< ServerPlayer * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< ServerPlayer * >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("SPlayerList_at",1,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ServerPlayer *)QList_Sl_ServerPlayer_Sm__Sg__at((QList< ServerPlayer * > const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SPlayerList(void *obj) {
QList< ServerPlayer * > *arg1 = (QList< ServerPlayer * > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_ServerPlayer_Sm__Sg__methods[] = {
    {"length", _wrap_SPlayerList_length}, 
    {"append", _wrap_SPlayerList_append}, 
    {"prepend", _wrap_SPlayerList_prepend}, 
    {"isEmpty", _wrap_SPlayerList_isEmpty}, 
    {"contains", _wrap_SPlayerList_contains}, 
    {"first", _wrap_SPlayerList_first}, 
    {"last", _wrap_SPlayerList_last}, 
    {"replace", _wrap_SPlayerList_replace}, 
    {"removeAt", _wrap_SPlayerList_removeAt}, 
    {"removeAll", _wrap_SPlayerList_removeAll}, 
    {"removeOne", _wrap_SPlayerList_removeOne}, 
    {"mid", _wrap_SPlayerList_mid}, 
    {"indexOf", _wrap_SPlayerList_indexOf}, 
    {"at", _wrap_SPlayerList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_ServerPlayer_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_ServerPlayer_Sm__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_ServerPlayer_Sm__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_ServerPlayer_Sm__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_ServerPlayer_Sm__Sg__bases[] = {0};
static const char *swig_QList_Sl_ServerPlayer_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_ServerPlayer_Sm__Sg_ = { "SPlayerList", &SWIGTYPE_p_QListT_ServerPlayer_p_t,_wrap_new_SPlayerList, swig_delete_SPlayerList, swig_QList_Sl_ServerPlayer_Sm__Sg__methods, swig_QList_Sl_ServerPlayer_Sm__Sg__attributes, { "SPlayerList", swig_QList_Sl_ServerPlayer_Sm__Sg__cls_methods, swig_QList_Sl_ServerPlayer_Sm__Sg__cls_attributes, swig_QList_Sl_ServerPlayer_Sm__Sg__cls_constants }, swig_QList_Sl_ServerPlayer_Sm__Sg__bases, swig_QList_Sl_ServerPlayer_Sm__Sg__base_names };

static int _wrap_new_PlayerList(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *result = 0 ;
  
  SWIG_check_num_args("QList< Player const * >::QList",0,0)
  result = (QList< Player const * > *)new QList< Player const * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Player_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< Player const * >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::length",1,"QList< Player const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_length",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (int)((QList< Player const * > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  Player *temp2 ;
  
  SWIG_check_num_args("QList< Player const * >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::append",1,"QList< Player const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::append",2,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_append",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_append");
  arg2=(Player **)&temp2;
  (arg1)->append((Player const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  Player *temp2 ;
  
  SWIG_check_num_args("QList< Player const * >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::prepend",1,"QList< Player const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::prepend",2,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_prepend",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_prepend");
  arg2=(Player **)&temp2;
  (arg1)->prepend((Player const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< Player const * >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::isEmpty",1,"QList< Player const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_isEmpty",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (bool)((QList< Player const * > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  Player *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Player const * >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::contains",1,"QList< Player const * > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::contains",2,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_contains",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_contains");
  arg2=(Player **)&temp2;
  result = (bool)((QList< Player const * > const *)arg1)->contains((Player const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("QList< Player const * >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::first",1,"QList< Player const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_first",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (Player *)((QList< Player const * > const *)arg1)->first();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("QList< Player const * >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::last",1,"QList< Player const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_last",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (Player *)((QList< Player const * > const *)arg1)->last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  int arg2 ;
  Player **arg3 = 0 ;
  Player *temp3 ;
  
  SWIG_check_num_args("QList< Player const * >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::replace",1,"QList< Player const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player const * >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< Player const * >::replace",3,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_replace",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(Player *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_Player,0,3,"PlayerList_replace");
  arg3=(Player **)&temp3;
  (arg1)->replace(arg2,(Player const *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< Player const * >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::removeAt",1,"QList< Player const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player const * >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_removeAt",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  Player *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player const * >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::removeAll",1,"QList< Player const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::removeAll",2,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_removeAll",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_removeAll");
  arg2=(Player **)&temp2;
  result = (int)(arg1)->removeAll((Player const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  Player *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Player const * >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::removeOne",1,"QList< Player const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::removeOne",2,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_removeOne",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_removeOne");
  arg2=(Player **)&temp2;
  result = (bool)(arg1)->removeOne((Player const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< Player const * > result;
  
  SWIG_check_num_args("QList< Player const * >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::mid",1,"QList< Player const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player const * >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player const * >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_mid",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< Player const * > const *)arg1)->mid(arg2,arg3);
  {
    QList< Player const * > * resultptr = new QList< Player const * >((const QList< Player const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  int arg2 ;
  QList< Player const * > result;
  
  SWIG_check_num_args("QList< Player const * >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::mid",1,"QList< Player const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player const * >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_mid",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< Player const * > const *)arg1)->mid(arg2);
  {
    QList< Player const * > * resultptr = new QList< Player const * >((const QList< Player const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PlayerList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PlayerList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlayerList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Player const * >::mid(int,int) const\n"
    "    QList< Player const * >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_PlayerList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  int arg3 ;
  Player *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player const * >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::indexOf",1,"QList< Player const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::indexOf",2,"Player const *const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player const * >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_indexOf",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_indexOf");
  arg2=(Player **)&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((Player const *const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  Player **arg2 = 0 ;
  Player *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player const * >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::indexOf",1,"QList< Player const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Player const * >::indexOf",2,"Player const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_indexOf",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  temp2=(Player *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Player,0,2,"PlayerList_indexOf");
  arg2=(Player **)&temp2;
  result = (int)(arg1)->indexOf((Player const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PlayerList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PlayerList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlayerList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Player const * >::indexOf(Player const *const &,int)\n"
    "    QList< Player const * >::indexOf(Player const *const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PlayerList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player const * > *arg1 = (QList< Player const * > *) 0 ;
  int arg2 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("QList< Player const * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player const * >::at",1,"QList< Player const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player const * >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("PlayerList_at",1,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Player *)QList_Sl_Player_SS_const_Sm__Sg__at((QList< Player const * > const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PlayerList(void *obj) {
QList< Player const * > *arg1 = (QList< Player const * > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_Player_SS_const_Sm__Sg__methods[] = {
    {"length", _wrap_PlayerList_length}, 
    {"append", _wrap_PlayerList_append}, 
    {"prepend", _wrap_PlayerList_prepend}, 
    {"isEmpty", _wrap_PlayerList_isEmpty}, 
    {"contains", _wrap_PlayerList_contains}, 
    {"first", _wrap_PlayerList_first}, 
    {"last", _wrap_PlayerList_last}, 
    {"replace", _wrap_PlayerList_replace}, 
    {"removeAt", _wrap_PlayerList_removeAt}, 
    {"removeAll", _wrap_PlayerList_removeAll}, 
    {"removeOne", _wrap_PlayerList_removeOne}, 
    {"mid", _wrap_PlayerList_mid}, 
    {"indexOf", _wrap_PlayerList_indexOf}, 
    {"at", _wrap_PlayerList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_Player_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_Player_SS_const_Sm__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_Player_SS_const_Sm__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_Player_SS_const_Sm__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_Player_SS_const_Sm__Sg__bases[] = {0};
static const char *swig_QList_Sl_Player_SS_const_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_Player_SS_const_Sm__Sg_ = { "PlayerList", &SWIGTYPE_p_QListT_Player_const_p_t,_wrap_new_PlayerList, swig_delete_PlayerList, swig_QList_Sl_Player_SS_const_Sm__Sg__methods, swig_QList_Sl_Player_SS_const_Sm__Sg__attributes, { "PlayerList", swig_QList_Sl_Player_SS_const_Sm__Sg__cls_methods, swig_QList_Sl_Player_SS_const_Sm__Sg__cls_attributes, swig_QList_Sl_Player_SS_const_Sm__Sg__cls_constants }, swig_QList_Sl_Player_SS_const_Sm__Sg__bases, swig_QList_Sl_Player_SS_const_Sm__Sg__base_names };

static int _wrap_new_CardList(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *result = 0 ;
  
  SWIG_check_num_args("QList< Card const * >::QList",0,0)
  result = (QList< Card const * > *)new QList< Card const * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< Card const * >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::length",1,"QList< Card const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_length",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (int)((QList< Card const * > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  Card *temp2 ;
  
  SWIG_check_num_args("QList< Card const * >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::append",1,"QList< Card const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::append",2,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_append",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_append");
  arg2=(Card **)&temp2;
  (arg1)->append((Card const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  Card *temp2 ;
  
  SWIG_check_num_args("QList< Card const * >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::prepend",1,"QList< Card const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::prepend",2,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_prepend",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_prepend");
  arg2=(Card **)&temp2;
  (arg1)->prepend((Card const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< Card const * >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::isEmpty",1,"QList< Card const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_isEmpty",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (bool)((QList< Card const * > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  Card *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Card const * >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::contains",1,"QList< Card const * > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::contains",2,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_contains",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_contains");
  arg2=(Card **)&temp2;
  result = (bool)((QList< Card const * > const *)arg1)->contains((Card const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("QList< Card const * >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::first",1,"QList< Card const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_first",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (Card *)((QList< Card const * > const *)arg1)->first();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("QList< Card const * >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::last",1,"QList< Card const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_last",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (Card *)((QList< Card const * > const *)arg1)->last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  int arg2 ;
  Card **arg3 = 0 ;
  Card *temp3 ;
  
  SWIG_check_num_args("QList< Card const * >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::replace",1,"QList< Card const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Card const * >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< Card const * >::replace",3,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_replace",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(Card *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_Card,0,3,"CardList_replace");
  arg3=(Card **)&temp3;
  (arg1)->replace(arg2,(Card const *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< Card const * >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::removeAt",1,"QList< Card const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Card const * >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_removeAt",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  Card *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Card const * >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::removeAll",1,"QList< Card const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::removeAll",2,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_removeAll",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_removeAll");
  arg2=(Card **)&temp2;
  result = (int)(arg1)->removeAll((Card const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  Card *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Card const * >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::removeOne",1,"QList< Card const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::removeOne",2,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_removeOne",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_removeOne");
  arg2=(Card **)&temp2;
  result = (bool)(arg1)->removeOne((Card const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("QList< Card const * >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::mid",1,"QList< Card const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Card const * >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Card const * >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_mid",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< Card const * > const *)arg1)->mid(arg2,arg3);
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  int arg2 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("QList< Card const * >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::mid",1,"QList< Card const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Card const * >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_mid",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< Card const * > const *)arg1)->mid(arg2);
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CardList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CardList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CardList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Card const * >::mid(int,int) const\n"
    "    QList< Card const * >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_CardList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  int arg3 ;
  Card *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Card const * >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::indexOf",1,"QList< Card const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::indexOf",2,"Card const *const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Card const * >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_indexOf",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_indexOf");
  arg2=(Card **)&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((Card const *const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  Card **arg2 = 0 ;
  Card *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Card const * >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::indexOf",1,"QList< Card const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Card const * >::indexOf",2,"Card const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_indexOf",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  temp2=(Card *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Card,0,2,"CardList_indexOf");
  arg2=(Card **)&temp2;
  result = (int)(arg1)->indexOf((Card const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CardList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CardList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CardList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Card const * >::indexOf(Card const *const &,int)\n"
    "    QList< Card const * >::indexOf(Card const *const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CardList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< Card const * > *arg1 = (QList< Card const * > *) 0 ;
  int arg2 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("QList< Card const * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Card const * >::at",1,"QList< Card const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Card const * >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("CardList_at",1,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Card *)QList_Sl_Card_SS_const_Sm__Sg__at((QList< Card const * > const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardList(void *obj) {
QList< Card const * > *arg1 = (QList< Card const * > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_Card_SS_const_Sm__Sg__methods[] = {
    {"length", _wrap_CardList_length}, 
    {"append", _wrap_CardList_append}, 
    {"prepend", _wrap_CardList_prepend}, 
    {"isEmpty", _wrap_CardList_isEmpty}, 
    {"contains", _wrap_CardList_contains}, 
    {"first", _wrap_CardList_first}, 
    {"last", _wrap_CardList_last}, 
    {"replace", _wrap_CardList_replace}, 
    {"removeAt", _wrap_CardList_removeAt}, 
    {"removeAll", _wrap_CardList_removeAll}, 
    {"removeOne", _wrap_CardList_removeOne}, 
    {"mid", _wrap_CardList_mid}, 
    {"indexOf", _wrap_CardList_indexOf}, 
    {"at", _wrap_CardList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_Card_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_Card_SS_const_Sm__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_Card_SS_const_Sm__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_Card_SS_const_Sm__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_Card_SS_const_Sm__Sg__bases[] = {0};
static const char *swig_QList_Sl_Card_SS_const_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_Card_SS_const_Sm__Sg_ = { "CardList", &SWIGTYPE_p_QListT_Card_const_p_t,_wrap_new_CardList, swig_delete_CardList, swig_QList_Sl_Card_SS_const_Sm__Sg__methods, swig_QList_Sl_Card_SS_const_Sm__Sg__attributes, { "CardList", swig_QList_Sl_Card_SS_const_Sm__Sg__cls_methods, swig_QList_Sl_Card_SS_const_Sm__Sg__cls_attributes, swig_QList_Sl_Card_SS_const_Sm__Sg__cls_constants }, swig_QList_Sl_Card_SS_const_Sm__Sg__bases, swig_QList_Sl_Card_SS_const_Sm__Sg__base_names };

static int _wrap_new_IntList(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *result = 0 ;
  
  SWIG_check_num_args("QList< int >::QList",0,0)
  result = (QList< int > *)new QList< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< int >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::length",1,"QList< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_length",1,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (int)((QList< int > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("QList< int >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::append",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::append",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_append",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->append((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("QList< int >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::prepend",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::prepend",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_prepend",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->prepend((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< int >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::isEmpty",1,"QList< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_isEmpty",1,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (bool)((QList< int > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< int >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::contains",1,"QList< int > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::contains",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_contains",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)((QList< int > const *)arg1)->contains((int const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< int >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::first",1,"QList< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_first",1,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (int)((QList< int > const *)arg1)->first();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< int >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::last",1,"QList< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_last",1,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (int)((QList< int > const *)arg1)->last();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("QList< int >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::replace",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::replace",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< int >::replace",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_replace",1,SWIGTYPE_p_QListT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->replace(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< int >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::removeAt",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_removeAt",1,SWIGTYPE_p_QListT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  SWIG_check_num_args("QList< int >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::removeAll",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::removeAll",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_removeAll",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)(arg1)->removeAll((int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< int >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::removeOne",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::removeOne",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_removeOne",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->removeOne((int const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< int > result;
  
  SWIG_check_num_args("QList< int >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::mid",1,"QList< int > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< int >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_mid",1,SWIGTYPE_p_QListT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< int > const *)arg1)->mid(arg2,arg3);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int arg2 ;
  QList< int > result;
  
  SWIG_check_num_args("QList< int >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::mid",1,"QList< int > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_mid",1,SWIGTYPE_p_QListT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< int > const *)arg1)->mid(arg2);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IntList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IntList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IntList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< int >::mid(int,int) const\n"
    "    QList< int >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_IntList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int arg3 ;
  int temp2 ;
  int result;
  
  SWIG_check_num_args("QList< int >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::indexOf",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::indexOf",2,"int const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< int >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_indexOf",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((int const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  SWIG_check_num_args("QList< int >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::indexOf",1,"QList< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::indexOf",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_indexOf",1,SWIGTYPE_p_QListT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)(arg1)->indexOf((int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IntList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IntList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IntList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< int >::indexOf(int const &,int)\n"
    "    QList< int >::indexOf(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IntList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = (QList< int > *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("QList< int >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< int >::at",1,"QList< int > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< int >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("IntList_at",1,SWIGTYPE_p_QListT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)QList_Sl_int_Sg__at((QList< int > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IntList(void *obj) {
QList< int > *arg1 = (QList< int > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_int_Sg__methods[] = {
    {"length", _wrap_IntList_length}, 
    {"append", _wrap_IntList_append}, 
    {"prepend", _wrap_IntList_prepend}, 
    {"isEmpty", _wrap_IntList_isEmpty}, 
    {"contains", _wrap_IntList_contains}, 
    {"first", _wrap_IntList_first}, 
    {"last", _wrap_IntList_last}, 
    {"replace", _wrap_IntList_replace}, 
    {"removeAt", _wrap_IntList_removeAt}, 
    {"removeAll", _wrap_IntList_removeAll}, 
    {"removeOne", _wrap_IntList_removeOne}, 
    {"mid", _wrap_IntList_mid}, 
    {"indexOf", _wrap_IntList_indexOf}, 
    {"at", _wrap_IntList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_int_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_int_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_int_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_int_Sg__bases[] = {0};
static const char *swig_QList_Sl_int_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_int_Sg_ = { "IntList", &SWIGTYPE_p_QListT_int_t,_wrap_new_IntList, swig_delete_IntList, swig_QList_Sl_int_Sg__methods, swig_QList_Sl_int_Sg__attributes, { "IntList", swig_QList_Sl_int_Sg__cls_methods, swig_QList_Sl_int_Sg__cls_attributes, swig_QList_Sl_int_Sg__cls_constants }, swig_QList_Sl_int_Sg__bases, swig_QList_Sl_int_Sg__base_names };

static int _wrap_new_SkillList(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *result = 0 ;
  
  SWIG_check_num_args("QList< Skill const * >::QList",0,0)
  result = (QList< Skill const * > *)new QList< Skill const * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< Skill const * >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::length",1,"QList< Skill const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_length",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  result = (int)((QList< Skill const * > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  Skill *temp2 ;
  
  SWIG_check_num_args("QList< Skill const * >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::append",1,"QList< Skill const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::append",2,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_append",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_append");
  arg2=(Skill **)&temp2;
  (arg1)->append((Skill const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  Skill *temp2 ;
  
  SWIG_check_num_args("QList< Skill const * >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::prepend",1,"QList< Skill const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::prepend",2,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_prepend",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_prepend");
  arg2=(Skill **)&temp2;
  (arg1)->prepend((Skill const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< Skill const * >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::isEmpty",1,"QList< Skill const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_isEmpty",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  result = (bool)((QList< Skill const * > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  Skill *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Skill const * >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::contains",1,"QList< Skill const * > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::contains",2,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_contains",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_contains");
  arg2=(Skill **)&temp2;
  result = (bool)((QList< Skill const * > const *)arg1)->contains((Skill const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("QList< Skill const * >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::first",1,"QList< Skill const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_first",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  result = (Skill *)((QList< Skill const * > const *)arg1)->first();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("QList< Skill const * >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::last",1,"QList< Skill const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_last",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  result = (Skill *)((QList< Skill const * > const *)arg1)->last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  int arg2 ;
  Skill **arg3 = 0 ;
  Skill *temp3 ;
  
  SWIG_check_num_args("QList< Skill const * >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::replace",1,"QList< Skill const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Skill const * >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< Skill const * >::replace",3,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_replace",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(Skill *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_Skill,0,3,"SkillList_replace");
  arg3=(Skill **)&temp3;
  (arg1)->replace(arg2,(Skill const *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< Skill const * >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::removeAt",1,"QList< Skill const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Skill const * >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_removeAt",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  Skill *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Skill const * >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::removeAll",1,"QList< Skill const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::removeAll",2,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_removeAll",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_removeAll");
  arg2=(Skill **)&temp2;
  result = (int)(arg1)->removeAll((Skill const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  Skill *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Skill const * >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::removeOne",1,"QList< Skill const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::removeOne",2,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_removeOne",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_removeOne");
  arg2=(Skill **)&temp2;
  result = (bool)(arg1)->removeOne((Skill const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("QList< Skill const * >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::mid",1,"QList< Skill const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Skill const * >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Skill const * >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_mid",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< Skill const * > const *)arg1)->mid(arg2,arg3);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  int arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("QList< Skill const * >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::mid",1,"QList< Skill const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Skill const * >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_mid",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< Skill const * > const *)arg1)->mid(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Skill_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SkillList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Skill_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SkillList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SkillList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Skill const * >::mid(int,int) const\n"
    "    QList< Skill const * >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_SkillList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  int arg3 ;
  Skill *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Skill const * >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::indexOf",1,"QList< Skill const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::indexOf",2,"Skill const *const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Skill const * >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_indexOf",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_indexOf");
  arg2=(Skill **)&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((Skill const *const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  Skill **arg2 = 0 ;
  Skill *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Skill const * >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::indexOf",1,"QList< Skill const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< Skill const * >::indexOf",2,"Skill const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_indexOf",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  temp2=(Skill *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Skill,0,2,"SkillList_indexOf");
  arg2=(Skill **)&temp2;
  result = (int)(arg1)->indexOf((Skill const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Skill_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SkillList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Skill_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SkillList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SkillList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Skill const * >::indexOf(Skill const *const &,int)\n"
    "    QList< Skill const * >::indexOf(Skill const *const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SkillList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< Skill const * > *arg1 = (QList< Skill const * > *) 0 ;
  int arg2 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("QList< Skill const * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Skill const * >::at",1,"QList< Skill const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Skill const * >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("SkillList_at",1,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Skill *)QList_Sl_Skill_SS_const_Sm__Sg__at((QList< Skill const * > const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SkillList(void *obj) {
QList< Skill const * > *arg1 = (QList< Skill const * > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_Skill_SS_const_Sm__Sg__methods[] = {
    {"length", _wrap_SkillList_length}, 
    {"append", _wrap_SkillList_append}, 
    {"prepend", _wrap_SkillList_prepend}, 
    {"isEmpty", _wrap_SkillList_isEmpty}, 
    {"contains", _wrap_SkillList_contains}, 
    {"first", _wrap_SkillList_first}, 
    {"last", _wrap_SkillList_last}, 
    {"replace", _wrap_SkillList_replace}, 
    {"removeAt", _wrap_SkillList_removeAt}, 
    {"removeAll", _wrap_SkillList_removeAll}, 
    {"removeOne", _wrap_SkillList_removeOne}, 
    {"mid", _wrap_SkillList_mid}, 
    {"indexOf", _wrap_SkillList_indexOf}, 
    {"at", _wrap_SkillList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_Skill_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_Skill_SS_const_Sm__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_Skill_SS_const_Sm__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_Skill_SS_const_Sm__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_Skill_SS_const_Sm__Sg__bases[] = {0};
static const char *swig_QList_Sl_Skill_SS_const_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_Skill_SS_const_Sm__Sg_ = { "SkillList", &SWIGTYPE_p_QListT_Skill_const_p_t,_wrap_new_SkillList, swig_delete_SkillList, swig_QList_Sl_Skill_SS_const_Sm__Sg__methods, swig_QList_Sl_Skill_SS_const_Sm__Sg__attributes, { "SkillList", swig_QList_Sl_Skill_SS_const_Sm__Sg__cls_methods, swig_QList_Sl_Skill_SS_const_Sm__Sg__cls_attributes, swig_QList_Sl_Skill_SS_const_Sm__Sg__cls_constants }, swig_QList_Sl_Skill_SS_const_Sm__Sg__bases, swig_QList_Sl_Skill_SS_const_Sm__Sg__base_names };

static int _wrap_new_DelayedTrickList(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *result = 0 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::QList",0,0)
  result = (QList< DelayedTrick const * > *)new QList< DelayedTrick const * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::length",1,"QList< DelayedTrick const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_length",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  result = (int)((QList< DelayedTrick const * > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  DelayedTrick *temp2 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::append",1,"QList< DelayedTrick const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::append",2,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_append",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_append");
  arg2=(DelayedTrick **)&temp2;
  (arg1)->append((DelayedTrick const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  DelayedTrick *temp2 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::prepend",1,"QList< DelayedTrick const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::prepend",2,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_prepend",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_prepend");
  arg2=(DelayedTrick **)&temp2;
  (arg1)->prepend((DelayedTrick const *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::isEmpty",1,"QList< DelayedTrick const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_isEmpty",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  result = (bool)((QList< DelayedTrick const * > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  DelayedTrick *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::contains",1,"QList< DelayedTrick const * > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::contains",2,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_contains",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_contains");
  arg2=(DelayedTrick **)&temp2;
  result = (bool)((QList< DelayedTrick const * > const *)arg1)->contains((DelayedTrick const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick *result = 0 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::first",1,"QList< DelayedTrick const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_first",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  result = (DelayedTrick *)((QList< DelayedTrick const * > const *)arg1)->first();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DelayedTrick,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick *result = 0 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::last",1,"QList< DelayedTrick const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_last",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  result = (DelayedTrick *)((QList< DelayedTrick const * > const *)arg1)->last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DelayedTrick,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  int arg2 ;
  DelayedTrick **arg3 = 0 ;
  DelayedTrick *temp3 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::replace",1,"QList< DelayedTrick const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< DelayedTrick const * >::replace",3,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_replace",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(DelayedTrick *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_DelayedTrick,0,3,"DelayedTrickList_replace");
  arg3=(DelayedTrick **)&temp3;
  (arg1)->replace(arg2,(DelayedTrick const *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::removeAt",1,"QList< DelayedTrick const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_removeAt",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  DelayedTrick *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::removeAll",1,"QList< DelayedTrick const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::removeAll",2,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_removeAll",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_removeAll");
  arg2=(DelayedTrick **)&temp2;
  result = (int)(arg1)->removeAll((DelayedTrick const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  DelayedTrick *temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::removeOne",1,"QList< DelayedTrick const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::removeOne",2,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_removeOne",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_removeOne");
  arg2=(DelayedTrick **)&temp2;
  result = (bool)(arg1)->removeOne((DelayedTrick const *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< DelayedTrick const * > result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::mid",1,"QList< DelayedTrick const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< DelayedTrick const * >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_mid",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< DelayedTrick const * > const *)arg1)->mid(arg2,arg3);
  {
    QList< DelayedTrick const * > * resultptr = new QList< DelayedTrick const * >((const QList< DelayedTrick const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  int arg2 ;
  QList< DelayedTrick const * > result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::mid",1,"QList< DelayedTrick const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_mid",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< DelayedTrick const * > const *)arg1)->mid(arg2);
  {
    QList< DelayedTrick const * > * resultptr = new QList< DelayedTrick const * >((const QList< DelayedTrick const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_DelayedTrick_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DelayedTrickList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_DelayedTrick_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DelayedTrickList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DelayedTrickList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< DelayedTrick const * >::mid(int,int) const\n"
    "    QList< DelayedTrick const * >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_DelayedTrickList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  int arg3 ;
  DelayedTrick *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::indexOf",1,"QList< DelayedTrick const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::indexOf",2,"DelayedTrick const *const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< DelayedTrick const * >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_indexOf",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_indexOf");
  arg2=(DelayedTrick **)&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((DelayedTrick const *const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  DelayedTrick **arg2 = 0 ;
  DelayedTrick *temp2 ;
  int result;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::indexOf",1,"QList< DelayedTrick const * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::indexOf",2,"DelayedTrick const *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_indexOf",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  temp2=(DelayedTrick *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_DelayedTrick,0,2,"DelayedTrickList_indexOf");
  arg2=(DelayedTrick **)&temp2;
  result = (int)(arg1)->indexOf((DelayedTrick const *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayedTrickList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_DelayedTrick_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DelayedTrick, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DelayedTrickList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_DelayedTrick_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DelayedTrick, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DelayedTrickList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DelayedTrickList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< DelayedTrick const * >::indexOf(DelayedTrick const *const &,int)\n"
    "    QList< DelayedTrick const * >::indexOf(DelayedTrick const *const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DelayedTrickList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) 0 ;
  int arg2 ;
  DelayedTrick *result = 0 ;
  
  SWIG_check_num_args("QList< DelayedTrick const * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< DelayedTrick const * >::at",1,"QList< DelayedTrick const * > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< DelayedTrick const * >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t,0))){
    SWIG_fail_ptr("DelayedTrickList_at",1,SWIGTYPE_p_QListT_DelayedTrick_const_p_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (DelayedTrick *)QList_Sl_DelayedTrick_SS_const_Sm__Sg__at((QList< DelayedTrick const * > const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DelayedTrick,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DelayedTrickList(void *obj) {
QList< DelayedTrick const * > *arg1 = (QList< DelayedTrick const * > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__methods[] = {
    {"length", _wrap_DelayedTrickList_length}, 
    {"append", _wrap_DelayedTrickList_append}, 
    {"prepend", _wrap_DelayedTrickList_prepend}, 
    {"isEmpty", _wrap_DelayedTrickList_isEmpty}, 
    {"contains", _wrap_DelayedTrickList_contains}, 
    {"first", _wrap_DelayedTrickList_first}, 
    {"last", _wrap_DelayedTrickList_last}, 
    {"replace", _wrap_DelayedTrickList_replace}, 
    {"removeAt", _wrap_DelayedTrickList_removeAt}, 
    {"removeAll", _wrap_DelayedTrickList_removeAll}, 
    {"removeOne", _wrap_DelayedTrickList_removeOne}, 
    {"mid", _wrap_DelayedTrickList_mid}, 
    {"indexOf", _wrap_DelayedTrickList_indexOf}, 
    {"at", _wrap_DelayedTrickList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__bases[] = {0};
static const char *swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_DelayedTrick_SS_const_Sm__Sg_ = { "DelayedTrickList", &SWIGTYPE_p_QListT_DelayedTrick_const_p_t,_wrap_new_DelayedTrickList, swig_delete_DelayedTrickList, swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__methods, swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__attributes, { "DelayedTrickList", swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__cls_methods, swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__cls_attributes, swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__cls_constants }, swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__bases, swig_QList_Sl_DelayedTrick_SS_const_Sm__Sg__base_names };

static int _wrap_new_CardsMoveList(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *result = 0 ;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::QList",0,0)
  result = (QList< CardsMoveStruct > *)new QList< CardsMoveStruct >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_CardsMoveStruct_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::length",1,"QList< CardsMoveStruct > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_length",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  result = (int)((QList< CardsMoveStruct > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::append",1,"QList< CardsMoveStruct > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::append",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_append",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_append",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  (arg1)->append((CardsMoveStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::prepend",1,"QList< CardsMoveStruct > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::prepend",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_prepend",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_prepend",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  (arg1)->prepend((CardsMoveStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::isEmpty",1,"QList< CardsMoveStruct > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_isEmpty",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  result = (bool)((QList< CardsMoveStruct > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::contains",1,"QList< CardsMoveStruct > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::contains",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_contains",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_contains",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (bool)((QList< CardsMoveStruct > const *)arg1)->contains((CardsMoveStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::first",1,"QList< CardsMoveStruct > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_first",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  result = ((QList< CardsMoveStruct > const *)arg1)->first();
  {
    CardsMoveStruct * resultptr = new CardsMoveStruct((const CardsMoveStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::last",1,"QList< CardsMoveStruct > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_last",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  result = ((QList< CardsMoveStruct > const *)arg1)->last();
  {
    CardsMoveStruct * resultptr = new CardsMoveStruct((const CardsMoveStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  int arg2 ;
  CardsMoveStruct *arg3 = 0 ;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::replace",1,"QList< CardsMoveStruct > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< CardsMoveStruct >::replace",3,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_replace",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_replace",3,SWIGTYPE_p_CardsMoveStruct);
  }
  
  (arg1)->replace(arg2,(CardsMoveStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::removeAt",1,"QList< CardsMoveStruct > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_removeAt",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::removeAll",1,"QList< CardsMoveStruct > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::removeAll",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_removeAll",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_removeAll",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (int)(arg1)->removeAll((CardsMoveStruct const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::removeOne",1,"QList< CardsMoveStruct > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::removeOne",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_removeOne",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_removeOne",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (bool)(arg1)->removeOne((CardsMoveStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< CardsMoveStruct > result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::mid",1,"QList< CardsMoveStruct > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< CardsMoveStruct >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_mid",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< CardsMoveStruct > const *)arg1)->mid(arg2,arg3);
  {
    QList< CardsMoveStruct > * resultptr = new QList< CardsMoveStruct >((const QList< CardsMoveStruct > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_CardsMoveStruct_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  int arg2 ;
  QList< CardsMoveStruct > result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::mid",1,"QList< CardsMoveStruct > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_mid",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< CardsMoveStruct > const *)arg1)->mid(arg2);
  {
    QList< CardsMoveStruct > * resultptr = new QList< CardsMoveStruct >((const QList< CardsMoveStruct > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_CardsMoveStruct_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CardsMoveList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CardsMoveList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CardsMoveList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< CardsMoveStruct >::mid(int,int) const\n"
    "    QList< CardsMoveStruct >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_CardsMoveList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::indexOf",1,"QList< CardsMoveStruct > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::indexOf",2,"CardsMoveStruct const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< CardsMoveStruct >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_indexOf",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_indexOf",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((CardsMoveStruct const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::indexOf",1,"QList< CardsMoveStruct > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::indexOf",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_indexOf",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveList_indexOf",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (int)(arg1)->indexOf((CardsMoveStruct const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardsMoveStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CardsMoveList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardsMoveStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CardsMoveList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CardsMoveList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< CardsMoveStruct >::indexOf(CardsMoveStruct const &,int)\n"
    "    QList< CardsMoveStruct >::indexOf(CardsMoveStruct const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CardsMoveList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) 0 ;
  int arg2 ;
  CardsMoveStruct result;
  
  SWIG_check_num_args("QList< CardsMoveStruct >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< CardsMoveStruct >::at",1,"QList< CardsMoveStruct > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< CardsMoveStruct >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("CardsMoveList_at",1,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = QList_Sl_CardsMoveStruct_Sg__at((QList< CardsMoveStruct > const *)arg1,arg2);
  {
    CardsMoveStruct * resultptr = new CardsMoveStruct((const CardsMoveStruct &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardsMoveList(void *obj) {
QList< CardsMoveStruct > *arg1 = (QList< CardsMoveStruct > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_CardsMoveStruct_Sg__methods[] = {
    {"length", _wrap_CardsMoveList_length}, 
    {"append", _wrap_CardsMoveList_append}, 
    {"prepend", _wrap_CardsMoveList_prepend}, 
    {"isEmpty", _wrap_CardsMoveList_isEmpty}, 
    {"contains", _wrap_CardsMoveList_contains}, 
    {"first", _wrap_CardsMoveList_first}, 
    {"last", _wrap_CardsMoveList_last}, 
    {"replace", _wrap_CardsMoveList_replace}, 
    {"removeAt", _wrap_CardsMoveList_removeAt}, 
    {"removeAll", _wrap_CardsMoveList_removeAll}, 
    {"removeOne", _wrap_CardsMoveList_removeOne}, 
    {"mid", _wrap_CardsMoveList_mid}, 
    {"indexOf", _wrap_CardsMoveList_indexOf}, 
    {"at", _wrap_CardsMoveList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_CardsMoveStruct_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_CardsMoveStruct_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_CardsMoveStruct_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_CardsMoveStruct_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_CardsMoveStruct_Sg__bases[] = {0};
static const char *swig_QList_Sl_CardsMoveStruct_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_CardsMoveStruct_Sg_ = { "CardsMoveList", &SWIGTYPE_p_QListT_CardsMoveStruct_t,_wrap_new_CardsMoveList, swig_delete_CardsMoveList, swig_QList_Sl_CardsMoveStruct_Sg__methods, swig_QList_Sl_CardsMoveStruct_Sg__attributes, { "CardsMoveList", swig_QList_Sl_CardsMoveStruct_Sg__cls_methods, swig_QList_Sl_CardsMoveStruct_Sg__cls_attributes, swig_QList_Sl_CardsMoveStruct_Sg__cls_constants }, swig_QList_Sl_CardsMoveStruct_Sg__bases, swig_QList_Sl_CardsMoveStruct_Sg__base_names };

static int _wrap_new_PlaceList(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *result = 0 ;
  
  SWIG_check_num_args("QList< Player::Place >::QList",0,0)
  result = (QList< Player::Place > *)new QList< Player::Place >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Player__Place_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Place >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::length",1,"QList< Player::Place > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_length",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  result = (int)((QList< Player::Place > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  Player::Place temp2 ;
  
  SWIG_check_num_args("QList< Player::Place >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::append",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::append",2,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_append",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->append((Player::Place const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  Player::Place temp2 ;
  
  SWIG_check_num_args("QList< Player::Place >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::prepend",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::prepend",2,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_prepend",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->prepend((Player::Place const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< Player::Place >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::isEmpty",1,"QList< Player::Place > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_isEmpty",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  result = (bool)((QList< Player::Place > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  Player::Place temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Player::Place >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::contains",1,"QList< Player::Place > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::contains",2,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_contains",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)((QList< Player::Place > const *)arg1)->contains((Player::Place const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("QList< Player::Place >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::first",1,"QList< Player::Place > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_first",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  result = (Player::Place)((QList< Player::Place > const *)arg1)->first();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("QList< Player::Place >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::last",1,"QList< Player::Place > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_last",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  result = (Player::Place)((QList< Player::Place > const *)arg1)->last();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  int arg2 ;
  Player::Place *arg3 = 0 ;
  Player::Place temp3 ;
  
  SWIG_check_num_args("QList< Player::Place >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::replace",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::replace",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player::Place >::replace",3,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_replace",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(Player::Place)(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->replace(arg2,(Player::Place const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< Player::Place >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::removeAt",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_removeAt",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  Player::Place temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Place >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::removeAll",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::removeAll",2,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_removeAll",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)(arg1)->removeAll((Player::Place const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  Player::Place temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Player::Place >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::removeOne",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::removeOne",2,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_removeOne",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->removeOne((Player::Place const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< Player::Place > result;
  
  SWIG_check_num_args("QList< Player::Place >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::mid",1,"QList< Player::Place > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player::Place >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_mid",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< Player::Place > const *)arg1)->mid(arg2,arg3);
  {
    QList< Player::Place > * resultptr = new QList< Player::Place >((const QList< Player::Place > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player__Place_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  int arg2 ;
  QList< Player::Place > result;
  
  SWIG_check_num_args("QList< Player::Place >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::mid",1,"QList< Player::Place > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_mid",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< Player::Place > const *)arg1)->mid(arg2);
  {
    QList< Player::Place > * resultptr = new QList< Player::Place >((const QList< Player::Place > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player__Place_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Place_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PlaceList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Place_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PlaceList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlaceList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Player::Place >::mid(int,int) const\n"
    "    QList< Player::Place >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_PlaceList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  int arg3 ;
  Player::Place temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Place >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::indexOf",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::indexOf",2,"Player::Place const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player::Place >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_indexOf",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((Player::Place const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  Player::Place *arg2 = 0 ;
  Player::Place temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Place >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::indexOf",1,"QList< Player::Place > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::indexOf",2,"Player::Place const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_indexOf",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  temp2=(Player::Place)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)(arg1)->indexOf((Player::Place const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaceList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Place_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PlaceList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Place_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PlaceList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlaceList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Player::Place >::indexOf(Player::Place const &,int)\n"
    "    QList< Player::Place >::indexOf(Player::Place const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PlaceList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Place > *arg1 = (QList< Player::Place > *) 0 ;
  int arg2 ;
  Player::Place result;
  
  SWIG_check_num_args("QList< Player::Place >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Place >::at",1,"QList< Player::Place > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Place >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("PlaceList_at",1,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Player::Place)QList_Sl_Player_Place_Sg__at((QList< Player::Place > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PlaceList(void *obj) {
QList< Player::Place > *arg1 = (QList< Player::Place > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_Player_Place_Sg__methods[] = {
    {"length", _wrap_PlaceList_length}, 
    {"append", _wrap_PlaceList_append}, 
    {"prepend", _wrap_PlaceList_prepend}, 
    {"isEmpty", _wrap_PlaceList_isEmpty}, 
    {"contains", _wrap_PlaceList_contains}, 
    {"first", _wrap_PlaceList_first}, 
    {"last", _wrap_PlaceList_last}, 
    {"replace", _wrap_PlaceList_replace}, 
    {"removeAt", _wrap_PlaceList_removeAt}, 
    {"removeAll", _wrap_PlaceList_removeAll}, 
    {"removeOne", _wrap_PlaceList_removeOne}, 
    {"mid", _wrap_PlaceList_mid}, 
    {"indexOf", _wrap_PlaceList_indexOf}, 
    {"at", _wrap_PlaceList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_Player_Place_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_Player_Place_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_Player_Place_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_Player_Place_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_Player_Place_Sg__bases[] = {0};
static const char *swig_QList_Sl_Player_Place_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_Player_Place_Sg_ = { "PlaceList", &SWIGTYPE_p_QListT_Player__Place_t,_wrap_new_PlaceList, swig_delete_PlaceList, swig_QList_Sl_Player_Place_Sg__methods, swig_QList_Sl_Player_Place_Sg__attributes, { "PlaceList", swig_QList_Sl_Player_Place_Sg__cls_methods, swig_QList_Sl_Player_Place_Sg__cls_attributes, swig_QList_Sl_Player_Place_Sg__cls_constants }, swig_QList_Sl_Player_Place_Sg__bases, swig_QList_Sl_Player_Place_Sg__base_names };

static int _wrap_new_PhaseList(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *result = 0 ;
  
  SWIG_check_num_args("QList< Player::Phase >::QList",0,0)
  result = (QList< Player::Phase > *)new QList< Player::Phase >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Player__Phase_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Phase >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::length",1,"QList< Player::Phase > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_length",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  result = (int)((QList< Player::Phase > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  Player::Phase temp2 ;
  
  SWIG_check_num_args("QList< Player::Phase >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::append",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::append",2,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_append",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->append((Player::Phase const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  Player::Phase temp2 ;
  
  SWIG_check_num_args("QList< Player::Phase >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::prepend",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::prepend",2,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_prepend",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->prepend((Player::Phase const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< Player::Phase >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::isEmpty",1,"QList< Player::Phase > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_isEmpty",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  result = (bool)((QList< Player::Phase > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  Player::Phase temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Player::Phase >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::contains",1,"QList< Player::Phase > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::contains",2,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_contains",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)((QList< Player::Phase > const *)arg1)->contains((Player::Phase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase result;
  
  SWIG_check_num_args("QList< Player::Phase >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::first",1,"QList< Player::Phase > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_first",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  result = (Player::Phase)((QList< Player::Phase > const *)arg1)->first();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase result;
  
  SWIG_check_num_args("QList< Player::Phase >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::last",1,"QList< Player::Phase > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_last",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  result = (Player::Phase)((QList< Player::Phase > const *)arg1)->last();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  int arg2 ;
  Player::Phase *arg3 = 0 ;
  Player::Phase temp3 ;
  
  SWIG_check_num_args("QList< Player::Phase >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::replace",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::replace",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player::Phase >::replace",3,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_replace",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(Player::Phase)(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->replace(arg2,(Player::Phase const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< Player::Phase >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::removeAt",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_removeAt",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  Player::Phase temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Phase >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::removeAll",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::removeAll",2,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_removeAll",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)(arg1)->removeAll((Player::Phase const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  Player::Phase temp2 ;
  bool result;
  
  SWIG_check_num_args("QList< Player::Phase >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::removeOne",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::removeOne",2,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_removeOne",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->removeOne((Player::Phase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< Player::Phase > result;
  
  SWIG_check_num_args("QList< Player::Phase >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::mid",1,"QList< Player::Phase > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player::Phase >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_mid",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< Player::Phase > const *)arg1)->mid(arg2,arg3);
  {
    QList< Player::Phase > * resultptr = new QList< Player::Phase >((const QList< Player::Phase > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player__Phase_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  int arg2 ;
  QList< Player::Phase > result;
  
  SWIG_check_num_args("QList< Player::Phase >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::mid",1,"QList< Player::Phase > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_mid",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< Player::Phase > const *)arg1)->mid(arg2);
  {
    QList< Player::Phase > * resultptr = new QList< Player::Phase >((const QList< Player::Phase > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player__Phase_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Phase_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhaseList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Phase_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PhaseList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhaseList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Player::Phase >::mid(int,int) const\n"
    "    QList< Player::Phase >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_PhaseList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  int arg3 ;
  Player::Phase temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Phase >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::indexOf",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::indexOf",2,"Player::Phase const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< Player::Phase >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_indexOf",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((Player::Phase const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  Player::Phase *arg2 = 0 ;
  Player::Phase temp2 ;
  int result;
  
  SWIG_check_num_args("QList< Player::Phase >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::indexOf",1,"QList< Player::Phase > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::indexOf",2,"Player::Phase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_indexOf",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  temp2=(Player::Phase)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)(arg1)->indexOf((Player::Phase const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Phase_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhaseList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_Player__Phase_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PhaseList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhaseList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< Player::Phase >::indexOf(Player::Phase const &,int)\n"
    "    QList< Player::Phase >::indexOf(Player::Phase const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhaseList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< Player::Phase > *arg1 = (QList< Player::Phase > *) 0 ;
  int arg2 ;
  Player::Phase result;
  
  SWIG_check_num_args("QList< Player::Phase >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< Player::Phase >::at",1,"QList< Player::Phase > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< Player::Phase >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("PhaseList_at",1,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Player::Phase)QList_Sl_Player_Phase_Sg__at((QList< Player::Phase > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhaseList(void *obj) {
QList< Player::Phase > *arg1 = (QList< Player::Phase > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_Player_Phase_Sg__methods[] = {
    {"length", _wrap_PhaseList_length}, 
    {"append", _wrap_PhaseList_append}, 
    {"prepend", _wrap_PhaseList_prepend}, 
    {"isEmpty", _wrap_PhaseList_isEmpty}, 
    {"contains", _wrap_PhaseList_contains}, 
    {"first", _wrap_PhaseList_first}, 
    {"last", _wrap_PhaseList_last}, 
    {"replace", _wrap_PhaseList_replace}, 
    {"removeAt", _wrap_PhaseList_removeAt}, 
    {"removeAll", _wrap_PhaseList_removeAll}, 
    {"removeOne", _wrap_PhaseList_removeOne}, 
    {"mid", _wrap_PhaseList_mid}, 
    {"indexOf", _wrap_PhaseList_indexOf}, 
    {"at", _wrap_PhaseList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_Player_Phase_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_Player_Phase_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_Player_Phase_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_Player_Phase_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_Player_Phase_Sg__bases[] = {0};
static const char *swig_QList_Sl_Player_Phase_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_Player_Phase_Sg_ = { "PhaseList", &SWIGTYPE_p_QListT_Player__Phase_t,_wrap_new_PhaseList, swig_delete_PhaseList, swig_QList_Sl_Player_Phase_Sg__methods, swig_QList_Sl_Player_Phase_Sg__attributes, { "PhaseList", swig_QList_Sl_Player_Phase_Sg__cls_methods, swig_QList_Sl_Player_Phase_Sg__cls_attributes, swig_QList_Sl_Player_Phase_Sg__cls_constants }, swig_QList_Sl_Player_Phase_Sg__bases, swig_QList_Sl_Player_Phase_Sg__base_names };

static int _wrap_new_VariantList(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *result = 0 ;
  
  SWIG_check_num_args("QList< QVariant >::QList",0,0)
  result = (QList< QVariant > *)new QList< QVariant >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_QVariant_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_length(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  int result;
  
  SWIG_check_num_args("QList< QVariant >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::length",1,"QList< QVariant > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_length",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  result = (int)((QList< QVariant > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_append(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  
  SWIG_check_num_args("QList< QVariant >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::append",1,"QList< QVariant > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::append",2,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_append",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_append",2,SWIGTYPE_p_QVariant);
  }
  
  (arg1)->append((QVariant const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_prepend(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  
  SWIG_check_num_args("QList< QVariant >::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::prepend",1,"QList< QVariant > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::prepend",2,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_prepend",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_prepend",2,SWIGTYPE_p_QVariant);
  }
  
  (arg1)->prepend((QVariant const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  bool result;
  
  SWIG_check_num_args("QList< QVariant >::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::isEmpty",1,"QList< QVariant > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_isEmpty",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  result = (bool)((QList< QVariant > const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_contains(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("QList< QVariant >::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::contains",1,"QList< QVariant > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::contains",2,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_contains",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_contains",2,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((QList< QVariant > const *)arg1)->contains((QVariant const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_first(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant result;
  
  SWIG_check_num_args("QList< QVariant >::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::first",1,"QList< QVariant > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_first",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  result = ((QList< QVariant > const *)arg1)->first();
  {
    QVariant * resultptr = new QVariant((const QVariant &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QVariant,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_last(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant result;
  
  SWIG_check_num_args("QList< QVariant >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::last",1,"QList< QVariant > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_last",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  result = ((QList< QVariant > const *)arg1)->last();
  {
    QVariant * resultptr = new QVariant((const QVariant &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QVariant,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_replace(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  int arg2 ;
  QVariant *arg3 = 0 ;
  
  SWIG_check_num_args("QList< QVariant >::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::replace",1,"QList< QVariant > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< QVariant >::replace",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QList< QVariant >::replace",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_replace",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_replace",3,SWIGTYPE_p_QVariant);
  }
  
  (arg1)->replace(arg2,(QVariant const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_removeAt(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QList< QVariant >::removeAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::removeAt",1,"QList< QVariant > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< QVariant >::removeAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_removeAt",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeAt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_removeAll(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("QList< QVariant >::removeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::removeAll",1,"QList< QVariant > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::removeAll",2,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_removeAll",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_removeAll",2,SWIGTYPE_p_QVariant);
  }
  
  result = (int)(arg1)->removeAll((QVariant const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_removeOne(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("QList< QVariant >::removeOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::removeOne",1,"QList< QVariant > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::removeOne",2,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_removeOne",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_removeOne",2,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->removeOne((QVariant const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_mid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  int arg2 ;
  int arg3 ;
  QList< QVariant > result;
  
  SWIG_check_num_args("QList< QVariant >::mid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::mid",1,"QList< QVariant > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< QVariant >::mid",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< QVariant >::mid",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_mid",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((QList< QVariant > const *)arg1)->mid(arg2,arg3);
  {
    QList< QVariant > * resultptr = new QList< QVariant >((const QList< QVariant > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_QVariant_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_mid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  int arg2 ;
  QList< QVariant > result;
  
  SWIG_check_num_args("QList< QVariant >::mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::mid",1,"QList< QVariant > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< QVariant >::mid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_mid",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((QList< QVariant > const *)arg1)->mid(arg2);
  {
    QList< QVariant > * resultptr = new QList< QVariant >((const QList< QVariant > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_QVariant_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_mid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_QVariant_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VariantList_mid__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_QVariant_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VariantList_mid__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VariantList_mid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< QVariant >::mid(int,int) const\n"
    "    QList< QVariant >::mid(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_VariantList_indexOf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("QList< QVariant >::indexOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::indexOf",1,"QList< QVariant > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::indexOf",2,"QVariant const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QList< QVariant >::indexOf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_indexOf",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_indexOf",2,SWIGTYPE_p_QVariant);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->indexOf((QVariant const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_indexOf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  QVariant *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("QList< QVariant >::indexOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::indexOf",1,"QList< QVariant > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("QList< QVariant >::indexOf",2,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_indexOf",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("VariantList_indexOf",2,SWIGTYPE_p_QVariant);
  }
  
  result = (int)(arg1)->indexOf((QVariant const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariantList_indexOf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_QVariant_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VariantList_indexOf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_QVariant_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VariantList_indexOf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VariantList_indexOf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    QList< QVariant >::indexOf(QVariant const &,int)\n"
    "    QList< QVariant >::indexOf(QVariant const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VariantList_at(lua_State* L) {
  int SWIG_arg = 0;
  QList< QVariant > *arg1 = (QList< QVariant > *) 0 ;
  int arg2 ;
  QVariant result;
  
  SWIG_check_num_args("QList< QVariant >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QList< QVariant >::at",1,"QList< QVariant > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QList< QVariant >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_QVariant_t,0))){
    SWIG_fail_ptr("VariantList_at",1,SWIGTYPE_p_QListT_QVariant_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = QList_Sl_QVariant_Sg__at((QList< QVariant > const *)arg1,arg2);
  {
    QVariant * resultptr = new QVariant((const QVariant &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QVariant,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VariantList(void *obj) {
QList< QVariant > *arg1 = (QList< QVariant > *) obj;
delete arg1;
}
static swig_lua_method swig_QList_Sl_QVariant_Sg__methods[] = {
    {"length", _wrap_VariantList_length}, 
    {"append", _wrap_VariantList_append}, 
    {"prepend", _wrap_VariantList_prepend}, 
    {"isEmpty", _wrap_VariantList_isEmpty}, 
    {"contains", _wrap_VariantList_contains}, 
    {"first", _wrap_VariantList_first}, 
    {"last", _wrap_VariantList_last}, 
    {"replace", _wrap_VariantList_replace}, 
    {"removeAt", _wrap_VariantList_removeAt}, 
    {"removeAll", _wrap_VariantList_removeAll}, 
    {"removeOne", _wrap_VariantList_removeOne}, 
    {"mid", _wrap_VariantList_mid}, 
    {"indexOf", _wrap_VariantList_indexOf}, 
    {"at", _wrap_VariantList_at}, 
    {0,0}
};
static swig_lua_attribute swig_QList_Sl_QVariant_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QList_Sl_QVariant_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QList_Sl_QVariant_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QList_Sl_QVariant_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QList_Sl_QVariant_Sg__bases[] = {0};
static const char *swig_QList_Sl_QVariant_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_QList_Sl_QVariant_Sg_ = { "VariantList", &SWIGTYPE_p_QListT_QVariant_t,_wrap_new_VariantList, swig_delete_VariantList, swig_QList_Sl_QVariant_Sg__methods, swig_QList_Sl_QVariant_Sg__attributes, { "VariantList", swig_QList_Sl_QVariant_Sg__cls_methods, swig_QList_Sl_QVariant_Sg__cls_attributes, swig_QList_Sl_QVariant_Sg__cls_constants }, swig_QList_Sl_QVariant_Sg__bases, swig_QList_Sl_QVariant_Sg__base_names };

static int _wrap_GetMappedRole(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("HegemonyMode::GetMappedRole",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("HegemonyMode::GetMappedRole",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = HegemonyMode::GetMappedRole((char const *)arg1);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMappedKingdom(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("HegemonyMode::GetMappedKingdom",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("HegemonyMode::GetMappedKingdom",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = HegemonyMode::GetMappedKingdom((char const *)arg1);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_objectName(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  QString result;
  
  SWIG_check_num_args("QObject::objectName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::objectName",1,"QObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_objectName",1,SWIGTYPE_p_QObject);
  }
  
  result = (arg1)->objectName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_setObjectName(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("QObject::setObjectName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::setObjectName",1,"QObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("QObject::setObjectName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_setObjectName",1,SWIGTYPE_p_QObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setObjectName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_inherits(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("QObject::inherits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::inherits",1,"QObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("QObject::inherits",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_inherits",1,SWIGTYPE_p_QObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->inherits((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("QObject::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::setProperty",1,"QObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("QObject::setProperty",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("QObject::setProperty",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_setProperty",1,SWIGTYPE_p_QObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("QObject_setProperty",3,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->setProperty((char const *)arg2,(QVariant const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_property(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant result;
  
  SWIG_check_num_args("QObject::property",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::property",1,"QObject const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("QObject::property",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_property",1,SWIGTYPE_p_QObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((QObject const *)arg1)->property((char const *)arg2);
  {
    QVariant * resultptr = new QVariant((const QVariant &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QVariant,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_setParent(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  QObject *arg2 = (QObject *) 0 ;
  
  SWIG_check_num_args("QObject::setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::setParent",1,"QObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QObject::setParent",2,"QObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_setParent",1,SWIGTYPE_p_QObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_setParent",2,SWIGTYPE_p_QObject);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QObject_deleteLater(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  
  SWIG_check_num_args("QObject::deleteLater",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QObject::deleteLater",1,"QObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("QObject_deleteLater",1,SWIGTYPE_p_QObject);
  }
  
  (arg1)->deleteLater();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QObject(lua_State* L) {
  int SWIG_arg = 0;
  QObject *result = 0 ;
  
  SWIG_check_num_args("QObject::QObject",0,0)
  result = (QObject *)new QObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_QObject(void *obj) {
QObject *arg1 = (QObject *) obj;
delete arg1;
}
static swig_lua_method swig_QObject_methods[] = {
    {"objectName", _wrap_QObject_objectName}, 
    {"setObjectName", _wrap_QObject_setObjectName}, 
    {"inherits", _wrap_QObject_inherits}, 
    {"setProperty", _wrap_QObject_setProperty}, 
    {"property", _wrap_QObject_property}, 
    {"setParent", _wrap_QObject_setParent}, 
    {"deleteLater", _wrap_QObject_deleteLater}, 
    {0,0}
};
static swig_lua_attribute swig_QObject_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QObject_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QObject_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QObject_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QObject_bases[] = {0};
static const char *swig_QObject_base_names[] = {0};
static swig_lua_class _wrap_class_QObject = { "QObject", &SWIGTYPE_p_QObject,_wrap_new_QObject, swig_delete_QObject, swig_QObject_methods, swig_QObject_attributes, { "QObject", swig_QObject_cls_methods, swig_QObject_cls_attributes, swig_QObject_cls_constants }, swig_QObject_bases, swig_QObject_base_names };

static int _wrap_new_General__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Package *arg1 = (Package *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  General *result = 0 ;
  
  SWIG_check_num_args("General::General",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::General",1,"Package *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::General",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("General::General",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("General::General",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("General::General",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("General::General",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("General::General",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("new_General",1,SWIGTYPE_p_Package);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (General *)new General(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_General__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Package *arg1 = (Package *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  General *result = 0 ;
  
  SWIG_check_num_args("General::General",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::General",1,"Package *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::General",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("General::General",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("General::General",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("General::General",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("General::General",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("new_General",1,SWIGTYPE_p_Package);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (General *)new General(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_General__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Package *arg1 = (Package *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  General *result = 0 ;
  
  SWIG_check_num_args("General::General",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::General",1,"Package *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::General",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("General::General",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("General::General",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("General::General",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("new_General",1,SWIGTYPE_p_Package);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (General *)new General(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_General__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Package *arg1 = (Package *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  General *result = 0 ;
  
  SWIG_check_num_args("General::General",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::General",1,"Package *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::General",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("General::General",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("General::General",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("new_General",1,SWIGTYPE_p_Package);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (General *)new General(arg1,(char const *)arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_General__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Package *arg1 = (Package *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("General::General",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::General",1,"Package *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::General",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("General::General",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("new_General",1,SWIGTYPE_p_Package);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (General *)new General(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_General(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Package, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_General__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Package, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_General__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Package, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_General__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Package, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_General__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Package, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_General__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_General'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::General(Package *,char const *,char const *,int,bool,bool,bool)\n"
    "    General::General(Package *,char const *,char const *,int,bool,bool)\n"
    "    General::General(Package *,char const *,char const *,int,bool)\n"
    "    General::General(Package *,char const *,char const *,int)\n"
    "    General::General(Package *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_General_getDoubleMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  int result;
  
  SWIG_check_num_args("General::getDoubleMaxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getDoubleMaxHp",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getDoubleMaxHp",1,SWIGTYPE_p_General);
  }
  
  result = (int)((General const *)arg1)->getDoubleMaxHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getKingdom(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QString result;
  
  SWIG_check_num_args("General::getKingdom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getKingdom",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getKingdom",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getKingdom();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isMale(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isMale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isMale",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isMale",1,SWIGTYPE_p_General);
  }
  
  result = (bool)((General const *)arg1)->isMale();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isFemale(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isFemale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isFemale",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isFemale",1,SWIGTYPE_p_General);
  }
  
  result = (bool)((General const *)arg1)->isFemale();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isNeuter(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isNeuter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isNeuter",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isNeuter",1,SWIGTYPE_p_General);
  }
  
  result = (bool)((General const *)arg1)->isNeuter();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isLord(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isLord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isLord",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isLord",1,SWIGTYPE_p_General);
  }
  
  result = (bool)((General const *)arg1)->isLord();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isHidden(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isHidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isHidden",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isHidden",1,SWIGTYPE_p_General);
  }
  
  result = (bool)((General const *)arg1)->isHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isTotallyHidden(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isTotallyHidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isTotallyHidden",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isTotallyHidden",1,SWIGTYPE_p_General);
  }
  
  result = (bool)((General const *)arg1)->isTotallyHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getMaxHpHead(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  int result;
  
  SWIG_check_num_args("General::getMaxHpHead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getMaxHpHead",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getMaxHpHead",1,SWIGTYPE_p_General);
  }
  
  result = (int)((General const *)arg1)->getMaxHpHead();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getMaxHpDeputy(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  int result;
  
  SWIG_check_num_args("General::getMaxHpDeputy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getMaxHpDeputy",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getMaxHpDeputy",1,SWIGTYPE_p_General);
  }
  
  result = (int)((General const *)arg1)->getMaxHpDeputy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getGender(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  General::Gender result;
  
  SWIG_check_num_args("General::getGender",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getGender",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getGender",1,SWIGTYPE_p_General);
  }
  
  result = (General::Gender)((General const *)arg1)->getGender();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_setGender(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  General::Gender arg2 ;
  
  SWIG_check_num_args("General::setGender",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::setGender",1,"General *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("General::setGender",2,"General::Gender");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_setGender",1,SWIGTYPE_p_General);
  }
  
  arg2 = (General::Gender)(int)lua_tonumber(L, 2);
  (arg1)->setGender(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_addSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  
  SWIG_check_num_args("General::addSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::addSkill",1,"General *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("General::addSkill",2,"Skill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_addSkill",1,SWIGTYPE_p_General);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("General_addSkill",2,SWIGTYPE_p_Skill);
  }
  
  (arg1)->addSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_addSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("General::addSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::addSkill",1,"General *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::addSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_addSkill",1,SWIGTYPE_p_General);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_addSkill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_General_addSkill__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_General_addSkill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'General_addSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::addSkill(Skill *)\n"
    "    General::addSkill(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_General_hasSkill(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::hasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::hasSkill",1,"General const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::hasSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_hasSkill",1,SWIGTYPE_p_General);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((General const *)arg1)->hasSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool arg2 ;
  bool arg3 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("General::getSkillList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getSkillList",1,"General const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("General::getSkillList",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("General::getSkillList",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getSkillList",1,SWIGTYPE_p_General);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((General const *)arg1)->getSkillList(arg2,arg3);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("General::getSkillList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getSkillList",1,"General const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("General::getSkillList",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getSkillList",1,SWIGTYPE_p_General);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((General const *)arg1)->getSkillList(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("General::getSkillList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getSkillList",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getSkillList",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getSkillList();
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillList(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_General_getSkillList__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_General_getSkillList__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_General_getSkillList__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'General_getSkillList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::getSkillList(bool,bool) const\n"
    "    General::getSkillList(bool) const\n"
    "    General::getSkillList() const\n");
  lua_error(L);return 0;
}


static int _wrap_General_getVisibleSkillList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool arg2 ;
  bool arg3 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("General::getVisibleSkillList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getVisibleSkillList",1,"General const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("General::getVisibleSkillList",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("General::getVisibleSkillList",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getVisibleSkillList",1,SWIGTYPE_p_General);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((General const *)arg1)->getVisibleSkillList(arg2,arg3);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getVisibleSkillList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("General::getVisibleSkillList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getVisibleSkillList",1,"General const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("General::getVisibleSkillList",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getVisibleSkillList",1,SWIGTYPE_p_General);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((General const *)arg1)->getVisibleSkillList(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getVisibleSkillList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("General::getVisibleSkillList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getVisibleSkillList",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getVisibleSkillList",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getVisibleSkillList();
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getVisibleSkillList(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_General_getVisibleSkillList__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_General_getVisibleSkillList__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_General_getVisibleSkillList__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'General_getVisibleSkillList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::getVisibleSkillList(bool,bool) const\n"
    "    General::getVisibleSkillList(bool) const\n"
    "    General::getVisibleSkillList() const\n");
  lua_error(L);return 0;
}


static int _wrap_General_addRelateSkill(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("General::addRelateSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::addRelateSkill",1,"General *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::addRelateSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_addRelateSkill",1,SWIGTYPE_p_General);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addRelateSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getRelatedSkillNames(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("General::getRelatedSkillNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getRelatedSkillNames",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getRelatedSkillNames",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getRelatedSkillNames();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getPackage(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QString result;
  
  SWIG_check_num_args("General::getPackage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getPackage",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getPackage",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getPackage();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getCompanions(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QString result;
  
  SWIG_check_num_args("General::getCompanions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getCompanions",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getCompanions",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getCompanions();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool arg2 ;
  bool arg3 ;
  QString result;
  
  SWIG_check_num_args("General::getSkillDescription",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getSkillDescription",1,"General const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("General::getSkillDescription",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("General::getSkillDescription",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getSkillDescription",1,SWIGTYPE_p_General);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((General const *)arg1)->getSkillDescription(arg2,arg3);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("General::getSkillDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getSkillDescription",1,"General const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("General::getSkillDescription",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getSkillDescription",1,SWIGTYPE_p_General);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((General const *)arg1)->getSkillDescription(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillDescription__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  QString result;
  
  SWIG_check_num_args("General::getSkillDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::getSkillDescription",1,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_getSkillDescription",1,SWIGTYPE_p_General);
  }
  
  result = ((General const *)arg1)->getSkillDescription();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_getSkillDescription(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_General_getSkillDescription__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_General_getSkillDescription__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_General_getSkillDescription__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'General_getSkillDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::getSkillDescription(bool,bool) const\n"
    "    General::getSkillDescription(bool) const\n"
    "    General::getSkillDescription() const\n");
  lua_error(L);return 0;
}


static int _wrap_General_addCompanion(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("General::addCompanion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::addCompanion",1,"General *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::addCompanion",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_addCompanion",1,SWIGTYPE_p_General);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addCompanion((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_isCompanionWith(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("General::isCompanionWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::isCompanionWith",1,"General const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("General::isCompanionWith",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_isCompanionWith",1,SWIGTYPE_p_General);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((General const *)arg1)->isCompanionWith((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_setHeadMaxHpAdjustedValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("General::setHeadMaxHpAdjustedValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::setHeadMaxHpAdjustedValue",1,"General *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("General::setHeadMaxHpAdjustedValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_setHeadMaxHpAdjustedValue",1,SWIGTYPE_p_General);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeadMaxHpAdjustedValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_setHeadMaxHpAdjustedValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  
  SWIG_check_num_args("General::setHeadMaxHpAdjustedValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::setHeadMaxHpAdjustedValue",1,"General *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_setHeadMaxHpAdjustedValue",1,SWIGTYPE_p_General);
  }
  
  (arg1)->setHeadMaxHpAdjustedValue();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_setHeadMaxHpAdjustedValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_General_setHeadMaxHpAdjustedValue__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_General_setHeadMaxHpAdjustedValue__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'General_setHeadMaxHpAdjustedValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::setHeadMaxHpAdjustedValue(int)\n"
    "    General::setHeadMaxHpAdjustedValue()\n");
  lua_error(L);return 0;
}


static int _wrap_General_setDeputyMaxHpAdjustedValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("General::setDeputyMaxHpAdjustedValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::setDeputyMaxHpAdjustedValue",1,"General *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("General::setDeputyMaxHpAdjustedValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_setDeputyMaxHpAdjustedValue",1,SWIGTYPE_p_General);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDeputyMaxHpAdjustedValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_setDeputyMaxHpAdjustedValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  
  SWIG_check_num_args("General::setDeputyMaxHpAdjustedValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::setDeputyMaxHpAdjustedValue",1,"General *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_setDeputyMaxHpAdjustedValue",1,SWIGTYPE_p_General);
  }
  
  (arg1)->setDeputyMaxHpAdjustedValue();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_General_setDeputyMaxHpAdjustedValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_General_setDeputyMaxHpAdjustedValue__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_General, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_General_setDeputyMaxHpAdjustedValue__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'General_setDeputyMaxHpAdjustedValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    General::setDeputyMaxHpAdjustedValue(int)\n"
    "    General::setDeputyMaxHpAdjustedValue()\n");
  lua_error(L);return 0;
}


static int _wrap_General_lastWord(lua_State* L) {
  int SWIG_arg = 0;
  General *arg1 = (General *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("General::lastWord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("General::lastWord",1,"General const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("General::lastWord",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("General_lastWord",1,SWIGTYPE_p_General);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  ((General const *)arg1)->lastWord(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_General(void *obj) {
General *arg1 = (General *) obj;
delete arg1;
}
static swig_lua_method swig_General_methods[] = {
    {"getDoubleMaxHp", _wrap_General_getDoubleMaxHp}, 
    {"getKingdom", _wrap_General_getKingdom}, 
    {"isMale", _wrap_General_isMale}, 
    {"isFemale", _wrap_General_isFemale}, 
    {"isNeuter", _wrap_General_isNeuter}, 
    {"isLord", _wrap_General_isLord}, 
    {"isHidden", _wrap_General_isHidden}, 
    {"isTotallyHidden", _wrap_General_isTotallyHidden}, 
    {"getMaxHpHead", _wrap_General_getMaxHpHead}, 
    {"getMaxHpDeputy", _wrap_General_getMaxHpDeputy}, 
    {"getGender", _wrap_General_getGender}, 
    {"setGender", _wrap_General_setGender}, 
    {"addSkill", _wrap_General_addSkill}, 
    {"hasSkill", _wrap_General_hasSkill}, 
    {"getSkillList", _wrap_General_getSkillList}, 
    {"getVisibleSkillList", _wrap_General_getVisibleSkillList}, 
    {"addRelateSkill", _wrap_General_addRelateSkill}, 
    {"getRelatedSkillNames", _wrap_General_getRelatedSkillNames}, 
    {"getPackage", _wrap_General_getPackage}, 
    {"getCompanions", _wrap_General_getCompanions}, 
    {"getSkillDescription", _wrap_General_getSkillDescription}, 
    {"addCompanion", _wrap_General_addCompanion}, 
    {"isCompanionWith", _wrap_General_isCompanionWith}, 
    {"setHeadMaxHpAdjustedValue", _wrap_General_setHeadMaxHpAdjustedValue}, 
    {"setDeputyMaxHpAdjustedValue", _wrap_General_setDeputyMaxHpAdjustedValue}, 
    {"lastWord", _wrap_General_lastWord}, 
    {0,0}
};
static swig_lua_attribute swig_General_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_General_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_General_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_General_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Sexless", General::Sexless)},
    {SWIG_LUA_CONSTTAB_INT("Male", General::Male)},
    {SWIG_LUA_CONSTTAB_INT("Female", General::Female)},
    {SWIG_LUA_CONSTTAB_INT("Neuter", General::Neuter)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_General_bases[] = {0,0};
static const char *swig_General_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_General = { "General", &SWIGTYPE_p_General,_wrap_new_General, swig_delete_General, swig_General_methods, swig_General_attributes, { "General", swig_General_cls_methods, swig_General_cls_attributes, swig_General_cls_constants }, swig_General_bases, swig_General_base_names };

static int _wrap_Player_setScreenName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setScreenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setScreenName",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setScreenName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setScreenName",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setScreenName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_screenName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::screenName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::screenName",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_screenName",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->screenName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getHp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getHp",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getHp",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setHp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Player::setHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setHp",1,"Player *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::setHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setHp",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getMaxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getMaxHp",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getMaxHp",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getMaxHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Player::setMaxHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setMaxHp",1,"Player *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::setMaxHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setMaxHp",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMaxHp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLostHp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getLostHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLostHp",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLostHp",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getLostHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isWounded(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isWounded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isWounded",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isWounded",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isWounded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getGender(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General::Gender result;
  
  SWIG_check_num_args("Player::getGender",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getGender",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getGender",1,SWIGTYPE_p_Player);
  }
  
  result = (General::Gender)((Player const *)arg1)->getGender();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setGender(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General::Gender arg2 ;
  
  SWIG_check_num_args("Player::setGender",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setGender",1,"Player *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::setGender",2,"General::Gender");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setGender",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (General::Gender)(int)lua_tonumber(L, 2);
  (arg1)->setGender(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isMale(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isMale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isMale",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isMale",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isMale();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isFemale(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isFemale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isFemale",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isFemale",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isFemale();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isNeuter(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isNeuter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isNeuter",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isNeuter",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isNeuter();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isOwner(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isOwner",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isOwner",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isOwner();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setOwner(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setOwner",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setOwner",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setOwner",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownRole(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownRole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownRole",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownRole",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->hasShownRole();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setShownRole(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setShownRole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setShownRole",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setShownRole",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setShownRole",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setShownRole(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setDisableShow(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setDisableShow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setDisableShow",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setDisableShow",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::setDisableShow",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setDisableShow",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setDisableShow((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeDisableShow(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::removeDisableShow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeDisableShow",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::removeDisableShow",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeDisableShow",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->removeDisableShow((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_disableShow(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  QStringList result;
  
  SWIG_check_num_args("Player::disableShow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::disableShow",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::disableShow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_disableShow",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Player const *)arg1)->disableShow(arg2);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getKingdom(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getKingdom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getKingdom",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getKingdom",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getKingdom();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setKingdom(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setKingdom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setKingdom",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setKingdom",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setKingdom",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setKingdom((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setRole(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setRole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setRole",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setRole",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setRole",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setRole((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getRole(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getRole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getRole",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getRole",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getRole();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getRoleEnum(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player::Role result;
  
  SWIG_check_num_args("Player::getRoleEnum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getRoleEnum",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getRoleEnum",1,SWIGTYPE_p_Player);
  }
  
  result = (Player::Role)((Player const *)arg1)->getRoleEnum();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setGeneral(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *arg2 = (General *) 0 ;
  
  SWIG_check_num_args("Player::setGeneral",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setGeneral",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::setGeneral",2,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setGeneral",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("Player_setGeneral",2,SWIGTYPE_p_General);
  }
  
  (arg1)->setGeneral((General const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setGeneralName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setGeneralName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setGeneralName",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setGeneralName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setGeneralName",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setGeneralName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getGeneralName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getGeneralName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getGeneralName",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getGeneralName",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getGeneralName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setGeneral2Name(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setGeneral2Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setGeneral2Name",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setGeneral2Name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setGeneral2Name",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setGeneral2Name((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getGeneral2Name(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getGeneral2Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getGeneral2Name",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getGeneral2Name",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getGeneral2Name();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getGeneral2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("Player::getGeneral2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getGeneral2",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getGeneral2",1,SWIGTYPE_p_Player);
  }
  
  result = (General *)((Player const *)arg1)->getGeneral2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getFootnoteName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getFootnoteName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getFootnoteName",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getFootnoteName",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getFootnoteName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setState(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setState",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setState",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setState",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setState((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getState(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getState",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getState",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getState();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSeat(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getSeat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSeat",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSeat",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getSeat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSeat(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Player::setSeat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setSeat",1,"Player *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::setSeat",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setSeat",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSeat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isAdjacentTo(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isAdjacentTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isAdjacentTo",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isAdjacentTo",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isAdjacentTo",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isAdjacentTo",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isAdjacentTo((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getPhaseString(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getPhaseString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getPhaseString",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getPhaseString",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getPhaseString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setPhaseString(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setPhaseString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setPhaseString",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setPhaseString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setPhaseString",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setPhaseString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player::Phase result;
  
  SWIG_check_num_args("Player::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getPhase",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getPhase",1,SWIGTYPE_p_Player);
  }
  
  result = (Player::Phase)((Player const *)arg1)->getPhase();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setPhase(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player::Phase arg2 ;
  
  SWIG_check_num_args("Player::setPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setPhase",1,"Player *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::setPhase",2,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setPhase",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  (arg1)->setPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getAttackRange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("Player::getAttackRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getAttackRange",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getAttackRange",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getAttackRange",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((Player const *)arg1)->getAttackRange(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getAttackRange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getAttackRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getAttackRange",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getAttackRange",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getAttackRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getAttackRange(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getAttackRange__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getAttackRange__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getAttackRange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getAttackRange(bool) const\n"
    "    Player::getAttackRange() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_inMyAttackRange(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::inMyAttackRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::inMyAttackRange",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::inMyAttackRange",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_inMyAttackRange",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_inMyAttackRange",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->inMyAttackRange((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isAlive(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isAlive",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isAlive",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isAlive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isDead(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isDead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isDead",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isDead",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isDead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setAlive(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setAlive",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setAlive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setAlive",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAlive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getFlags(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getFlags",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getFlags",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getFlags();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getFlagList(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Player::getFlagList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getFlagList",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getFlagList",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getFlagList();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setFlags",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setFlags",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setFlags",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setFlags((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasFlag(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasFlag",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasFlag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasFlag",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasFlag((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_clearFlags(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::clearFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::clearFlags",1,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_clearFlags",1,SWIGTYPE_p_Player);
  }
  
  (arg1)->clearFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_faceUp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::faceUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::faceUp",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_faceUp",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->faceUp();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setFaceUp(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setFaceUp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setFaceUp",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setFaceUp",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setFaceUp",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setFaceUp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_aliveCount__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("Player::aliveCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::aliveCount",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::aliveCount",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_aliveCount",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((Player const *)arg1)->aliveCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_aliveCount__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::aliveCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::aliveCount",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_aliveCount",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->aliveCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_aliveCount(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_aliveCount__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_aliveCount__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_aliveCount'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::aliveCount(bool) const\n"
    "    Player::aliveCount() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_setFixedDistance(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Player::setFixedDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setFixedDistance",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::setFixedDistance",2,"Player const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::setFixedDistance",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setFixedDistance",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setFixedDistance",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setFixedDistance((Player const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_originalRightDistanceTo(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::originalRightDistanceTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::originalRightDistanceTo",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::originalRightDistanceTo",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_originalRightDistanceTo",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_originalRightDistanceTo",2,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->originalRightDistanceTo((Player const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_distanceTo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Player::distanceTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::distanceTo",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::distanceTo",2,"Player const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::distanceTo",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_distanceTo",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_distanceTo",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)((Player const *)arg1)->distanceTo((Player const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_distanceTo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::distanceTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::distanceTo",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::distanceTo",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_distanceTo",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_distanceTo",2,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->distanceTo((Player const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_distanceTo(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_distanceTo__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_distanceTo__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_distanceTo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::distanceTo(Player const *,int) const\n"
    "    Player::distanceTo(Player const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getAvatarGeneral(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("Player::getAvatarGeneral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getAvatarGeneral",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getAvatarGeneral",1,SWIGTYPE_p_Player);
  }
  
  result = (General *)((Player const *)arg1)->getAvatarGeneral();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getGeneral(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("Player::getGeneral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getGeneral",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getGeneral",1,SWIGTYPE_p_Player);
  }
  
  result = (General *)((Player const *)arg1)->getGeneral();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isLord(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isLord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isLord",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isLord",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isLord();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_acquireSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Player::acquireSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::acquireSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::acquireSkill",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::acquireSkill",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_acquireSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->acquireSkill((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_acquireSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::acquireSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::acquireSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::acquireSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_acquireSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->acquireSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_acquireSkill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_acquireSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_acquireSkill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_acquireSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::acquireSkill(char const *,bool)\n"
    "    Player::acquireSkill(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_detachSkill(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::detachSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::detachSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::detachSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_detachSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->detachSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_detachAllSkills(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::detachAllSkills",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::detachAllSkills",1,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_detachAllSkills",1,SWIGTYPE_p_Player);
  }
  
  (arg1)->detachAllSkills();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Player::addSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::addSkill",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::addSkill",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->addSkill((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::addSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::addSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addSkill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_addSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_addSkill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_addSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::addSkill(char const *,bool)\n"
    "    Player::addSkill(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_loseSkill(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::loseSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::loseSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::loseSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_loseSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loseSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::hasSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasSkill",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::hasSkill",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((Player const *)arg1)->hasSkill((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::hasSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasSkill",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::hasSkill",2,"Skill const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::hasSkill",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasSkill",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_hasSkill",2,SWIGTYPE_p_Skill);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((Player const *)arg1)->hasSkill((Skill const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasSkill",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::hasSkill",2,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasSkill",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_hasSkill",2,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Player const *)arg1)->hasSkill((Skill const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_hasSkill__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_hasSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_hasSkill__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_hasSkill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_hasSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::hasSkill(char const *,bool) const\n"
    "    Player::hasSkill(char const *) const\n"
    "    Player::hasSkill(Skill const *,bool) const\n"
    "    Player::hasSkill(Skill const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_hasSkills__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::hasSkills",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasSkills",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasSkills",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::hasSkills",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasSkills",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((Player const *)arg1)->hasSkills((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkills__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasSkills",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasSkills",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasSkills",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasSkills((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasSkills(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_hasSkills__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_hasSkills__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_hasSkills'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::hasSkills(char const *,bool) const\n"
    "    Player::hasSkills(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_hasInnateSkill(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasInnateSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasInnateSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasInnateSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasInnateSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasInnateSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasLordSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::hasLordSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasLordSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasLordSkill",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::hasLordSkill",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasLordSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((Player const *)arg1)->hasLordSkill((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasLordSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasLordSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasLordSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasLordSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasLordSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasLordSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasLordSkill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_hasLordSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_hasLordSkill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_hasLordSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::hasLordSkill(char const *,bool) const\n"
    "    Player::hasLordSkill(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getGameMode(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getGameMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getGameMode",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getGameMode",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getGameMode();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setEquip(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *arg2 = (WrappedCard *) 0 ;
  
  SWIG_check_num_args("Player::setEquip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setEquip",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::setEquip",2,"WrappedCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setEquip",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("Player_setEquip",2,SWIGTYPE_p_WrappedCard);
  }
  
  (arg1)->setEquip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeEquip(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *arg2 = (WrappedCard *) 0 ;
  
  SWIG_check_num_args("Player::removeEquip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeEquip",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::removeEquip",2,"WrappedCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeEquip",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("Player_removeEquip",2,SWIGTYPE_p_WrappedCard);
  }
  
  (arg1)->removeEquip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasEquip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasEquip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasEquip",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::hasEquip",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasEquip",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_hasEquip",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->hasEquip((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasEquip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasEquip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasEquip",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasEquip",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->hasEquip();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasEquip(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_hasEquip__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_hasEquip__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_hasEquip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::hasEquip(Card const *) const\n"
    "    Player::hasEquip() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getJudgingArea(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("Player::getJudgingArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getJudgingArea",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getJudgingArea",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getJudgingArea();
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getJudgingAreaID(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Player::getJudgingAreaID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getJudgingAreaID",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getJudgingAreaID",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getJudgingAreaID();
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addDelayedTrick(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Player::addDelayedTrick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addDelayedTrick",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::addDelayedTrick",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addDelayedTrick",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_addDelayedTrick",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->addDelayedTrick((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeDelayedTrick(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Player::removeDelayedTrick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeDelayedTrick",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::removeDelayedTrick",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeDelayedTrick",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_removeDelayedTrick",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->removeDelayedTrick((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_containsTrick(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::containsTrick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::containsTrick",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::containsTrick",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_containsTrick",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->containsTrick((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getHandcardNum(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getHandcardNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getHandcardNum",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getHandcardNum",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getHandcardNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeCard(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Player::Place arg3 ;
  
  SWIG_check_num_args("Player::removeCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeCard",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::removeCard",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::removeCard",3,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeCard",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_removeCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  (arg1)->removeCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addCard(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Player::Place arg3 ;
  
  SWIG_check_num_args("Player::addCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addCard",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::addCard",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::addCard",3,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addCard",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_addCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  (arg1)->addCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getHandcards(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("Player::getHandcards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getHandcards",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getHandcards",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getHandcards();
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getWeapon(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Player::getWeapon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getWeapon",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getWeapon",1,SWIGTYPE_p_Player);
  }
  
  result = (WrappedCard *)((Player const *)arg1)->getWeapon();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getArmor(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Player::getArmor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getArmor",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getArmor",1,SWIGTYPE_p_Player);
  }
  
  result = (WrappedCard *)((Player const *)arg1)->getArmor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getDefensiveHorse(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Player::getDefensiveHorse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getDefensiveHorse",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getDefensiveHorse",1,SWIGTYPE_p_Player);
  }
  
  result = (WrappedCard *)((Player const *)arg1)->getDefensiveHorse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getOffensiveHorse(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Player::getOffensiveHorse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getOffensiveHorse",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getOffensiveHorse",1,SWIGTYPE_p_Player);
  }
  
  result = (WrappedCard *)((Player const *)arg1)->getOffensiveHorse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getTreasure(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Player::getTreasure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getTreasure",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getTreasure",1,SWIGTYPE_p_Player);
  }
  
  result = (WrappedCard *)((Player const *)arg1)->getTreasure();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getEquips(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("Player::getEquips",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getEquips",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getEquips",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getEquips();
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getEquip(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  EquipCard *result = 0 ;
  
  SWIG_check_num_args("Player::getEquip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getEquip",1,"Player const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::getEquip",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getEquip",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (EquipCard *)((Player const *)arg1)->getEquip(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EquipCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasWeapon(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasWeapon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasWeapon",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasWeapon",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasWeapon",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasWeapon((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasArmorEffect(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasArmorEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasArmorEffect",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasArmorEffect",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasArmorEffect",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasArmorEffect((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasTreasure(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasTreasure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasTreasure",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasTreasure",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasTreasure",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasTreasure((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isKongcheng(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isKongcheng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isKongcheng",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isKongcheng",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isKongcheng();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isNude(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isNude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isNude",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isNude",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isNude();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isAllNude(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isAllNude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isAllNude",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isAllNude",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isAllNude();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canDiscard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canDiscard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canDiscard",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canDiscard",2,"Player const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::canDiscard",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canDiscard",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canDiscard",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)((Player const *)arg1)->canDiscard((Player const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canDiscard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::canDiscard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canDiscard",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canDiscard",2,"Player const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::canDiscard",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canDiscard",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canDiscard",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((Player const *)arg1)->canDiscard((Player const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canDiscard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_canDiscard__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_canDiscard__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_canDiscard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::canDiscard(Player const *,char const *) const\n"
    "    Player::canDiscard(Player const *,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_addMark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Player::addMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addMark",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::addMark",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::addMark",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addMark",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addMark((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addMark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::addMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addMark",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::addMark",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addMark",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addMark((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addMark(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_addMark__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_addMark__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_addMark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::addMark(char const *,int)\n"
    "    Player::addMark(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_removeMark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Player::removeMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeMark",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::removeMark",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::removeMark",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeMark",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->removeMark((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeMark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::removeMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeMark",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::removeMark",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeMark",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->removeMark((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeMark(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_removeMark__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_removeMark__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_removeMark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::removeMark(char const *,int)\n"
    "    Player::removeMark(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_setMark(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Player::setMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setMark",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setMark",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::setMark",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setMark",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setMark((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getMark(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getMark",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::getMark",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getMark",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)((Player const *)arg1)->getMark((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setChained(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setChained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setChained",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setChained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setChained",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setChained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isChained(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isChained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isChained",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isChained",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isChained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setRemoved(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setRemoved",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setRemoved",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setRemoved",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setRemoved",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRemoved(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isRemoved(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isRemoved",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isRemoved",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isRemoved",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isRemoved();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isDuanchang__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("Player::isDuanchang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isDuanchang",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::isDuanchang",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isDuanchang",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((Player const *)arg1)->isDuanchang(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isDuanchang__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isDuanchang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isDuanchang",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isDuanchang",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isDuanchang();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isDuanchang(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_isDuanchang__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_isDuanchang__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_isDuanchang'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::isDuanchang(bool const) const\n"
    "    Player::isDuanchang() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_canSlash__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool arg4 ;
  int arg5 ;
  QList< Player const * > *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Player::canSlash",3,"Card const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Player::canSlash",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Player::canSlash",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Player::canSlash",6,"QList< Player const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_canSlash",3,SWIGTYPE_p_Card);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("Player_canSlash",6,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,(Card const *)arg3,arg4,arg5,(QList< Player const * > const &)*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Player::canSlash",3,"Card const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Player::canSlash",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Player::canSlash",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_canSlash",3,SWIGTYPE_p_Card);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,(Card const *)arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Player::canSlash",3,"Card const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Player::canSlash",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_canSlash",3,SWIGTYPE_p_Card);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,(Card const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Player::canSlash",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_canSlash",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int arg4 ;
  QList< Player const * > *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::canSlash",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Player::canSlash",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Player::canSlash",5,"QList< Player const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("Player_canSlash",5,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,arg3,arg4,(QList< Player const * > const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::canSlash",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Player::canSlash",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::canSlash",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlash",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlash",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlash",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->canSlash((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlash(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_canSlash__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Player_canSlash__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_canSlash__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Player_canSlash__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Player_canSlash__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Player_canSlash__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Player_canSlash__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Player_canSlash__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_canSlash'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::canSlash(Player const *,Card const *,bool,int,QList< Player const * > const &) const\n"
    "    Player::canSlash(Player const *,Card const *,bool,int) const\n"
    "    Player::canSlash(Player const *,Card const *,bool) const\n"
    "    Player::canSlash(Player const *,Card const *) const\n"
    "    Player::canSlash(Player const *,bool,int,QList< Player const * > const &) const\n"
    "    Player::canSlash(Player const *,bool,int) const\n"
    "    Player::canSlash(Player const *,bool) const\n"
    "    Player::canSlash(Player const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getCardCount(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("Player::getCardCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getCardCount",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getCardCount",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getCardCount",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((Player const *)arg1)->getCardCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getPile(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Player::getPile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getPile",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::getPile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getPile",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Player const *)arg1)->getPile((char const *)arg2);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getPileNames(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Player::getPileNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getPileNames",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getPileNames",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getPileNames();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getPileName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  QString result;
  
  SWIG_check_num_args("Player::getPileName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getPileName",1,"Player const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::getPileName",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getPileName",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Player const *)arg1)->getPileName(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_pileOpen(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::pileOpen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::pileOpen",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::pileOpen",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::pileOpen",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_pileOpen",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)((Player const *)arg1)->pileOpen((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setPileOpen(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setPileOpen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setPileOpen",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setPileOpen",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::setPileOpen",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setPileOpen",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setPileOpen((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addHistory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Player::addHistory",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addHistory",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::addHistory",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::addHistory",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addHistory",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addHistory((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addHistory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::addHistory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addHistory",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::addHistory",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addHistory",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addHistory((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_addHistory(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_addHistory__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_addHistory__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_addHistory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::addHistory(char const *,int)\n"
    "    Player::addHistory(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_clearHistory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::clearHistory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::clearHistory",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::clearHistory",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_clearHistory",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->clearHistory((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_clearHistory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::clearHistory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::clearHistory",1,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_clearHistory",1,SWIGTYPE_p_Player);
  }
  
  (arg1)->clearHistory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_clearHistory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_clearHistory__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_clearHistory__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_clearHistory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::clearHistory(char const *)\n"
    "    Player::clearHistory()\n");
  lua_error(L);return 0;
}


static int _wrap_Player_hasUsed(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasUsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasUsed",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasUsed",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasUsed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasUsed((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_usedTimes(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::usedTimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::usedTimes",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::usedTimes",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_usedTimes",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)((Player const *)arg1)->usedTimes((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSlashCount(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Player::getSlashCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSlashCount",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSlashCount",1,SWIGTYPE_p_Player);
  }
  
  result = (int)((Player const *)arg1)->getSlashCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasEquipSkill(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasEquipSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasEquipSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasEquipSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasEquipSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasEquipSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSkillList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  bool arg3 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getSkillList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSkillList",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getSkillList",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::getSkillList",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSkillList",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((Player const *)arg1)->getSkillList(arg2,arg3);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSkillList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getSkillList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSkillList",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getSkillList",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSkillList",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Player const *)arg1)->getSkillList(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSkillList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getSkillList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSkillList",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSkillList",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getSkillList();
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSkillList(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getSkillList__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getSkillList__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_getSkillList__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getSkillList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getSkillList(bool,bool) const\n"
    "    Player::getSkillList(bool) const\n"
    "    Player::getSkillList() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getHeadSkillList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getHeadSkillList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getHeadSkillList",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getHeadSkillList",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getHeadSkillList",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Player const *)arg1)->getHeadSkillList(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getHeadSkillList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getHeadSkillList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getHeadSkillList",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getHeadSkillList",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getHeadSkillList();
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getHeadSkillList(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getHeadSkillList__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getHeadSkillList__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getHeadSkillList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getHeadSkillList(bool) const\n"
    "    Player::getHeadSkillList() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getDeputySkillList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getDeputySkillList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getDeputySkillList",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getDeputySkillList",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getDeputySkillList",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Player const *)arg1)->getDeputySkillList(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getDeputySkillList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getDeputySkillList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getDeputySkillList",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getDeputySkillList",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getDeputySkillList();
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getDeputySkillList(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getDeputySkillList__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getDeputySkillList__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getDeputySkillList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getDeputySkillList(bool) const\n"
    "    Player::getDeputySkillList() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getVisibleSkillList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getVisibleSkillList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getVisibleSkillList",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getVisibleSkillList",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getVisibleSkillList",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Player const *)arg1)->getVisibleSkillList(arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getVisibleSkillList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Player::getVisibleSkillList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getVisibleSkillList",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getVisibleSkillList",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getVisibleSkillList();
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getVisibleSkillList(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getVisibleSkillList__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getVisibleSkillList__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getVisibleSkillList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getVisibleSkillList(bool) const\n"
    "    Player::getVisibleSkillList() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getSkillDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("Player::getSkillDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSkillDescription",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getSkillDescription",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSkillDescription",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Player const *)arg1)->getSkillDescription(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSkillDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getSkillDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSkillDescription",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSkillDescription",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getSkillDescription();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSkillDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getSkillDescription__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getSkillDescription__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getSkillDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getSkillDescription(bool) const\n"
    "    Player::getSkillDescription() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getHeadSkillDescription(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getHeadSkillDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getHeadSkillDescription",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getHeadSkillDescription",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getHeadSkillDescription();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getDeputySkillDescription(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getDeputySkillDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getDeputySkillDescription",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getDeputySkillDescription",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getDeputySkillDescription();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isProhibited__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  QList< Player const * > *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isProhibited",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isProhibited",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isProhibited",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Player::isProhibited",3,"Card const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Player::isProhibited",4,"QList< Player const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isProhibited",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isProhibited",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isProhibited",3,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("Player_isProhibited",4,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  result = (bool)((Player const *)arg1)->isProhibited((Player const *)arg2,(Card const *)arg3,(QList< Player const * > const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isProhibited__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isProhibited",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isProhibited",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isProhibited",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Player::isProhibited",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isProhibited",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isProhibited",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isProhibited",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->isProhibited((Player const *)arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isProhibited(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Player_isProhibited__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Player_isProhibited__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_isProhibited'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::isProhibited(Player const *,Card const *,QList< Player const * > const &) const\n"
    "    Player::isProhibited(Player const *,Card const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_canSlashWithoutCrossbow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlashWithoutCrossbow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlashWithoutCrossbow",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::canSlashWithoutCrossbow",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlashWithoutCrossbow",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_canSlashWithoutCrossbow",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->canSlashWithoutCrossbow((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlashWithoutCrossbow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::canSlashWithoutCrossbow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::canSlashWithoutCrossbow",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_canSlashWithoutCrossbow",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->canSlashWithoutCrossbow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_canSlashWithoutCrossbow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_canSlashWithoutCrossbow__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_canSlashWithoutCrossbow__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_canSlashWithoutCrossbow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::canSlashWithoutCrossbow(Card const *) const\n"
    "    Player::canSlashWithoutCrossbow() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_isLastHandCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::isLastHandCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isLastHandCard",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isLastHandCard",2,"Card const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::isLastHandCard",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isLastHandCard",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isLastHandCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((Player const *)arg1)->isLastHandCard((Card const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isLastHandCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isLastHandCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isLastHandCard",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isLastHandCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isLastHandCard",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isLastHandCard",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->isLastHandCard((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isLastHandCard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_isLastHandCard__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_isLastHandCard__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_isLastHandCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::isLastHandCard(Card const *,bool) const\n"
    "    Player::isLastHandCard(Card const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_isJilei(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isJilei",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isJilei",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isJilei",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isJilei",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isJilei",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->isJilei((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isLocked(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isLocked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isLocked",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isLocked",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isLocked",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isLocked",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Player const *)arg1)->isLocked((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setCardLimitation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Player::setCardLimitation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setCardLimitation",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setCardLimitation",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::setCardLimitation",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Player::setCardLimitation",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setCardLimitation",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setCardLimitation((char const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setCardLimitation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setCardLimitation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setCardLimitation",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setCardLimitation",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::setCardLimitation",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setCardLimitation",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setCardLimitation((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setCardLimitation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_setCardLimitation__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Player_setCardLimitation__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_setCardLimitation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::setCardLimitation(char const *,char const *,bool)\n"
    "    Player::setCardLimitation(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_removeCardLimitation(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Player::removeCardLimitation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeCardLimitation",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::removeCardLimitation",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Player::removeCardLimitation",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeCardLimitation",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->removeCardLimitation((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_clearCardLimitation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::clearCardLimitation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::clearCardLimitation",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::clearCardLimitation",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_clearCardLimitation",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->clearCardLimitation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_clearCardLimitation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::clearCardLimitation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::clearCardLimitation",1,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_clearCardLimitation",1,SWIGTYPE_p_Player);
  }
  
  (arg1)->clearCardLimitation();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_clearCardLimitation(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_clearCardLimitation__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_clearCardLimitation__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_clearCardLimitation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::clearCardLimitation(bool)\n"
    "    Player::clearCardLimitation()\n");
  lua_error(L);return 0;
}


static int _wrap_Player_isCardLimited__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Card::HandlingMethod arg3 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("Player::isCardLimited",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isCardLimited",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isCardLimited",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::isCardLimited",3,"Card::HandlingMethod");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Player::isCardLimited",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isCardLimited",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isCardLimited",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Card::HandlingMethod)(int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)((Player const *)arg1)->isCardLimited((Card const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isCardLimited__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Card::HandlingMethod arg3 ;
  bool result;
  
  SWIG_check_num_args("Player::isCardLimited",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isCardLimited",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isCardLimited",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Player::isCardLimited",3,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isCardLimited",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_isCardLimited",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Card::HandlingMethod)(int)lua_tonumber(L, 3);
  result = (bool)((Player const *)arg1)->isCardLimited((Card const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_isCardLimited(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_isCardLimited__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Player_isCardLimited__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_isCardLimited'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::isCardLimited(Card const *,Card::HandlingMethod,bool) const\n"
    "    Player::isCardLimited(Card const *,Card::HandlingMethod) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_addQinggangTag(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Player::addQinggangTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::addQinggangTag",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::addQinggangTag",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_addQinggangTag",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_addQinggangTag",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->addQinggangTag((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeQinggangTag(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Player::removeQinggangTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeQinggangTag",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::removeQinggangTag",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeQinggangTag",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Player_removeQinggangTag",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->removeQinggangTag((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLord__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLord",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getLord",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLord",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Player *)((Player const *)arg1)->getLord(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLord__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLord",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLord",1,SWIGTYPE_p_Player);
  }
  
  result = (Player *)((Player const *)arg1)->getLord();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLord(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getLord__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getLord__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getLord'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getLord(bool) const\n"
    "    Player::getLord() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_copyFrom(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::copyFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::copyFrom",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::copyFrom",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_copyFrom",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_copyFrom",2,SWIGTYPE_p_Player);
  }
  
  (arg1)->copyFrom(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getSiblings(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Player const * > result;
  
  SWIG_check_num_args("Player::getSiblings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getSiblings",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getSiblings",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getSiblings();
  {
    QList< Player const * > * resultptr = new QList< Player const * >((const QList< Player const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getAliveSiblings(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Player const * > result;
  
  SWIG_check_num_args("Player::getAliveSiblings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getAliveSiblings",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getAliveSiblings",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getAliveSiblings();
  {
    QList< Player const * > * resultptr = new QList< Player const * >((const QList< Player const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownSkill",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::hasShownSkill",2,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownSkill",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_hasShownSkill",2,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Player const *)arg1)->hasShownSkill((Skill const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasShownSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasShownSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownSkill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_hasShownSkill__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_hasShownSkill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_hasShownSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::hasShownSkill(Skill const *) const\n"
    "    Player::hasShownSkill(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_hasShownSkills(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownSkills",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasShownSkills",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownSkills",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasShownSkills((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_preshowSkill(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::preshowSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::preshowSkill",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::preshowSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_preshowSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->preshowSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_inHeadSkills__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::inHeadSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::inHeadSkills",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::inHeadSkills",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_inHeadSkills",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->inHeadSkills((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_inHeadSkills__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::inHeadSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::inHeadSkills",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::inHeadSkills",2,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_inHeadSkills",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_inHeadSkills",2,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Player const *)arg1)->inHeadSkills((Skill const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_inHeadSkills(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_inHeadSkills__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_inHeadSkills__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_inHeadSkills'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::inHeadSkills(char const *) const\n"
    "    Player::inHeadSkills(Skill const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_inDeputySkills__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::inDeputySkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::inDeputySkills",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::inDeputySkills",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_inDeputySkills",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->inDeputySkills((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_inDeputySkills__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::inDeputySkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::inDeputySkills",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::inDeputySkills",2,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_inDeputySkills",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_inDeputySkills",2,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Player const *)arg1)->inDeputySkills((Skill const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_inDeputySkills(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_inDeputySkills__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_inDeputySkills__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_inDeputySkills'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::inDeputySkills(char const *) const\n"
    "    Player::inDeputySkills(Skill const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getActualGeneral1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("Player::getActualGeneral1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getActualGeneral1",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getActualGeneral1",1,SWIGTYPE_p_Player);
  }
  
  result = (General *)((Player const *)arg1)->getActualGeneral1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getActualGeneral2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("Player::getActualGeneral2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getActualGeneral2",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getActualGeneral2",1,SWIGTYPE_p_Player);
  }
  
  result = (General *)((Player const *)arg1)->getActualGeneral2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getActualGeneral1Name(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getActualGeneral1Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getActualGeneral1Name",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getActualGeneral1Name",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getActualGeneral1Name();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getActualGeneral2Name(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getActualGeneral2Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getActualGeneral2Name",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getActualGeneral2Name",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getActualGeneral2Name();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setActualGeneral1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *arg2 = (General *) 0 ;
  
  SWIG_check_num_args("Player::setActualGeneral1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setActualGeneral1",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::setActualGeneral1",2,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setActualGeneral1",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("Player_setActualGeneral1",2,SWIGTYPE_p_General);
  }
  
  (arg1)->setActualGeneral1((General const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setActualGeneral2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  General *arg2 = (General *) 0 ;
  
  SWIG_check_num_args("Player::setActualGeneral2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setActualGeneral2",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::setActualGeneral2",2,"General const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setActualGeneral2",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_General,0))){
    SWIG_fail_ptr("Player_setActualGeneral2",2,SWIGTYPE_p_General);
  }
  
  (arg1)->setActualGeneral2((General const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setActualGeneral1Name(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setActualGeneral1Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setActualGeneral1Name",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setActualGeneral1Name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setActualGeneral1Name",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setActualGeneral1Name((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setActualGeneral2Name(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setActualGeneral2Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setActualGeneral2Name",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setActualGeneral2Name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setActualGeneral2Name",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setActualGeneral2Name((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownGeneral1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownGeneral1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownGeneral1",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownGeneral1",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->hasShownGeneral1();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownGeneral2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownGeneral2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownGeneral2",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownGeneral2",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->hasShownGeneral2();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setGeneral1Showed(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setGeneral1Showed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setGeneral1Showed",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setGeneral1Showed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setGeneral1Showed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setGeneral1Showed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setGeneral2Showed(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Player::setGeneral2Showed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setGeneral2Showed",1,"Player *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::setGeneral2Showed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setGeneral2Showed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setGeneral2Showed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownOneGeneral(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownOneGeneral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownOneGeneral",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownOneGeneral",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->hasShownOneGeneral();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasShownAllGenerals(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasShownAllGenerals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasShownAllGenerals",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasShownAllGenerals",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->hasShownAllGenerals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSkillPreshowed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Player::setSkillPreshowed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setSkillPreshowed",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setSkillPreshowed",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::setSkillPreshowed",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setSkillPreshowed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setSkillPreshowed((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSkillPreshowed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setSkillPreshowed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setSkillPreshowed",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setSkillPreshowed",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setSkillPreshowed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setSkillPreshowed((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSkillPreshowed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_setSkillPreshowed__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_setSkillPreshowed__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_setSkillPreshowed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::setSkillPreshowed(char const *,bool)\n"
    "    Player::setSkillPreshowed(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_setSkillsPreshowed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Player::setSkillsPreshowed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setSkillsPreshowed",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setSkillsPreshowed",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::setSkillsPreshowed",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setSkillsPreshowed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setSkillsPreshowed((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSkillsPreshowed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setSkillsPreshowed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setSkillsPreshowed",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setSkillsPreshowed",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setSkillsPreshowed",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setSkillsPreshowed((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSkillsPreshowed__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::setSkillsPreshowed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setSkillsPreshowed",1,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setSkillsPreshowed",1,SWIGTYPE_p_Player);
  }
  
  (arg1)->setSkillsPreshowed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setSkillsPreshowed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_setSkillsPreshowed__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_setSkillsPreshowed__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_setSkillsPreshowed__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_setSkillsPreshowed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::setSkillsPreshowed(char const *,bool)\n"
    "    Player::setSkillsPreshowed(char const *)\n"
    "    Player::setSkillsPreshowed()\n");
  lua_error(L);return 0;
}


static int _wrap_Player_hasPreshowedSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasPreshowedSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasPreshowedSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::hasPreshowedSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasPreshowedSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->hasPreshowedSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasPreshowedSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::hasPreshowedSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::hasPreshowedSkill",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::hasPreshowedSkill",2,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_hasPreshowedSkill",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_hasPreshowedSkill",2,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Player const *)arg1)->hasPreshowedSkill((Skill const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_hasPreshowedSkill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_hasPreshowedSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_hasPreshowedSkill__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_hasPreshowedSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::hasPreshowedSkill(char const *) const\n"
    "    Player::hasPreshowedSkill(Skill const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_isHidden(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  SWIG_check_num_args("Player::isHidden",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isHidden",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::isHidden",2,"bool const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isHidden",1,SWIGTYPE_p_Player);
  }
  
  temp2=(lua_toboolean(L, 2)!=0);
  arg2=&temp2;
  result = (bool)((Player const *)arg1)->isHidden((bool const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_ownSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::ownSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::ownSkill",1,"Player const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::ownSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_ownSkill",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Player const *)arg1)->ownSkill((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_ownSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Skill *arg2 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::ownSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::ownSkill",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::ownSkill",2,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_ownSkill",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Player_ownSkill",2,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Player const *)arg1)->ownSkill((Skill const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_ownSkill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_ownSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_ownSkill__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_ownSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::ownSkill(char const *) const\n"
    "    Player::ownSkill(Skill const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_isFriendWith(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::isFriendWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::isFriendWith",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::isFriendWith",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isFriendWith",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_isFriendWith",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->isFriendWith((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_willBeFriendWith(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Player::willBeFriendWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::willBeFriendWith",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::willBeFriendWith",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_willBeFriendWith",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_willBeFriendWith",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Player const *)arg1)->willBeFriendWith((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setNext__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("Player::setNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setNext",1,"Player *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Player::setNext",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setNext",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setNext",2,SWIGTYPE_p_Player);
  }
  
  (arg1)->setNext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setNext__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::setNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setNext",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setNext",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setNext",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setNext((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setNext(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Player_setNext__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_setNext__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_setNext'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::setNext(Player *)\n"
    "    Player::setNext(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getNext__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getNext",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getNext",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getNext",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Player *)((Player const *)arg1)->getNext(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getNext__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getNext",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getNext",1,SWIGTYPE_p_Player);
  }
  
  result = (Player *)((Player const *)arg1)->getNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getNext(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getNext__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getNext__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getNext'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getNext(bool) const\n"
    "    Player::getNext() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getNextName(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QString result;
  
  SWIG_check_num_args("Player::getNextName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getNextName",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getNextName",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getNextName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool arg2 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLast",1,"Player const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Player::getLast",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLast",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Player *)((Player const *)arg1)->getLast(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLast",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLast",1,SWIGTYPE_p_Player);
  }
  
  result = (Player *)((Player const *)arg1)->getLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLast(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getLast__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getLast__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getLast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getLast(bool) const\n"
    "    Player::getLast() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getNextAlive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  bool arg3 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getNextAlive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getNextAlive",1,"Player const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::getNextAlive",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::getNextAlive",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getNextAlive",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Player *)((Player const *)arg1)->getNextAlive(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getNextAlive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getNextAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getNextAlive",1,"Player const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::getNextAlive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getNextAlive",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Player *)((Player const *)arg1)->getNextAlive(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getNextAlive__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getNextAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getNextAlive",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getNextAlive",1,SWIGTYPE_p_Player);
  }
  
  result = (Player *)((Player const *)arg1)->getNextAlive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getNextAlive(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getNextAlive__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getNextAlive__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_getNextAlive__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getNextAlive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getNextAlive(int,bool) const\n"
    "    Player::getNextAlive(int) const\n"
    "    Player::getNextAlive() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getLastAlive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  bool arg3 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLastAlive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLastAlive",1,"Player const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::getLastAlive",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Player::getLastAlive",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLastAlive",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Player *)((Player const *)arg1)->getLastAlive(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLastAlive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  int arg2 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLastAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLastAlive",1,"Player const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Player::getLastAlive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLastAlive",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Player *)((Player const *)arg1)->getLastAlive(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLastAlive__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("Player::getLastAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getLastAlive",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getLastAlive",1,SWIGTYPE_p_Player);
  }
  
  result = (Player *)((Player const *)arg1)->getLastAlive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getLastAlive(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Player_getLastAlive__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Player_getLastAlive__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Player_getLastAlive__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Player_getLastAlive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Player::getLastAlive(int,bool) const\n"
    "    Player::getLastAlive(int) const\n"
    "    Player::getLastAlive() const\n");
  lua_error(L);return 0;
}


static int _wrap_Player_getFormation(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  QList< Player const * > result;
  
  SWIG_check_num_args("Player::getFormation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getFormation",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getFormation",1,SWIGTYPE_p_Player);
  }
  
  result = ((Player const *)arg1)->getFormation();
  {
    QList< Player const * > * resultptr = new QList< Player const * >((const QList< Player const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Player_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_setTag(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  
  SWIG_check_num_args("Player::setTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::setTag",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::setTag",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Player::setTag",3,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_setTag",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Player_setTag",3,SWIGTYPE_p_QVariant);
  }
  
  Player_setTag(arg1,(char const *)arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_getTag(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant result;
  
  SWIG_check_num_args("Player::getTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::getTag",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::getTag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_getTag",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = Player_getTag(arg1,(char const *)arg2);
  {
    QVariant * resultptr = new QVariant((const QVariant &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QVariant,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Player_removeTag(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Player::removeTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Player::removeTag",1,"Player *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Player::removeTag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Player_removeTag",1,SWIGTYPE_p_Player);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  Player_removeTag(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Player(void *obj) {
Player *arg1 = (Player *) obj;
delete arg1;
}
static swig_lua_method swig_Player_methods[] = {
    {"setScreenName", _wrap_Player_setScreenName}, 
    {"screenName", _wrap_Player_screenName}, 
    {"getHp", _wrap_Player_getHp}, 
    {"setHp", _wrap_Player_setHp}, 
    {"getMaxHp", _wrap_Player_getMaxHp}, 
    {"setMaxHp", _wrap_Player_setMaxHp}, 
    {"getLostHp", _wrap_Player_getLostHp}, 
    {"isWounded", _wrap_Player_isWounded}, 
    {"getGender", _wrap_Player_getGender}, 
    {"setGender", _wrap_Player_setGender}, 
    {"isMale", _wrap_Player_isMale}, 
    {"isFemale", _wrap_Player_isFemale}, 
    {"isNeuter", _wrap_Player_isNeuter}, 
    {"isOwner", _wrap_Player_isOwner}, 
    {"setOwner", _wrap_Player_setOwner}, 
    {"hasShownRole", _wrap_Player_hasShownRole}, 
    {"setShownRole", _wrap_Player_setShownRole}, 
    {"setDisableShow", _wrap_Player_setDisableShow}, 
    {"removeDisableShow", _wrap_Player_removeDisableShow}, 
    {"disableShow", _wrap_Player_disableShow}, 
    {"getKingdom", _wrap_Player_getKingdom}, 
    {"setKingdom", _wrap_Player_setKingdom}, 
    {"setRole", _wrap_Player_setRole}, 
    {"getRole", _wrap_Player_getRole}, 
    {"getRoleEnum", _wrap_Player_getRoleEnum}, 
    {"setGeneral", _wrap_Player_setGeneral}, 
    {"setGeneralName", _wrap_Player_setGeneralName}, 
    {"getGeneralName", _wrap_Player_getGeneralName}, 
    {"setGeneral2Name", _wrap_Player_setGeneral2Name}, 
    {"getGeneral2Name", _wrap_Player_getGeneral2Name}, 
    {"getGeneral2", _wrap_Player_getGeneral2}, 
    {"getFootnoteName", _wrap_Player_getFootnoteName}, 
    {"setState", _wrap_Player_setState}, 
    {"getState", _wrap_Player_getState}, 
    {"getSeat", _wrap_Player_getSeat}, 
    {"setSeat", _wrap_Player_setSeat}, 
    {"isAdjacentTo", _wrap_Player_isAdjacentTo}, 
    {"getPhaseString", _wrap_Player_getPhaseString}, 
    {"setPhaseString", _wrap_Player_setPhaseString}, 
    {"getPhase", _wrap_Player_getPhase}, 
    {"setPhase", _wrap_Player_setPhase}, 
    {"getAttackRange", _wrap_Player_getAttackRange}, 
    {"inMyAttackRange", _wrap_Player_inMyAttackRange}, 
    {"isAlive", _wrap_Player_isAlive}, 
    {"isDead", _wrap_Player_isDead}, 
    {"setAlive", _wrap_Player_setAlive}, 
    {"getFlags", _wrap_Player_getFlags}, 
    {"getFlagList", _wrap_Player_getFlagList}, 
    {"setFlags", _wrap_Player_setFlags}, 
    {"hasFlag", _wrap_Player_hasFlag}, 
    {"clearFlags", _wrap_Player_clearFlags}, 
    {"faceUp", _wrap_Player_faceUp}, 
    {"setFaceUp", _wrap_Player_setFaceUp}, 
    {"aliveCount", _wrap_Player_aliveCount}, 
    {"setFixedDistance", _wrap_Player_setFixedDistance}, 
    {"originalRightDistanceTo", _wrap_Player_originalRightDistanceTo}, 
    {"distanceTo", _wrap_Player_distanceTo}, 
    {"getAvatarGeneral", _wrap_Player_getAvatarGeneral}, 
    {"getGeneral", _wrap_Player_getGeneral}, 
    {"isLord", _wrap_Player_isLord}, 
    {"acquireSkill", _wrap_Player_acquireSkill}, 
    {"detachSkill", _wrap_Player_detachSkill}, 
    {"detachAllSkills", _wrap_Player_detachAllSkills}, 
    {"addSkill", _wrap_Player_addSkill}, 
    {"loseSkill", _wrap_Player_loseSkill}, 
    {"hasSkill", _wrap_Player_hasSkill}, 
    {"hasSkills", _wrap_Player_hasSkills}, 
    {"hasInnateSkill", _wrap_Player_hasInnateSkill}, 
    {"hasLordSkill", _wrap_Player_hasLordSkill}, 
    {"getGameMode", _wrap_Player_getGameMode}, 
    {"setEquip", _wrap_Player_setEquip}, 
    {"removeEquip", _wrap_Player_removeEquip}, 
    {"hasEquip", _wrap_Player_hasEquip}, 
    {"getJudgingArea", _wrap_Player_getJudgingArea}, 
    {"getJudgingAreaID", _wrap_Player_getJudgingAreaID}, 
    {"addDelayedTrick", _wrap_Player_addDelayedTrick}, 
    {"removeDelayedTrick", _wrap_Player_removeDelayedTrick}, 
    {"containsTrick", _wrap_Player_containsTrick}, 
    {"getHandcardNum", _wrap_Player_getHandcardNum}, 
    {"removeCard", _wrap_Player_removeCard}, 
    {"addCard", _wrap_Player_addCard}, 
    {"getHandcards", _wrap_Player_getHandcards}, 
    {"getWeapon", _wrap_Player_getWeapon}, 
    {"getArmor", _wrap_Player_getArmor}, 
    {"getDefensiveHorse", _wrap_Player_getDefensiveHorse}, 
    {"getOffensiveHorse", _wrap_Player_getOffensiveHorse}, 
    {"getTreasure", _wrap_Player_getTreasure}, 
    {"getEquips", _wrap_Player_getEquips}, 
    {"getEquip", _wrap_Player_getEquip}, 
    {"hasWeapon", _wrap_Player_hasWeapon}, 
    {"hasArmorEffect", _wrap_Player_hasArmorEffect}, 
    {"hasTreasure", _wrap_Player_hasTreasure}, 
    {"isKongcheng", _wrap_Player_isKongcheng}, 
    {"isNude", _wrap_Player_isNude}, 
    {"isAllNude", _wrap_Player_isAllNude}, 
    {"canDiscard", _wrap_Player_canDiscard}, 
    {"addMark", _wrap_Player_addMark}, 
    {"removeMark", _wrap_Player_removeMark}, 
    {"setMark", _wrap_Player_setMark}, 
    {"getMark", _wrap_Player_getMark}, 
    {"setChained", _wrap_Player_setChained}, 
    {"isChained", _wrap_Player_isChained}, 
    {"setRemoved", _wrap_Player_setRemoved}, 
    {"isRemoved", _wrap_Player_isRemoved}, 
    {"isDuanchang", _wrap_Player_isDuanchang}, 
    {"canSlash", _wrap_Player_canSlash}, 
    {"getCardCount", _wrap_Player_getCardCount}, 
    {"getPile", _wrap_Player_getPile}, 
    {"getPileNames", _wrap_Player_getPileNames}, 
    {"getPileName", _wrap_Player_getPileName}, 
    {"pileOpen", _wrap_Player_pileOpen}, 
    {"setPileOpen", _wrap_Player_setPileOpen}, 
    {"addHistory", _wrap_Player_addHistory}, 
    {"clearHistory", _wrap_Player_clearHistory}, 
    {"hasUsed", _wrap_Player_hasUsed}, 
    {"usedTimes", _wrap_Player_usedTimes}, 
    {"getSlashCount", _wrap_Player_getSlashCount}, 
    {"hasEquipSkill", _wrap_Player_hasEquipSkill}, 
    {"getSkillList", _wrap_Player_getSkillList}, 
    {"getHeadSkillList", _wrap_Player_getHeadSkillList}, 
    {"getDeputySkillList", _wrap_Player_getDeputySkillList}, 
    {"getVisibleSkillList", _wrap_Player_getVisibleSkillList}, 
    {"getSkillDescription", _wrap_Player_getSkillDescription}, 
    {"getHeadSkillDescription", _wrap_Player_getHeadSkillDescription}, 
    {"getDeputySkillDescription", _wrap_Player_getDeputySkillDescription}, 
    {"isProhibited", _wrap_Player_isProhibited}, 
    {"canSlashWithoutCrossbow", _wrap_Player_canSlashWithoutCrossbow}, 
    {"isLastHandCard", _wrap_Player_isLastHandCard}, 
    {"isJilei", _wrap_Player_isJilei}, 
    {"isLocked", _wrap_Player_isLocked}, 
    {"setCardLimitation", _wrap_Player_setCardLimitation}, 
    {"removeCardLimitation", _wrap_Player_removeCardLimitation}, 
    {"clearCardLimitation", _wrap_Player_clearCardLimitation}, 
    {"isCardLimited", _wrap_Player_isCardLimited}, 
    {"addQinggangTag", _wrap_Player_addQinggangTag}, 
    {"removeQinggangTag", _wrap_Player_removeQinggangTag}, 
    {"getLord", _wrap_Player_getLord}, 
    {"copyFrom", _wrap_Player_copyFrom}, 
    {"getSiblings", _wrap_Player_getSiblings}, 
    {"getAliveSiblings", _wrap_Player_getAliveSiblings}, 
    {"hasShownSkill", _wrap_Player_hasShownSkill}, 
    {"hasShownSkills", _wrap_Player_hasShownSkills}, 
    {"preshowSkill", _wrap_Player_preshowSkill}, 
    {"inHeadSkills", _wrap_Player_inHeadSkills}, 
    {"inDeputySkills", _wrap_Player_inDeputySkills}, 
    {"getActualGeneral1", _wrap_Player_getActualGeneral1}, 
    {"getActualGeneral2", _wrap_Player_getActualGeneral2}, 
    {"getActualGeneral1Name", _wrap_Player_getActualGeneral1Name}, 
    {"getActualGeneral2Name", _wrap_Player_getActualGeneral2Name}, 
    {"setActualGeneral1", _wrap_Player_setActualGeneral1}, 
    {"setActualGeneral2", _wrap_Player_setActualGeneral2}, 
    {"setActualGeneral1Name", _wrap_Player_setActualGeneral1Name}, 
    {"setActualGeneral2Name", _wrap_Player_setActualGeneral2Name}, 
    {"hasShownGeneral1", _wrap_Player_hasShownGeneral1}, 
    {"hasShownGeneral2", _wrap_Player_hasShownGeneral2}, 
    {"setGeneral1Showed", _wrap_Player_setGeneral1Showed}, 
    {"setGeneral2Showed", _wrap_Player_setGeneral2Showed}, 
    {"hasShownOneGeneral", _wrap_Player_hasShownOneGeneral}, 
    {"hasShownAllGenerals", _wrap_Player_hasShownAllGenerals}, 
    {"setSkillPreshowed", _wrap_Player_setSkillPreshowed}, 
    {"setSkillsPreshowed", _wrap_Player_setSkillsPreshowed}, 
    {"hasPreshowedSkill", _wrap_Player_hasPreshowedSkill}, 
    {"isHidden", _wrap_Player_isHidden}, 
    {"ownSkill", _wrap_Player_ownSkill}, 
    {"isFriendWith", _wrap_Player_isFriendWith}, 
    {"willBeFriendWith", _wrap_Player_willBeFriendWith}, 
    {"setNext", _wrap_Player_setNext}, 
    {"getNext", _wrap_Player_getNext}, 
    {"getNextName", _wrap_Player_getNextName}, 
    {"getLast", _wrap_Player_getLast}, 
    {"getNextAlive", _wrap_Player_getNextAlive}, 
    {"getLastAlive", _wrap_Player_getLastAlive}, 
    {"getFormation", _wrap_Player_getFormation}, 
    {"setTag", _wrap_Player_setTag}, 
    {"getTag", _wrap_Player_getTag}, 
    {"removeTag", _wrap_Player_removeTag}, 
    {0,0}
};
static swig_lua_attribute swig_Player_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Player_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Player_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Player_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("RoundStart", Player::RoundStart)},
    {SWIG_LUA_CONSTTAB_INT("Start", Player::Start)},
    {SWIG_LUA_CONSTTAB_INT("Judge", Player::Judge)},
    {SWIG_LUA_CONSTTAB_INT("Draw", Player::Draw)},
    {SWIG_LUA_CONSTTAB_INT("Play", Player::Play)},
    {SWIG_LUA_CONSTTAB_INT("Discard", Player::Discard)},
    {SWIG_LUA_CONSTTAB_INT("Finish", Player::Finish)},
    {SWIG_LUA_CONSTTAB_INT("NotActive", Player::NotActive)},
    {SWIG_LUA_CONSTTAB_INT("PhaseNone", Player::PhaseNone)},
    {SWIG_LUA_CONSTTAB_INT("PlaceHand", Player::PlaceHand)},
    {SWIG_LUA_CONSTTAB_INT("PlaceEquip", Player::PlaceEquip)},
    {SWIG_LUA_CONSTTAB_INT("PlaceDelayedTrick", Player::PlaceDelayedTrick)},
    {SWIG_LUA_CONSTTAB_INT("PlaceJudge", Player::PlaceJudge)},
    {SWIG_LUA_CONSTTAB_INT("PlaceSpecial", Player::PlaceSpecial)},
    {SWIG_LUA_CONSTTAB_INT("DiscardPile", Player::DiscardPile)},
    {SWIG_LUA_CONSTTAB_INT("DrawPile", Player::DrawPile)},
    {SWIG_LUA_CONSTTAB_INT("PlaceTable", Player::PlaceTable)},
    {SWIG_LUA_CONSTTAB_INT("PlaceUnknown", Player::PlaceUnknown)},
    {SWIG_LUA_CONSTTAB_INT("PlaceWuGu", Player::PlaceWuGu)},
    {SWIG_LUA_CONSTTAB_INT("DrawPileBottom", Player::DrawPileBottom)},
    {SWIG_LUA_CONSTTAB_INT("Lord", Player::Lord)},
    {SWIG_LUA_CONSTTAB_INT("Loyalist", Player::Loyalist)},
    {SWIG_LUA_CONSTTAB_INT("Rebel", Player::Rebel)},
    {SWIG_LUA_CONSTTAB_INT("Renegade", Player::Renegade)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Player_bases[] = {0,0};
static const char *swig_Player_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_Player = { "Player", &SWIGTYPE_p_Player,0, swig_delete_Player, swig_Player_methods, swig_Player_attributes, { "Player", swig_Player_cls_methods, swig_Player_cls_attributes, swig_Player_cls_constants }, swig_Player_bases, swig_Player_base_names };

static int _wrap_new_ServerPlayer(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::ServerPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::ServerPlayer",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("new_ServerPlayer",1,SWIGTYPE_p_Room);
  }
  
  result = (ServerPlayer *)new ServerPlayer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_kick(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::kick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::kick",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_kick",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->kick();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_unicast(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::unicast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::unicast",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::unicast",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_unicast",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->unicast((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_drawCard(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::drawCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::drawCard",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::drawCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_drawCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_drawCard",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->drawCard((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getRoom(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Room *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getRoom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getRoom",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getRoom",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Room *)((ServerPlayer const *)arg1)->getRoom();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Room,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_broadcastSkillInvoke__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::broadcastSkillInvoke",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::broadcastSkillInvoke",1,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::broadcastSkillInvoke",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_broadcastSkillInvoke",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_broadcastSkillInvoke",2,SWIGTYPE_p_Card);
  }
  
  ((ServerPlayer const *)arg1)->broadcastSkillInvoke((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_broadcastSkillInvoke__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::broadcastSkillInvoke",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::broadcastSkillInvoke",1,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::broadcastSkillInvoke",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_broadcastSkillInvoke",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ((ServerPlayer const *)arg1)->broadcastSkillInvoke((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_broadcastSkillInvoke(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ServerPlayer_broadcastSkillInvoke__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_broadcastSkillInvoke__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_broadcastSkillInvoke'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::broadcastSkillInvoke(Card const *) const\n"
    "    ServerPlayer::broadcastSkillInvoke(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_getRandomHandCardId(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getRandomHandCardId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getRandomHandCardId",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getRandomHandCardId",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((ServerPlayer const *)arg1)->getRandomHandCardId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getRandomHandCard(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getRandomHandCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getRandomHandCard",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getRandomHandCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)((ServerPlayer const *)arg1)->getRandomHandCard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_obtainCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("ServerPlayer::obtainCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::obtainCard",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::obtainCard",2,"Card const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::obtainCard",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_obtainCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_obtainCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->obtainCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_obtainCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::obtainCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::obtainCard",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::obtainCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_obtainCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_obtainCard",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->obtainCard((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_obtainCard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ServerPlayer_obtainCard__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_obtainCard__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_obtainCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::obtainCard(Card const *,bool)\n"
    "    ServerPlayer::obtainCard(Card const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_throwAllEquips(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::throwAllEquips",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::throwAllEquips",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_throwAllEquips",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwAllEquips();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_throwAllHandCards(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::throwAllHandCards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::throwAllHandCards",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_throwAllHandCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwAllHandCards();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_throwAllHandCardsAndEquips(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::throwAllHandCardsAndEquips",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::throwAllHandCardsAndEquips",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_throwAllHandCardsAndEquips",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwAllHandCardsAndEquips();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_throwAllCards(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::throwAllCards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::throwAllCards",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_throwAllCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwAllCards();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_bury(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::bury",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::bury",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_bury",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->bury();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_throwAllMarks__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::throwAllMarks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::throwAllMarks",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::throwAllMarks",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_throwAllMarks",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->throwAllMarks(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_throwAllMarks__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::throwAllMarks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::throwAllMarks",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_throwAllMarks",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwAllMarks();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_throwAllMarks(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_throwAllMarks__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_throwAllMarks__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_throwAllMarks'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::throwAllMarks(bool)\n"
    "    ServerPlayer::throwAllMarks()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_clearOnePrivatePile(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::clearOnePrivatePile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::clearOnePrivatePile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::clearOnePrivatePile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_clearOnePrivatePile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->clearOnePrivatePile((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_clearPrivatePiles(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::clearPrivatePiles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::clearPrivatePiles",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_clearPrivatePiles",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->clearPrivatePiles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getMaxCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  MaxCardsType::MaxCardsCount arg2 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getMaxCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getMaxCards",1,"ServerPlayer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::getMaxCards",2,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getMaxCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 2);
  result = (int)((ServerPlayer const *)arg1)->getMaxCards(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getMaxCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getMaxCards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getMaxCards",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getMaxCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((ServerPlayer const *)arg1)->getMaxCards();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getMaxCards(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_getMaxCards__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_getMaxCards__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_getMaxCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::getMaxCards(MaxCardsType::MaxCardsCount) const\n"
    "    ServerPlayer::getMaxCards() const\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_drawCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::drawCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::drawCards",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::drawCards",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ServerPlayer::drawCards",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_drawCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->drawCards(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_drawCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ServerPlayer::drawCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::drawCards",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::drawCards",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_drawCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->drawCards(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_drawCards(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_drawCards__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_drawCards__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_drawCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::drawCards(int,char const *)\n"
    "    ServerPlayer::drawCards(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_askForSkillInvoke__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::askForSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::askForSkillInvoke",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::askForSkillInvoke",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ServerPlayer::askForSkillInvoke",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_askForSkillInvoke",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("ServerPlayer_askForSkillInvoke",3,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->askForSkillInvoke((char const *)arg2,(QVariant const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_askForSkillInvoke__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::askForSkillInvoke",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::askForSkillInvoke",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::askForSkillInvoke",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_askForSkillInvoke",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->askForSkillInvoke((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_askForSkillInvoke(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_askForSkillInvoke__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ServerPlayer_askForSkillInvoke__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_askForSkillInvoke'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::askForSkillInvoke(char const *,QVariant const &)\n"
    "    ServerPlayer::askForSkillInvoke(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_forceToDiscard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  QList< int > result;
  
  SWIG_check_num_args("ServerPlayer::forceToDiscard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::forceToDiscard",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::forceToDiscard",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::forceToDiscard",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::forceToDiscard",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_forceToDiscard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (arg1)->forceToDiscard(arg2,arg3,arg4);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_forceToDiscard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int arg2 ;
  bool arg3 ;
  QList< int > result;
  
  SWIG_check_num_args("ServerPlayer::forceToDiscard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::forceToDiscard",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::forceToDiscard",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::forceToDiscard",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_forceToDiscard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->forceToDiscard(arg2,arg3);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_forceToDiscard(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_forceToDiscard__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ServerPlayer_forceToDiscard__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_forceToDiscard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::forceToDiscard(int,bool,bool)\n"
    "    ServerPlayer::forceToDiscard(int,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_handCards(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("ServerPlayer::handCards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::handCards",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_handCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((ServerPlayer const *)arg1)->handCards();
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getHandcards(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("ServerPlayer::getHandcards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getHandcards",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getHandcards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((ServerPlayer const *)arg1)->getHandcards();
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getCards(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("ServerPlayer::getCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getCards",1,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::getCards",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((ServerPlayer const *)arg1)->getCards((char const *)arg2);
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_wholeHandCards(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  DummyCard *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::wholeHandCards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::wholeHandCards",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_wholeHandCards",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (DummyCard *)((ServerPlayer const *)arg1)->wholeHandCards();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DummyCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_hasNullification(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::hasNullification",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::hasNullification",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_hasNullification",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((ServerPlayer const *)arg1)->hasNullification();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_pindianSelect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *arg4 = (Card *) 0 ;
  PindianStruct *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::pindianSelect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::pindianSelect",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::pindianSelect",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ServerPlayer::pindianSelect",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ServerPlayer::pindianSelect",4,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_pindianSelect",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_pindianSelect",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_pindianSelect",4,SWIGTYPE_p_Card);
  }
  
  result = (PindianStruct *)(arg1)->pindianSelect(arg2,(char const *)arg3,(Card const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PindianStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_pindianSelect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  PindianStruct *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::pindianSelect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::pindianSelect",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::pindianSelect",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ServerPlayer::pindianSelect",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_pindianSelect",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_pindianSelect",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (PindianStruct *)(arg1)->pindianSelect(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PindianStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_pindianSelect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_pindianSelect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ServerPlayer_pindianSelect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_pindianSelect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::pindianSelect(ServerPlayer *,char const *,Card const *)\n"
    "    ServerPlayer::pindianSelect(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_pindian(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  PindianStruct *arg2 = (PindianStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::pindian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::pindian",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::pindian",2,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_pindian",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("ServerPlayer_pindian",2,SWIGTYPE_p_PindianStruct);
  }
  
  result = (bool)(arg1)->pindian(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_turnOver(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::turnOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::turnOver",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_turnOver",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->turnOver();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_play__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QList< Player::Phase > arg2 ;
  QList< Player::Phase > *argp2 ;
  
  SWIG_check_num_args("ServerPlayer::play",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::play",1,"ServerPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ServerPlayer::play",2,"QList< Player::Phase >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_play",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_Player__Phase_t,0))){
    SWIG_fail_ptr("ServerPlayer_play",2,SWIGTYPE_p_QListT_Player__Phase_t);
  }
  arg2 = *argp2;
  
  (arg1)->play(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_play__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::play",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_play",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->play();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_play(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_play__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Player__Phase_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ServerPlayer_play__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_play'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::play(QList< Player::Phase >)\n"
    "    ServerPlayer::play()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_changePhase(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Player::Phase arg2 ;
  Player::Phase arg3 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::changePhase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::changePhase",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::changePhase",2,"Player::Phase");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::changePhase",3,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_changePhase",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  arg3 = (Player::Phase)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->changePhase(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getPhases(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QList< Player::Phase > *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getPhases",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getPhases",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getPhases",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (QList< Player::Phase > *) &(arg1)->getPhases();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Player__Phase_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_skip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Player::Phase arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("ServerPlayer::skip",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::skip",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::skip",2,"Player::Phase");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::skip",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_skip",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->skip(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_skip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Player::Phase arg2 ;
  
  SWIG_check_num_args("ServerPlayer::skip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::skip",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::skip",2,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_skip",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  (arg1)->skip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_skip__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::skip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::skip",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::skip",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_skip",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->skip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_skip__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::skip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::skip",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_skip",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->skip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_skip(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_skip__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_skip__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_skip__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_skip__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_skip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::skip(Player::Phase,bool)\n"
    "    ServerPlayer::skip(Player::Phase)\n"
    "    ServerPlayer::skip(bool)\n"
    "    ServerPlayer::skip()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_insertPhase(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Player::Phase arg2 ;
  
  SWIG_check_num_args("ServerPlayer::insertPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::insertPhase",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::insertPhase",2,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_insertPhase",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  (arg1)->insertPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_isSkipped(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Player::Phase arg2 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::isSkipped",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::isSkipped",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::isSkipped",2,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_isSkipped",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isSkipped(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_gainMark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ServerPlayer::gainMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::gainMark",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::gainMark",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::gainMark",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_gainMark",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->gainMark((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_gainMark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::gainMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::gainMark",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::gainMark",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_gainMark",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->gainMark((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_gainMark(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_gainMark__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_gainMark__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_gainMark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::gainMark(char const *,int)\n"
    "    ServerPlayer::gainMark(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_loseMark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ServerPlayer::loseMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::loseMark",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::loseMark",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::loseMark",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_loseMark",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loseMark((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_loseMark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::loseMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::loseMark",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::loseMark",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_loseMark",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loseMark((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_loseMark(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_loseMark__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_loseMark__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_loseMark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::loseMark(char const *,int)\n"
    "    ServerPlayer::loseMark(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_loseAllMarks(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::loseAllMarks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::loseAllMarks",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::loseAllMarks",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_loseAllMarks",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loseAllMarks((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("ServerPlayer::addSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addSkill",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addSkill",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::addSkill",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addSkill",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->addSkill((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::addSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addSkill",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addSkill",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addSkill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_addSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_addSkill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_addSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::addSkill(char const *,bool)\n"
    "    ServerPlayer::addSkill(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_loseSkill(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::loseSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::loseSkill",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::loseSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_loseSkill",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loseSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_setGender(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  General::Gender arg2 ;
  
  SWIG_check_num_args("ServerPlayer::setGender",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::setGender",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::setGender",2,"General::Gender");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_setGender",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (General::Gender)(int)lua_tonumber(L, 2);
  (arg1)->setGender(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_setAI(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  AI *arg2 = (AI *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::setAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::setAI",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::setAI",2,"AI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_setAI",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("ServerPlayer_setAI",2,SWIGTYPE_p_AI);
  }
  
  (arg1)->setAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getAI(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  AI *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getAI",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getAI",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (AI *)((ServerPlayer const *)arg1)->getAI();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getSmartAI(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  AI *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getSmartAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getSmartAI",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getSmartAI",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (AI *)((ServerPlayer const *)arg1)->getSmartAI();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_isOnline(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::isOnline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::isOnline",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_isOnline",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((ServerPlayer const *)arg1)->isOnline();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_isOffline(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::isOffline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::isOffline",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_isOffline",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((ServerPlayer const *)arg1)->isOffline();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_aliveCount__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::aliveCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::aliveCount",1,"ServerPlayer const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::aliveCount",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_aliveCount",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((ServerPlayer const *)arg1)->aliveCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_aliveCount__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::aliveCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::aliveCount",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_aliveCount",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((ServerPlayer const *)arg1)->aliveCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_aliveCount(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_aliveCount__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_aliveCount__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_aliveCount'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::aliveCount(bool) const\n"
    "    ServerPlayer::aliveCount() const\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_getPlayerNumWithSameKingdom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  MaxCardsType::MaxCardsCount arg4 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getPlayerNumWithSameKingdom",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",1,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",4,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getPlayerNumWithSameKingdom",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 4);
  result = (int)((ServerPlayer const *)arg1)->getPlayerNumWithSameKingdom((char const *)arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getPlayerNumWithSameKingdom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getPlayerNumWithSameKingdom",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",1,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getPlayerNumWithSameKingdom",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)((ServerPlayer const *)arg1)->getPlayerNumWithSameKingdom((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getPlayerNumWithSameKingdom__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getPlayerNumWithSameKingdom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",1,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::getPlayerNumWithSameKingdom",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getPlayerNumWithSameKingdom",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)((ServerPlayer const *)arg1)->getPlayerNumWithSameKingdom((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getPlayerNumWithSameKingdom(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_getPlayerNumWithSameKingdom__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_getPlayerNumWithSameKingdom__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ServerPlayer_getPlayerNumWithSameKingdom__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_getPlayerNumWithSameKingdom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::getPlayerNumWithSameKingdom(char const *,char const *,MaxCardsType::MaxCardsCount) const\n"
    "    ServerPlayer::getPlayerNumWithSameKingdom(char const *,char const *) const\n"
    "    ServerPlayer::getPlayerNumWithSameKingdom(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_getHandcardNum(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getHandcardNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getHandcardNum",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getHandcardNum",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((ServerPlayer const *)arg1)->getHandcardNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_removeCard(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Player::Place arg3 ;
  
  SWIG_check_num_args("ServerPlayer::removeCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::removeCard",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::removeCard",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::removeCard",3,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_removeCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_removeCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  (arg1)->removeCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addCard(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Player::Place arg3 ;
  
  SWIG_check_num_args("ServerPlayer::addCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addCard",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::addCard",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::addCard",3,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_addCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  (arg1)->addCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_isLastHandCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::isLastHandCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::isLastHandCard",1,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::isLastHandCard",2,"Card const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::isLastHandCard",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_isLastHandCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_isLastHandCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((ServerPlayer const *)arg1)->isLastHandCard((Card const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_isLastHandCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::isLastHandCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::isLastHandCard",1,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::isLastHandCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_isLastHandCard",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_isLastHandCard",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((ServerPlayer const *)arg1)->isLastHandCard((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_isLastHandCard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ServerPlayer_isLastHandCard__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_isLastHandCard__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_isLastHandCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::isLastHandCard(Card const *,bool) const\n"
    "    ServerPlayer::isLastHandCard(Card const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_addVictim(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::addVictim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addVictim",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::addVictim",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addVictim",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addVictim",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->addVictim(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getVictims(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("ServerPlayer::getVictims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getVictims",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getVictims",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((ServerPlayer const *)arg1)->getVictims();
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_setNext(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::setNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::setNext",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::setNext",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_setNext",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_setNext",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->setNext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getNext(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getNext",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getNext",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (ServerPlayer *)((ServerPlayer const *)arg1)->getNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getNextAlive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int arg2 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getNextAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getNextAlive",1,"ServerPlayer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::getNextAlive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getNextAlive",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ServerPlayer *)((ServerPlayer const *)arg1)->getNextAlive(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getNextAlive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("ServerPlayer::getNextAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getNextAlive",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getNextAlive",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (ServerPlayer *)((ServerPlayer const *)arg1)->getNextAlive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getNextAlive(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_getNextAlive__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_getNextAlive__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_getNextAlive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::getNextAlive(int) const\n"
    "    ServerPlayer::getNextAlive() const\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_startRecord(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::startRecord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::startRecord",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_startRecord",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->startRecord();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_saveRecord(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::saveRecord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::saveRecord",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::saveRecord",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_saveRecord",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->saveRecord((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToSelected(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::addToSelected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToSelected",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToSelected",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToSelected",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addToSelected((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getSelected(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("ServerPlayer::getSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getSelected",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getSelected",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((ServerPlayer const *)arg1)->getSelected();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_clearSelected(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::clearSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::clearSelected",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_clearSelected",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->clearSelected();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getGeneralMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ServerPlayer::getGeneralMaxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getGeneralMaxHp",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getGeneralMaxHp",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((ServerPlayer const *)arg1)->getGeneralMaxHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getGameMode(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QString result;
  
  SWIG_check_num_args("ServerPlayer::getGameMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getGameMode",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getGameMode",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((ServerPlayer const *)arg1)->getGameMode();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_getIp(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  QString result;
  
  SWIG_check_num_args("ServerPlayer::getIp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::getIp",1,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_getIp",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((ServerPlayer const *)arg1)->getIp();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_introduceTo(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::introduceTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::introduceTo",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::introduceTo",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_introduceTo",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_introduceTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->introduceTo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_marshal(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::marshal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::marshal",1,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::marshal",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_marshal",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_marshal",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((ServerPlayer const *)arg1)->marshal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool arg4 ;
  QList< ServerPlayer * > arg5 ;
  QList< ServerPlayer * > *argp5 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"Card const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ServerPlayer::addToPile",5,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_Card);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",5,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg5 = *argp5;
  
  (arg1)->addToPile((char const *)arg2,(Card const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"Card const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_Card);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->addToPile((char const *)arg2,(Card const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  Card *arg3 = (Card *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_Card);
  }
  
  (arg1)->addToPile((char const *)arg2,(Card const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  QList< ServerPlayer * > arg5 ;
  QList< ServerPlayer * > *argp5 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ServerPlayer::addToPile",5,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",5,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg5 = *argp5;
  
  (arg1)->addToPile((char const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->addToPile((char const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addToPile((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< int > arg3 ;
  bool arg4 ;
  QList< ServerPlayer * > arg5 ;
  QList< int > *argp3 ;
  QList< ServerPlayer * > *argp5 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"QList< int >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ServerPlayer::addToPile",5,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_QListT_int_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",5,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg5 = *argp5;
  
  (arg1)->addToPile((char const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< int > arg3 ;
  bool arg4 ;
  QList< int > *argp3 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"QList< int >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_QListT_int_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->addToPile((char const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< int > arg3 ;
  QList< int > *argp3 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"QList< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_QListT_int_t);
  }
  arg3 = *argp3;
  
  (arg1)->addToPile((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< int > arg3 ;
  bool arg4 ;
  QList< ServerPlayer * > arg5 ;
  CardMoveReason arg6 ;
  QList< int > *argp3 ;
  QList< ServerPlayer * > *argp5 ;
  CardMoveReason *argp6 ;
  
  SWIG_check_num_args("ServerPlayer::addToPile",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::addToPile",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::addToPile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ServerPlayer::addToPile",3,"QList< int >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::addToPile",4,"bool");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ServerPlayer::addToPile",5,"QList< ServerPlayer * >");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ServerPlayer::addToPile",6,"CardMoveReason");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",3,SWIGTYPE_p_QListT_int_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",5,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("ServerPlayer_addToPile",6,SWIGTYPE_p_CardMoveReason);
  }
  arg6 = *argp6;
  
  (arg1)->addToPile((char const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_addToPile(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ServerPlayer_addToPile__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ServerPlayer_addToPile__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_addToPile__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ServerPlayer_addToPile__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ServerPlayer_addToPile__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ServerPlayer_addToPile__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ServerPlayer_addToPile__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ServerPlayer_addToPile__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ServerPlayer_addToPile__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ServerPlayer_addToPile__SWIG_9(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_addToPile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::addToPile(char const *,Card const *,bool,QList< ServerPlayer * >)\n"
    "    ServerPlayer::addToPile(char const *,Card const *,bool)\n"
    "    ServerPlayer::addToPile(char const *,Card const *)\n"
    "    ServerPlayer::addToPile(char const *,int,bool,QList< ServerPlayer * >)\n"
    "    ServerPlayer::addToPile(char const *,int,bool)\n"
    "    ServerPlayer::addToPile(char const *,int)\n"
    "    ServerPlayer::addToPile(char const *,QList< int >,bool,QList< ServerPlayer * >)\n"
    "    ServerPlayer::addToPile(char const *,QList< int >,bool)\n"
    "    ServerPlayer::addToPile(char const *,QList< int >)\n"
    "    ServerPlayer::addToPile(char const *,QList< int >,bool,QList< ServerPlayer * >,CardMoveReason)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_gainAnExtraTurn(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::gainAnExtraTurn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::gainAnExtraTurn",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_gainAnExtraTurn",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->gainAnExtraTurn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_copyFrom(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::copyFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::copyFrom",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::copyFrom",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_copyFrom",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_copyFrom",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->copyFrom(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_CompareByActionOrder(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::CompareByActionOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::CompareByActionOrder",1,"ServerPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::CompareByActionOrder",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_CompareByActionOrder",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_CompareByActionOrder",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)ServerPlayer::CompareByActionOrder(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_showGeneral__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("ServerPlayer::showGeneral",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::showGeneral",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::showGeneral",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::showGeneral",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ServerPlayer::showGeneral",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_showGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->showGeneral(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_showGeneral__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("ServerPlayer::showGeneral",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::showGeneral",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::showGeneral",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::showGeneral",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_showGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->showGeneral(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_showGeneral__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::showGeneral",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::showGeneral",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::showGeneral",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_showGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->showGeneral(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_showGeneral__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::showGeneral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::showGeneral",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_showGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->showGeneral();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_showGeneral(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_showGeneral__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_showGeneral__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_showGeneral__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ServerPlayer_showGeneral__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_showGeneral'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::showGeneral(bool,bool,bool)\n"
    "    ServerPlayer::showGeneral(bool,bool)\n"
    "    ServerPlayer::showGeneral(bool)\n"
    "    ServerPlayer::showGeneral()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_hideGeneral__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::hideGeneral",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::hideGeneral",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::hideGeneral",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_hideGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->hideGeneral(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_hideGeneral__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::hideGeneral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::hideGeneral",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_hideGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->hideGeneral();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_hideGeneral(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_hideGeneral__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_hideGeneral__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_hideGeneral'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::hideGeneral(bool)\n"
    "    ServerPlayer::hideGeneral()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_removeGeneral__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::removeGeneral",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::removeGeneral",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::removeGeneral",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_removeGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->removeGeneral(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_removeGeneral__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::removeGeneral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::removeGeneral",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_removeGeneral",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->removeGeneral();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_removeGeneral(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_removeGeneral__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_removeGeneral__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_removeGeneral'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::removeGeneral(bool)\n"
    "    ServerPlayer::removeGeneral()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_sendSkillsToOthers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::sendSkillsToOthers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::sendSkillsToOthers",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::sendSkillsToOthers",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_sendSkillsToOthers",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->sendSkillsToOthers(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_sendSkillsToOthers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::sendSkillsToOthers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::sendSkillsToOthers",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_sendSkillsToOthers",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->sendSkillsToOthers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_sendSkillsToOthers(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_sendSkillsToOthers__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_sendSkillsToOthers__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_sendSkillsToOthers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::sendSkillsToOthers(bool)\n"
    "    ServerPlayer::sendSkillsToOthers()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_disconnectSkillsFromOthers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ServerPlayer::disconnectSkillsFromOthers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::disconnectSkillsFromOthers",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::disconnectSkillsFromOthers",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_disconnectSkillsFromOthers",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->disconnectSkillsFromOthers(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_disconnectSkillsFromOthers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::disconnectSkillsFromOthers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::disconnectSkillsFromOthers",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_disconnectSkillsFromOthers",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->disconnectSkillsFromOthers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_disconnectSkillsFromOthers(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_disconnectSkillsFromOthers__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_disconnectSkillsFromOthers__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_disconnectSkillsFromOthers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::disconnectSkillsFromOthers(bool)\n"
    "    ServerPlayer::disconnectSkillsFromOthers()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_askForGeneralShow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::askForGeneralShow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::askForGeneralShow",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::askForGeneralShow",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ServerPlayer::askForGeneralShow",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_askForGeneralShow",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->askForGeneralShow(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_askForGeneralShow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::askForGeneralShow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::askForGeneralShow",1,"ServerPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ServerPlayer::askForGeneralShow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_askForGeneralShow",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->askForGeneralShow(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_askForGeneralShow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::askForGeneralShow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::askForGeneralShow",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_askForGeneralShow",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)(arg1)->askForGeneralShow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_askForGeneralShow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ServerPlayer_askForGeneralShow__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ServerPlayer_askForGeneralShow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ServerPlayer_askForGeneralShow__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ServerPlayer_askForGeneralShow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerPlayer::askForGeneralShow(bool,bool)\n"
    "    ServerPlayer::askForGeneralShow(bool)\n"
    "    ServerPlayer::askForGeneralShow()\n");
  lua_error(L);return 0;
}


static int _wrap_ServerPlayer_notifyPreshow(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::notifyPreshow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::notifyPreshow",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_notifyPreshow",1,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->notifyPreshow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_inSiegeRelation(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::inSiegeRelation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::inSiegeRelation",1,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::inSiegeRelation",2,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ServerPlayer::inSiegeRelation",3,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_inSiegeRelation",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_inSiegeRelation",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_inSiegeRelation",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((ServerPlayer const *)arg1)->inSiegeRelation((ServerPlayer const *)arg2,(ServerPlayer const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_inFormationRalation(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ServerPlayer::inFormationRalation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::inFormationRalation",1,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ServerPlayer::inFormationRalation",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_inFormationRalation",1,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_inFormationRalation",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((ServerPlayer const *)arg1)->inFormationRalation(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_summonFriends(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  HegemonyMode::ArrayType arg2 ;
  
  SWIG_check_num_args("ServerPlayer::summonFriends",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::summonFriends",1,"ServerPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerPlayer::summonFriends",2,"HegemonyMode::ArrayType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_summonFriends",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (HegemonyMode::ArrayType const)(int)lua_tonumber(L, 2);
  (arg1)->summonFriends(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerPlayer_speak(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ServerPlayer::speak",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerPlayer::speak",1,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ServerPlayer::speak",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("ServerPlayer_speak",1,SWIGTYPE_p_ServerPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ServerPlayer_speak(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ServerPlayer(void *obj) {
ServerPlayer *arg1 = (ServerPlayer *) obj;
delete arg1;
}
static swig_lua_method swig_ServerPlayer_methods[] = {
    {"kick", _wrap_ServerPlayer_kick}, 
    {"unicast", _wrap_ServerPlayer_unicast}, 
    {"drawCard", _wrap_ServerPlayer_drawCard}, 
    {"getRoom", _wrap_ServerPlayer_getRoom}, 
    {"broadcastSkillInvoke", _wrap_ServerPlayer_broadcastSkillInvoke}, 
    {"getRandomHandCardId", _wrap_ServerPlayer_getRandomHandCardId}, 
    {"getRandomHandCard", _wrap_ServerPlayer_getRandomHandCard}, 
    {"obtainCard", _wrap_ServerPlayer_obtainCard}, 
    {"throwAllEquips", _wrap_ServerPlayer_throwAllEquips}, 
    {"throwAllHandCards", _wrap_ServerPlayer_throwAllHandCards}, 
    {"throwAllHandCardsAndEquips", _wrap_ServerPlayer_throwAllHandCardsAndEquips}, 
    {"throwAllCards", _wrap_ServerPlayer_throwAllCards}, 
    {"bury", _wrap_ServerPlayer_bury}, 
    {"throwAllMarks", _wrap_ServerPlayer_throwAllMarks}, 
    {"clearOnePrivatePile", _wrap_ServerPlayer_clearOnePrivatePile}, 
    {"clearPrivatePiles", _wrap_ServerPlayer_clearPrivatePiles}, 
    {"getMaxCards", _wrap_ServerPlayer_getMaxCards}, 
    {"drawCards", _wrap_ServerPlayer_drawCards}, 
    {"askForSkillInvoke", _wrap_ServerPlayer_askForSkillInvoke}, 
    {"forceToDiscard", _wrap_ServerPlayer_forceToDiscard}, 
    {"handCards", _wrap_ServerPlayer_handCards}, 
    {"getHandcards", _wrap_ServerPlayer_getHandcards}, 
    {"getCards", _wrap_ServerPlayer_getCards}, 
    {"wholeHandCards", _wrap_ServerPlayer_wholeHandCards}, 
    {"hasNullification", _wrap_ServerPlayer_hasNullification}, 
    {"pindianSelect", _wrap_ServerPlayer_pindianSelect}, 
    {"pindian", _wrap_ServerPlayer_pindian}, 
    {"turnOver", _wrap_ServerPlayer_turnOver}, 
    {"play", _wrap_ServerPlayer_play}, 
    {"changePhase", _wrap_ServerPlayer_changePhase}, 
    {"getPhases", _wrap_ServerPlayer_getPhases}, 
    {"skip", _wrap_ServerPlayer_skip}, 
    {"insertPhase", _wrap_ServerPlayer_insertPhase}, 
    {"isSkipped", _wrap_ServerPlayer_isSkipped}, 
    {"gainMark", _wrap_ServerPlayer_gainMark}, 
    {"loseMark", _wrap_ServerPlayer_loseMark}, 
    {"loseAllMarks", _wrap_ServerPlayer_loseAllMarks}, 
    {"addSkill", _wrap_ServerPlayer_addSkill}, 
    {"loseSkill", _wrap_ServerPlayer_loseSkill}, 
    {"setGender", _wrap_ServerPlayer_setGender}, 
    {"setAI", _wrap_ServerPlayer_setAI}, 
    {"getAI", _wrap_ServerPlayer_getAI}, 
    {"getSmartAI", _wrap_ServerPlayer_getSmartAI}, 
    {"isOnline", _wrap_ServerPlayer_isOnline}, 
    {"isOffline", _wrap_ServerPlayer_isOffline}, 
    {"aliveCount", _wrap_ServerPlayer_aliveCount}, 
    {"getPlayerNumWithSameKingdom", _wrap_ServerPlayer_getPlayerNumWithSameKingdom}, 
    {"getHandcardNum", _wrap_ServerPlayer_getHandcardNum}, 
    {"removeCard", _wrap_ServerPlayer_removeCard}, 
    {"addCard", _wrap_ServerPlayer_addCard}, 
    {"isLastHandCard", _wrap_ServerPlayer_isLastHandCard}, 
    {"addVictim", _wrap_ServerPlayer_addVictim}, 
    {"getVictims", _wrap_ServerPlayer_getVictims}, 
    {"setNext", _wrap_ServerPlayer_setNext}, 
    {"getNext", _wrap_ServerPlayer_getNext}, 
    {"getNextAlive", _wrap_ServerPlayer_getNextAlive}, 
    {"startRecord", _wrap_ServerPlayer_startRecord}, 
    {"saveRecord", _wrap_ServerPlayer_saveRecord}, 
    {"addToSelected", _wrap_ServerPlayer_addToSelected}, 
    {"getSelected", _wrap_ServerPlayer_getSelected}, 
    {"clearSelected", _wrap_ServerPlayer_clearSelected}, 
    {"getGeneralMaxHp", _wrap_ServerPlayer_getGeneralMaxHp}, 
    {"getGameMode", _wrap_ServerPlayer_getGameMode}, 
    {"getIp", _wrap_ServerPlayer_getIp}, 
    {"introduceTo", _wrap_ServerPlayer_introduceTo}, 
    {"marshal", _wrap_ServerPlayer_marshal}, 
    {"addToPile", _wrap_ServerPlayer_addToPile}, 
    {"gainAnExtraTurn", _wrap_ServerPlayer_gainAnExtraTurn}, 
    {"copyFrom", _wrap_ServerPlayer_copyFrom}, 
    {"showGeneral", _wrap_ServerPlayer_showGeneral}, 
    {"hideGeneral", _wrap_ServerPlayer_hideGeneral}, 
    {"removeGeneral", _wrap_ServerPlayer_removeGeneral}, 
    {"sendSkillsToOthers", _wrap_ServerPlayer_sendSkillsToOthers}, 
    {"disconnectSkillsFromOthers", _wrap_ServerPlayer_disconnectSkillsFromOthers}, 
    {"askForGeneralShow", _wrap_ServerPlayer_askForGeneralShow}, 
    {"notifyPreshow", _wrap_ServerPlayer_notifyPreshow}, 
    {"inSiegeRelation", _wrap_ServerPlayer_inSiegeRelation}, 
    {"inFormationRalation", _wrap_ServerPlayer_inFormationRalation}, 
    {"summonFriends", _wrap_ServerPlayer_summonFriends}, 
    {"speak", _wrap_ServerPlayer_speak}, 
    {0,0}
};
static swig_lua_attribute swig_ServerPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ServerPlayer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ServerPlayer_cls_methods[] = {
    {"CompareByActionOrder", _wrap_ServerPlayer_CompareByActionOrder}, 
    {0,0}
};
static swig_lua_const_info swig_ServerPlayer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ServerPlayer_bases[] = {0,0};
static const char *swig_ServerPlayer_base_names[] = {"Player *",0};
static swig_lua_class _wrap_class_ServerPlayer = { "ServerPlayer", &SWIGTYPE_p_ServerPlayer,_wrap_new_ServerPlayer, swig_delete_ServerPlayer, swig_ServerPlayer_methods, swig_ServerPlayer_attributes, { "ServerPlayer", swig_ServerPlayer_cls_methods, swig_ServerPlayer_cls_attributes, swig_ServerPlayer_cls_constants }, swig_ServerPlayer_bases, swig_ServerPlayer_base_names };

static int _wrap_new_ClientPlayer(lua_State* L) {
  int SWIG_arg = 0;
  Client *arg1 = (Client *) 0 ;
  ClientPlayer *result = 0 ;
  
  SWIG_check_num_args("ClientPlayer::ClientPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::ClientPlayer",1,"Client *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Client,0))){
    SWIG_fail_ptr("new_ClientPlayer",1,SWIGTYPE_p_Client);
  }
  
  result = (ClientPlayer *)new ClientPlayer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientPlayer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_getHandcards(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("ClientPlayer::getHandcards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::getHandcards",1,"ClientPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_getHandcards",1,SWIGTYPE_p_ClientPlayer);
  }
  
  result = ((ClientPlayer const *)arg1)->getHandcards();
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_setCards(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  QList< int > *arg2 = 0 ;
  
  SWIG_check_num_args("ClientPlayer::setCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::setCards",1,"ClientPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ClientPlayer::setCards",2,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_setCards",1,SWIGTYPE_p_ClientPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("ClientPlayer_setCards",2,SWIGTYPE_p_QListT_int_t);
  }
  
  (arg1)->setCards((QList< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_setHandcardNum(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClientPlayer::setHandcardNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::setHandcardNum",1,"ClientPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientPlayer::setHandcardNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_setHandcardNum",1,SWIGTYPE_p_ClientPlayer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHandcardNum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_getGameMode(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  QString result;
  
  SWIG_check_num_args("ClientPlayer::getGameMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::getGameMode",1,"ClientPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_getGameMode",1,SWIGTYPE_p_ClientPlayer);
  }
  
  result = ((ClientPlayer const *)arg1)->getGameMode();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ClientPlayer::setFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::setFlags",1,"ClientPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ClientPlayer::setFlags",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_setFlags",1,SWIGTYPE_p_ClientPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setFlags((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_aliveCount__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("ClientPlayer::aliveCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::aliveCount",1,"ClientPlayer const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ClientPlayer::aliveCount",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_aliveCount",1,SWIGTYPE_p_ClientPlayer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((ClientPlayer const *)arg1)->aliveCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_aliveCount__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ClientPlayer::aliveCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::aliveCount",1,"ClientPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_aliveCount",1,SWIGTYPE_p_ClientPlayer);
  }
  
  result = (int)((ClientPlayer const *)arg1)->aliveCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_aliveCount(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ClientPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ClientPlayer_aliveCount__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ClientPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ClientPlayer_aliveCount__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ClientPlayer_aliveCount'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ClientPlayer::aliveCount(bool) const\n"
    "    ClientPlayer::aliveCount() const\n");
  lua_error(L);return 0;
}


static int _wrap_ClientPlayer_getHandcardNum(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("ClientPlayer::getHandcardNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::getHandcardNum",1,"ClientPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_getHandcardNum",1,SWIGTYPE_p_ClientPlayer);
  }
  
  result = (int)((ClientPlayer const *)arg1)->getHandcardNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_removeCard(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Player::Place arg3 ;
  
  SWIG_check_num_args("ClientPlayer::removeCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::removeCard",1,"ClientPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ClientPlayer::removeCard",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientPlayer::removeCard",3,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_removeCard",1,SWIGTYPE_p_ClientPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ClientPlayer_removeCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  (arg1)->removeCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_addCard(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Player::Place arg3 ;
  
  SWIG_check_num_args("ClientPlayer::addCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::addCard",1,"ClientPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ClientPlayer::addCard",2,"Card const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientPlayer::addCard",3,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_addCard",1,SWIGTYPE_p_ClientPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ClientPlayer_addCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  (arg1)->addCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_addKnownHandCard(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("ClientPlayer::addKnownHandCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::addKnownHandCard",1,"ClientPlayer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ClientPlayer::addKnownHandCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_addKnownHandCard",1,SWIGTYPE_p_ClientPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ClientPlayer_addKnownHandCard",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->addKnownHandCard((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_isLastHandCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ClientPlayer::isLastHandCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::isLastHandCard",1,"ClientPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ClientPlayer::isLastHandCard",2,"Card const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ClientPlayer::isLastHandCard",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_isLastHandCard",1,SWIGTYPE_p_ClientPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ClientPlayer_isLastHandCard",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((ClientPlayer const *)arg1)->isLastHandCard((Card const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_isLastHandCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("ClientPlayer::isLastHandCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::isLastHandCard",1,"ClientPlayer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ClientPlayer::isLastHandCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_isLastHandCard",1,SWIGTYPE_p_ClientPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ClientPlayer_isLastHandCard",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((ClientPlayer const *)arg1)->isLastHandCard((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClientPlayer_isLastHandCard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ClientPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ClientPlayer_isLastHandCard__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ClientPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ClientPlayer_isLastHandCard__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ClientPlayer_isLastHandCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ClientPlayer::isLastHandCard(Card const *,bool) const\n"
    "    ClientPlayer::isLastHandCard(Card const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ClientPlayer_setMark(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ClientPlayer::setMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientPlayer::setMark",1,"ClientPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ClientPlayer::setMark",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientPlayer::setMark",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("ClientPlayer_setMark",1,SWIGTYPE_p_ClientPlayer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setMark((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClientPlayer(void *obj) {
ClientPlayer *arg1 = (ClientPlayer *) obj;
delete arg1;
}
static swig_lua_method swig_ClientPlayer_methods[] = {
    {"getHandcards", _wrap_ClientPlayer_getHandcards}, 
    {"setCards", _wrap_ClientPlayer_setCards}, 
    {"setHandcardNum", _wrap_ClientPlayer_setHandcardNum}, 
    {"getGameMode", _wrap_ClientPlayer_getGameMode}, 
    {"setFlags", _wrap_ClientPlayer_setFlags}, 
    {"aliveCount", _wrap_ClientPlayer_aliveCount}, 
    {"getHandcardNum", _wrap_ClientPlayer_getHandcardNum}, 
    {"removeCard", _wrap_ClientPlayer_removeCard}, 
    {"addCard", _wrap_ClientPlayer_addCard}, 
    {"addKnownHandCard", _wrap_ClientPlayer_addKnownHandCard}, 
    {"isLastHandCard", _wrap_ClientPlayer_isLastHandCard}, 
    {"setMark", _wrap_ClientPlayer_setMark}, 
    {0,0}
};
static swig_lua_attribute swig_ClientPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ClientPlayer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClientPlayer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ClientPlayer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ClientPlayer_bases[] = {0,0};
static const char *swig_ClientPlayer_base_names[] = {"Player *",0};
static swig_lua_class _wrap_class_ClientPlayer = { "ClientPlayer", &SWIGTYPE_p_ClientPlayer,_wrap_new_ClientPlayer, swig_delete_ClientPlayer, swig_ClientPlayer_methods, swig_ClientPlayer_attributes, { "ClientPlayer", swig_ClientPlayer_cls_methods, swig_ClientPlayer_cls_attributes, swig_ClientPlayer_cls_constants }, swig_ClientPlayer_bases, swig_ClientPlayer_base_names };

static int _wrap_Self_set(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *arg1 = (ClientPlayer *) 0 ;
  
  SWIG_check_num_args("Self",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Self",1,"ClientPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientPlayer,0))){
    SWIG_fail_ptr("Self_set",1,SWIGTYPE_p_ClientPlayer);
  }
  
  Self = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Self_get(lua_State* L) {
  int SWIG_arg = 0;
  ClientPlayer *result = 0 ;
  
  SWIG_check_num_args("Self",0,0)
  result = (ClientPlayer *)Self;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CardMoveReason::m_reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_reason",1,"CardMoveReason *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardMoveReason::m_reason",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_reason_set",1,SWIGTYPE_p_CardMoveReason);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  int result;
  
  SWIG_check_num_args("CardMoveReason::m_reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_reason",1,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_reason_get",1,SWIGTYPE_p_CardMoveReason);
  }
  
  result = (int) ((arg1)->m_reason);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_playerId_set(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardMoveReason::m_playerId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_playerId",1,"CardMoveReason *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardMoveReason::m_playerId",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_playerId_set",1,SWIGTYPE_p_CardMoveReason);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->m_playerId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_playerId_get(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardMoveReason::m_playerId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_playerId",1,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_playerId_get",1,SWIGTYPE_p_CardMoveReason);
  }
  
  result =  ((arg1)->m_playerId);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_targetId_set(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardMoveReason::m_targetId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_targetId",1,"CardMoveReason *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardMoveReason::m_targetId",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_targetId_set",1,SWIGTYPE_p_CardMoveReason);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->m_targetId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_targetId_get(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardMoveReason::m_targetId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_targetId",1,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_targetId_get",1,SWIGTYPE_p_CardMoveReason);
  }
  
  result =  ((arg1)->m_targetId);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_skillName_set(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardMoveReason::m_skillName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_skillName",1,"CardMoveReason *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardMoveReason::m_skillName",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_skillName_set",1,SWIGTYPE_p_CardMoveReason);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->m_skillName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_skillName_get(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardMoveReason::m_skillName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_skillName",1,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_skillName_get",1,SWIGTYPE_p_CardMoveReason);
  }
  
  result =  ((arg1)->m_skillName);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_eventName_set(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardMoveReason::m_eventName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_eventName",1,"CardMoveReason *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardMoveReason::m_eventName",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_eventName_set",1,SWIGTYPE_p_CardMoveReason);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->m_eventName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardMoveReason_m_eventName_get(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *arg1 = (CardMoveReason *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardMoveReason::m_eventName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardMoveReason::m_eventName",1,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardMoveReason_m_eventName_get",1,SWIGTYPE_p_CardMoveReason);
  }
  
  result =  ((arg1)->m_eventName);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardMoveReason__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CardMoveReason *result = 0 ;
  
  SWIG_check_num_args("CardMoveReason::CardMoveReason",0,0)
  result = (CardMoveReason *)new CardMoveReason();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardMoveReason,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardMoveReason__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  CardMoveReason *result = 0 ;
  
  SWIG_check_num_args("CardMoveReason::CardMoveReason",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CardMoveReason::CardMoveReason",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CardMoveReason::CardMoveReason",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (CardMoveReason *)new CardMoveReason(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardMoveReason,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardMoveReason__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  CardMoveReason *result = 0 ;
  
  SWIG_check_num_args("CardMoveReason::CardMoveReason",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CardMoveReason::CardMoveReason",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CardMoveReason::CardMoveReason",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CardMoveReason::CardMoveReason",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("CardMoveReason::CardMoveReason",4,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (CardMoveReason *)new CardMoveReason(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardMoveReason,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardMoveReason__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  CardMoveReason *result = 0 ;
  
  SWIG_check_num_args("CardMoveReason::CardMoveReason",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CardMoveReason::CardMoveReason",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CardMoveReason::CardMoveReason",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CardMoveReason::CardMoveReason",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("CardMoveReason::CardMoveReason",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("CardMoveReason::CardMoveReason",5,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (CardMoveReason *)new CardMoveReason(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardMoveReason,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardMoveReason(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CardMoveReason__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CardMoveReason__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CardMoveReason__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_CardMoveReason__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CardMoveReason'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CardMoveReason::CardMoveReason()\n"
    "    CardMoveReason::CardMoveReason(int,char const *)\n"
    "    CardMoveReason::CardMoveReason(int,char const *,char const *,char const *)\n"
    "    CardMoveReason::CardMoveReason(int,char const *,char const *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_CardMoveReason(void *obj) {
CardMoveReason *arg1 = (CardMoveReason *) obj;
delete arg1;
}
static swig_lua_method swig_CardMoveReason_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CardMoveReason_attributes[] = {
    { "m_reason", _wrap_CardMoveReason_m_reason_get, _wrap_CardMoveReason_m_reason_set},
    { "m_playerId", _wrap_CardMoveReason_m_playerId_get, _wrap_CardMoveReason_m_playerId_set},
    { "m_targetId", _wrap_CardMoveReason_m_targetId_get, _wrap_CardMoveReason_m_targetId_set},
    { "m_skillName", _wrap_CardMoveReason_m_skillName_get, _wrap_CardMoveReason_m_skillName_set},
    { "m_eventName", _wrap_CardMoveReason_m_eventName_get, _wrap_CardMoveReason_m_eventName_set},
    {0,0,0}
};
static swig_lua_attribute swig_CardMoveReason_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CardMoveReason_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CardMoveReason_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("S_REASON_UNKNOWN", CardMoveReason::S_REASON_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_USE", CardMoveReason::S_REASON_USE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_RESPONSE", CardMoveReason::S_REASON_RESPONSE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_DISCARD", CardMoveReason::S_REASON_DISCARD)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_RECAST", CardMoveReason::S_REASON_RECAST)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_PINDIAN", CardMoveReason::S_REASON_PINDIAN)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_DRAW", CardMoveReason::S_REASON_DRAW)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_GOTCARD", CardMoveReason::S_REASON_GOTCARD)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_SHOW", CardMoveReason::S_REASON_SHOW)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_TRANSFER", CardMoveReason::S_REASON_TRANSFER)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_PUT", CardMoveReason::S_REASON_PUT)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_LETUSE", CardMoveReason::S_REASON_LETUSE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_RETRIAL", CardMoveReason::S_REASON_RETRIAL)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_RULEDISCARD", CardMoveReason::S_REASON_RULEDISCARD)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_THROW", CardMoveReason::S_REASON_THROW)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_DISMANTLE", CardMoveReason::S_REASON_DISMANTLE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_GIVE", CardMoveReason::S_REASON_GIVE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_EXTRACTION", CardMoveReason::S_REASON_EXTRACTION)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_GOTBACK", CardMoveReason::S_REASON_GOTBACK)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_RECYCLE", CardMoveReason::S_REASON_RECYCLE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_ROB", CardMoveReason::S_REASON_ROB)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_PREVIEWGIVE", CardMoveReason::S_REASON_PREVIEWGIVE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_TURNOVER", CardMoveReason::S_REASON_TURNOVER)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_JUDGE", CardMoveReason::S_REASON_JUDGE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_PREVIEW", CardMoveReason::S_REASON_PREVIEW)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_DEMONSTRATE", CardMoveReason::S_REASON_DEMONSTRATE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_SWAP", CardMoveReason::S_REASON_SWAP)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_OVERRIDE", CardMoveReason::S_REASON_OVERRIDE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_EXCHANGE_FROM_PILE", CardMoveReason::S_REASON_EXCHANGE_FROM_PILE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_NATURAL_ENTER", CardMoveReason::S_REASON_NATURAL_ENTER)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_REMOVE_FROM_PILE", CardMoveReason::S_REASON_REMOVE_FROM_PILE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_JUDGEDONE", CardMoveReason::S_REASON_JUDGEDONE)},
    {SWIG_LUA_CONSTTAB_INT("S_REASON_CHANGE_EQUIP", CardMoveReason::S_REASON_CHANGE_EQUIP)},
    {SWIG_LUA_CONSTTAB_INT("S_MASK_BASIC_REASON", CardMoveReason::S_MASK_BASIC_REASON)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CardMoveReason_bases[] = {0};
static const char *swig_CardMoveReason_base_names[] = {0};
static swig_lua_class _wrap_class_CardMoveReason = { "CardMoveReason", &SWIGTYPE_p_CardMoveReason,_wrap_new_CardMoveReason, swig_delete_CardMoveReason, swig_CardMoveReason_methods, swig_CardMoveReason_attributes, { "CardMoveReason", swig_CardMoveReason_cls_methods, swig_CardMoveReason_cls_attributes, swig_CardMoveReason_cls_constants }, swig_CardMoveReason_bases, swig_CardMoveReason_base_names };

static int _wrap_new_DamageStruct__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",0,0)
  result = (DamageStruct *)new DamageStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  int arg4 ;
  DamageStruct::Nature arg5 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::DamageStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::DamageStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DamageStruct::DamageStruct",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DamageStruct::DamageStruct",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DamageStruct::DamageStruct",5,"DamageStruct::Nature");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_DamageStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (DamageStruct::Nature)(int)lua_tonumber(L, 5);
  result = (DamageStruct *)new DamageStruct((Card const *)arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  int arg4 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::DamageStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::DamageStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DamageStruct::DamageStruct",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DamageStruct::DamageStruct",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_DamageStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (DamageStruct *)new DamageStruct((Card const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::DamageStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::DamageStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DamageStruct::DamageStruct",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_DamageStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (DamageStruct *)new DamageStruct((Card const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  int arg4 ;
  DamageStruct::Nature arg5 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DamageStruct::DamageStruct",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::DamageStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DamageStruct::DamageStruct",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DamageStruct::DamageStruct",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DamageStruct::DamageStruct",5,"DamageStruct::Nature");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (DamageStruct::Nature)(int)lua_tonumber(L, 5);
  result = (DamageStruct *)new DamageStruct((char const *)arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  int arg4 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DamageStruct::DamageStruct",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::DamageStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DamageStruct::DamageStruct",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DamageStruct::DamageStruct",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (DamageStruct *)new DamageStruct((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::DamageStruct",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DamageStruct::DamageStruct",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::DamageStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DamageStruct::DamageStruct",3,"ServerPlayer *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_DamageStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (DamageStruct *)new DamageStruct((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DamageStruct(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DamageStruct__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_DamageStruct__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_DamageStruct__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DamageStruct__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DamageStruct__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DamageStruct__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DamageStruct__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DamageStruct'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DamageStruct::DamageStruct()\n"
    "    DamageStruct::DamageStruct(Card const *,ServerPlayer *,ServerPlayer *,int,DamageStruct::Nature)\n"
    "    DamageStruct::DamageStruct(Card const *,ServerPlayer *,ServerPlayer *,int)\n"
    "    DamageStruct::DamageStruct(Card const *,ServerPlayer *,ServerPlayer *)\n"
    "    DamageStruct::DamageStruct(char const *,ServerPlayer *,ServerPlayer *,int,DamageStruct::Nature)\n"
    "    DamageStruct::DamageStruct(char const *,ServerPlayer *,ServerPlayer *,int)\n"
    "    DamageStruct::DamageStruct(char const *,ServerPlayer *,ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_DamageStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("DamageStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::from",1,"DamageStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::from",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_from_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DamageStruct_from_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::from",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_from_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("DamageStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::to",1,"DamageStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::to",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_to_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DamageStruct_to_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::to",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_to_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_card_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("DamageStruct::card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::card",1,"DamageStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DamageStruct::card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_card_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DamageStruct_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_card_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("DamageStruct::card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::card",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_card_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (Card *) ((arg1)->card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_damage_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DamageStruct::damage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::damage",1,"DamageStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DamageStruct::damage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_damage_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->damage = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_damage_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("DamageStruct::damage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::damage",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_damage_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (int) ((arg1)->damage);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_nature_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  DamageStruct::Nature arg2 ;
  
  SWIG_check_num_args("DamageStruct::nature",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::nature",1,"DamageStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DamageStruct::nature",2,"DamageStruct::Nature");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_nature_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = (DamageStruct::Nature)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nature = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_nature_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  DamageStruct::Nature result;
  
  SWIG_check_num_args("DamageStruct::nature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::nature",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_nature_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (DamageStruct::Nature) ((arg1)->nature);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_chain_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DamageStruct::chain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::chain",1,"DamageStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DamageStruct::chain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_chain_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->chain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_chain_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("DamageStruct::chain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::chain",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_chain_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (bool) ((arg1)->chain);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_transfer_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DamageStruct::transfer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::transfer",1,"DamageStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DamageStruct::transfer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_transfer_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->transfer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_transfer_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("DamageStruct::transfer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::transfer",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_transfer_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (bool) ((arg1)->transfer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_by_user_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DamageStruct::by_user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::by_user",1,"DamageStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DamageStruct::by_user",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_by_user_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->by_user = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_by_user_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("DamageStruct::by_user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::by_user",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_by_user_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (bool) ((arg1)->by_user);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("DamageStruct::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::reason",1,"DamageStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DamageStruct::reason",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_reason_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("DamageStruct::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::reason",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_reason_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result =  ((arg1)->reason);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_transfer_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("DamageStruct::transfer_reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::transfer_reason",1,"DamageStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DamageStruct::transfer_reason",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_transfer_reason_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->transfer_reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_transfer_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("DamageStruct::transfer_reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::transfer_reason",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_transfer_reason_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result =  ((arg1)->transfer_reason);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_prevented_set(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DamageStruct::prevented",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::prevented",1,"DamageStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DamageStruct::prevented",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_prevented_set",1,SWIGTYPE_p_DamageStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->prevented = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_prevented_get(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("DamageStruct::prevented",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::prevented",1,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_prevented_get",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = (bool) ((arg1)->prevented);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DamageStruct_getReason(lua_State* L) {
  int SWIG_arg = 0;
  DamageStruct *arg1 = (DamageStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("DamageStruct::getReason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DamageStruct::getReason",1,"DamageStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("DamageStruct_getReason",1,SWIGTYPE_p_DamageStruct);
  }
  
  result = ((DamageStruct const *)arg1)->getReason();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DamageStruct(void *obj) {
DamageStruct *arg1 = (DamageStruct *) obj;
delete arg1;
}
static swig_lua_method swig_DamageStruct_methods[] = {
    {"getReason", _wrap_DamageStruct_getReason}, 
    {0,0}
};
static swig_lua_attribute swig_DamageStruct_attributes[] = {
    { "from", _wrap_DamageStruct_from_get, _wrap_DamageStruct_from_set},
    { "to", _wrap_DamageStruct_to_get, _wrap_DamageStruct_to_set},
    { "card", _wrap_DamageStruct_card_get, _wrap_DamageStruct_card_set},
    { "damage", _wrap_DamageStruct_damage_get, _wrap_DamageStruct_damage_set},
    { "nature", _wrap_DamageStruct_nature_get, _wrap_DamageStruct_nature_set},
    { "chain", _wrap_DamageStruct_chain_get, _wrap_DamageStruct_chain_set},
    { "transfer", _wrap_DamageStruct_transfer_get, _wrap_DamageStruct_transfer_set},
    { "by_user", _wrap_DamageStruct_by_user_get, _wrap_DamageStruct_by_user_set},
    { "reason", _wrap_DamageStruct_reason_get, _wrap_DamageStruct_reason_set},
    { "transfer_reason", _wrap_DamageStruct_transfer_reason_get, _wrap_DamageStruct_transfer_reason_set},
    { "prevented", _wrap_DamageStruct_prevented_get, _wrap_DamageStruct_prevented_set},
    {0,0,0}
};
static swig_lua_attribute swig_DamageStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DamageStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DamageStruct_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Normal", DamageStruct::Normal)},
    {SWIG_LUA_CONSTTAB_INT("Fire", DamageStruct::Fire)},
    {SWIG_LUA_CONSTTAB_INT("Thunder", DamageStruct::Thunder)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DamageStruct_bases[] = {0};
static const char *swig_DamageStruct_base_names[] = {0};
static swig_lua_class _wrap_class_DamageStruct = { "DamageStruct", &SWIGTYPE_p_DamageStruct,_wrap_new_DamageStruct, swig_delete_DamageStruct, swig_DamageStruct_methods, swig_DamageStruct_attributes, { "DamageStruct", swig_DamageStruct_cls_methods, swig_DamageStruct_cls_attributes, swig_DamageStruct_cls_constants }, swig_DamageStruct_bases, swig_DamageStruct_base_names };

static int _wrap_new_CardEffectStruct(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *result = 0 ;
  
  SWIG_check_num_args("CardEffectStruct::CardEffectStruct",0,0)
  result = (CardEffectStruct *)new CardEffectStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardEffectStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardEffectStruct_card_set(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *arg1 = (CardEffectStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("CardEffectStruct::card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardEffectStruct::card",1,"CardEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardEffectStruct::card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("CardEffectStruct_card_set",1,SWIGTYPE_p_CardEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardEffectStruct_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardEffectStruct_card_get(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *arg1 = (CardEffectStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("CardEffectStruct::card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardEffectStruct::card",1,"CardEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("CardEffectStruct_card_get",1,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (Card *) ((arg1)->card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardEffectStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *arg1 = (CardEffectStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("CardEffectStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardEffectStruct::from",1,"CardEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardEffectStruct::from",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("CardEffectStruct_from_set",1,SWIGTYPE_p_CardEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardEffectStruct_from_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardEffectStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *arg1 = (CardEffectStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("CardEffectStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardEffectStruct::from",1,"CardEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("CardEffectStruct_from_get",1,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardEffectStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *arg1 = (CardEffectStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("CardEffectStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardEffectStruct::to",1,"CardEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardEffectStruct::to",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("CardEffectStruct_to_set",1,SWIGTYPE_p_CardEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardEffectStruct_to_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardEffectStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  CardEffectStruct *arg1 = (CardEffectStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("CardEffectStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardEffectStruct::to",1,"CardEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("CardEffectStruct_to_get",1,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardEffectStruct(void *obj) {
CardEffectStruct *arg1 = (CardEffectStruct *) obj;
delete arg1;
}
static swig_lua_method swig_CardEffectStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CardEffectStruct_attributes[] = {
    { "card", _wrap_CardEffectStruct_card_get, _wrap_CardEffectStruct_card_set},
    { "from", _wrap_CardEffectStruct_from_get, _wrap_CardEffectStruct_from_set},
    { "to", _wrap_CardEffectStruct_to_get, _wrap_CardEffectStruct_to_set},
    {0,0,0}
};
static swig_lua_attribute swig_CardEffectStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CardEffectStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CardEffectStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CardEffectStruct_bases[] = {0};
static const char *swig_CardEffectStruct_base_names[] = {0};
static swig_lua_class _wrap_class_CardEffectStruct = { "CardEffectStruct", &SWIGTYPE_p_CardEffectStruct,_wrap_new_CardEffectStruct, swig_delete_CardEffectStruct, swig_CardEffectStruct_methods, swig_CardEffectStruct_attributes, { "CardEffectStruct", swig_CardEffectStruct_cls_methods, swig_CardEffectStruct_cls_attributes, swig_CardEffectStruct_cls_constants }, swig_CardEffectStruct_bases, swig_CardEffectStruct_base_names };

static int _wrap_new_SlashEffectStruct(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *result = 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::SlashEffectStruct",0,0)
  result = (SlashEffectStruct *)new SlashEffectStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SlashEffectStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_jink_num_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SlashEffectStruct::jink_num",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::jink_num",1,"SlashEffectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SlashEffectStruct::jink_num",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_jink_num_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->jink_num = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_jink_num_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("SlashEffectStruct::jink_num",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::jink_num",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_jink_num_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (int) ((arg1)->jink_num);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_slash_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::slash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::slash",1,"SlashEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SlashEffectStruct::slash",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_slash_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SlashEffectStruct_slash_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->slash = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_slash_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::slash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::slash",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_slash_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (Card *) ((arg1)->slash);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_jink_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::jink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::jink",1,"SlashEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SlashEffectStruct::jink",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_jink_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SlashEffectStruct_jink_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->jink = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_jink_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::jink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::jink",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_jink_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (Card *) ((arg1)->jink);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::from",1,"SlashEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SlashEffectStruct::from",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_from_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SlashEffectStruct_from_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::from",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_from_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::to",1,"SlashEffectStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SlashEffectStruct::to",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_to_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SlashEffectStruct_to_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("SlashEffectStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::to",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_to_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_drank_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SlashEffectStruct::drank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::drank",1,"SlashEffectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SlashEffectStruct::drank",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_drank_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->drank = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_drank_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("SlashEffectStruct::drank",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::drank",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_drank_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (int) ((arg1)->drank);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_nature_set(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  DamageStruct::Nature arg2 ;
  
  SWIG_check_num_args("SlashEffectStruct::nature",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::nature",1,"SlashEffectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SlashEffectStruct::nature",2,"DamageStruct::Nature");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_nature_set",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  arg2 = (DamageStruct::Nature)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nature = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlashEffectStruct_nature_get(lua_State* L) {
  int SWIG_arg = 0;
  SlashEffectStruct *arg1 = (SlashEffectStruct *) 0 ;
  DamageStruct::Nature result;
  
  SWIG_check_num_args("SlashEffectStruct::nature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SlashEffectStruct::nature",1,"SlashEffectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("SlashEffectStruct_nature_get",1,SWIGTYPE_p_SlashEffectStruct);
  }
  
  result = (DamageStruct::Nature) ((arg1)->nature);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SlashEffectStruct(void *obj) {
SlashEffectStruct *arg1 = (SlashEffectStruct *) obj;
delete arg1;
}
static swig_lua_method swig_SlashEffectStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SlashEffectStruct_attributes[] = {
    { "jink_num", _wrap_SlashEffectStruct_jink_num_get, _wrap_SlashEffectStruct_jink_num_set},
    { "slash", _wrap_SlashEffectStruct_slash_get, _wrap_SlashEffectStruct_slash_set},
    { "jink", _wrap_SlashEffectStruct_jink_get, _wrap_SlashEffectStruct_jink_set},
    { "from", _wrap_SlashEffectStruct_from_get, _wrap_SlashEffectStruct_from_set},
    { "to", _wrap_SlashEffectStruct_to_get, _wrap_SlashEffectStruct_to_set},
    { "drank", _wrap_SlashEffectStruct_drank_get, _wrap_SlashEffectStruct_drank_set},
    { "nature", _wrap_SlashEffectStruct_nature_get, _wrap_SlashEffectStruct_nature_set},
    {0,0,0}
};
static swig_lua_attribute swig_SlashEffectStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SlashEffectStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SlashEffectStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SlashEffectStruct_bases[] = {0};
static const char *swig_SlashEffectStruct_base_names[] = {0};
static swig_lua_class _wrap_class_SlashEffectStruct = { "SlashEffectStruct", &SWIGTYPE_p_SlashEffectStruct,_wrap_new_SlashEffectStruct, swig_delete_SlashEffectStruct, swig_SlashEffectStruct_methods, swig_SlashEffectStruct_attributes, { "SlashEffectStruct", swig_SlashEffectStruct_cls_methods, swig_SlashEffectStruct_cls_attributes, swig_SlashEffectStruct_cls_constants }, swig_SlashEffectStruct_bases, swig_SlashEffectStruct_base_names };

static int _wrap_CardUseStruct_m_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  enum CardUseStruct::CardUseReason arg2 ;
  
  SWIG_check_num_args("CardUseStruct::m_reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::m_reason",1,"CardUseStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardUseStruct::m_reason",2,"enum CardUseStruct::CardUseReason");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_m_reason_set",1,SWIGTYPE_p_CardUseStruct);
  }
  
  arg2 = (enum CardUseStruct::CardUseReason)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_m_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  enum CardUseStruct::CardUseReason result;
  
  SWIG_check_num_args("CardUseStruct::m_reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::m_reason",1,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_m_reason_get",1,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (enum CardUseStruct::CardUseReason) ((arg1)->m_reason);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardUseStruct__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::CardUseStruct",0,0)
  result = (CardUseStruct *)new CardUseStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardUseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardUseStruct__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > arg3 ;
  bool arg4 ;
  QList< ServerPlayer * > *argp3 ;
  CardUseStruct *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::CardUseStruct",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::CardUseStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::CardUseStruct",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CardUseStruct::CardUseStruct",3,"QList< ServerPlayer * >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("CardUseStruct::CardUseStruct",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardUseStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardUseStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("new_CardUseStruct",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (CardUseStruct *)new CardUseStruct((Card const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardUseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardUseStruct__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > arg3 ;
  QList< ServerPlayer * > *argp3 ;
  CardUseStruct *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::CardUseStruct",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::CardUseStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::CardUseStruct",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CardUseStruct::CardUseStruct",3,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardUseStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardUseStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("new_CardUseStruct",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg3 = *argp3;
  
  result = (CardUseStruct *)new CardUseStruct((Card const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardUseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardUseStruct__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  bool arg4 ;
  CardUseStruct *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::CardUseStruct",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::CardUseStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::CardUseStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CardUseStruct::CardUseStruct",3,"ServerPlayer *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("CardUseStruct::CardUseStruct",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardUseStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardUseStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardUseStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (CardUseStruct *)new CardUseStruct((Card const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardUseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardUseStruct__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  CardUseStruct *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::CardUseStruct",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::CardUseStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::CardUseStruct",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CardUseStruct::CardUseStruct",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardUseStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardUseStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardUseStruct",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (CardUseStruct *)new CardUseStruct((Card const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardUseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardUseStruct(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CardUseStruct__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_CardUseStruct__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_CardUseStruct__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CardUseStruct__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CardUseStruct__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CardUseStruct'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CardUseStruct::CardUseStruct()\n"
    "    CardUseStruct::CardUseStruct(Card const *,ServerPlayer *,QList< ServerPlayer * >,bool)\n"
    "    CardUseStruct::CardUseStruct(Card const *,ServerPlayer *,QList< ServerPlayer * >)\n"
    "    CardUseStruct::CardUseStruct(Card const *,ServerPlayer *,ServerPlayer *,bool)\n"
    "    CardUseStruct::CardUseStruct(Card const *,ServerPlayer *,ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_CardUseStruct_isValid(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardUseStruct::isValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::isValid",1,"CardUseStruct const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CardUseStruct::isValid",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_isValid",1,SWIGTYPE_p_CardUseStruct);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((CardUseStruct const *)arg1)->isValid((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_parse(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  char *arg2 = (char *) 0 ;
  Room *arg3 = (Room *) 0 ;
  
  SWIG_check_num_args("CardUseStruct::parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::parse",1,"CardUseStruct *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CardUseStruct::parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CardUseStruct::parse",3,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_parse",1,SWIGTYPE_p_CardUseStruct);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("CardUseStruct_parse",3,SWIGTYPE_p_Room);
  }
  
  (arg1)->parse((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_card_set(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("CardUseStruct::card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::card",1,"CardUseStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_card_set",1,SWIGTYPE_p_CardUseStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardUseStruct_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_card_get(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::card",1,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_card_get",1,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (Card *) ((arg1)->card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("CardUseStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::from",1,"CardUseStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::from",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_from_set",1,SWIGTYPE_p_CardUseStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardUseStruct_from_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::from",1,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_from_get",1,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  QList< ServerPlayer * > *arg2 = (QList< ServerPlayer * > *) 0 ;
  
  SWIG_check_num_args("CardUseStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::to",1,"CardUseStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardUseStruct::to",2,"QList< ServerPlayer * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_to_set",1,SWIGTYPE_p_CardUseStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("CardUseStruct_to_set",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  if (arg1) (arg1)->to = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  QList< ServerPlayer * > *result = 0 ;
  
  SWIG_check_num_args("CardUseStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::to",1,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_to_get",1,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (QList< ServerPlayer * > *)& ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_ServerPlayer_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_m_isOwnerUse_set(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CardUseStruct::m_isOwnerUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::m_isOwnerUse",1,"CardUseStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardUseStruct::m_isOwnerUse",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_m_isOwnerUse_set",1,SWIGTYPE_p_CardUseStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_isOwnerUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_m_isOwnerUse_get(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardUseStruct::m_isOwnerUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::m_isOwnerUse",1,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_m_isOwnerUse_get",1,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (bool) ((arg1)->m_isOwnerUse);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_m_addHistory_set(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CardUseStruct::m_addHistory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::m_addHistory",1,"CardUseStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardUseStruct::m_addHistory",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_m_addHistory_set",1,SWIGTYPE_p_CardUseStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_addHistory = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardUseStruct_m_addHistory_get(lua_State* L) {
  int SWIG_arg = 0;
  CardUseStruct *arg1 = (CardUseStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardUseStruct::m_addHistory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardUseStruct::m_addHistory",1,"CardUseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("CardUseStruct_m_addHistory_get",1,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (bool) ((arg1)->m_addHistory);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardUseStruct(void *obj) {
CardUseStruct *arg1 = (CardUseStruct *) obj;
delete arg1;
}
static swig_lua_method swig_CardUseStruct_methods[] = {
    {"isValid", _wrap_CardUseStruct_isValid}, 
    {"parse", _wrap_CardUseStruct_parse}, 
    {0,0}
};
static swig_lua_attribute swig_CardUseStruct_attributes[] = {
    { "m_reason", _wrap_CardUseStruct_m_reason_get, _wrap_CardUseStruct_m_reason_set},
    { "card", _wrap_CardUseStruct_card_get, _wrap_CardUseStruct_card_set},
    { "from", _wrap_CardUseStruct_from_get, _wrap_CardUseStruct_from_set},
    { "to", _wrap_CardUseStruct_to_get, _wrap_CardUseStruct_to_set},
    { "m_isOwnerUse", _wrap_CardUseStruct_m_isOwnerUse_get, _wrap_CardUseStruct_m_isOwnerUse_set},
    { "m_addHistory", _wrap_CardUseStruct_m_addHistory_get, _wrap_CardUseStruct_m_addHistory_set},
    {0,0,0}
};
static swig_lua_attribute swig_CardUseStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CardUseStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CardUseStruct_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("CARD_USE_REASON_UNKNOWN", CardUseStruct::CARD_USE_REASON_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("CARD_USE_REASON_PLAY", CardUseStruct::CARD_USE_REASON_PLAY)},
    {SWIG_LUA_CONSTTAB_INT("CARD_USE_REASON_RESPONSE", CardUseStruct::CARD_USE_REASON_RESPONSE)},
    {SWIG_LUA_CONSTTAB_INT("CARD_USE_REASON_RESPONSE_USE", CardUseStruct::CARD_USE_REASON_RESPONSE_USE)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CardUseStruct_bases[] = {0};
static const char *swig_CardUseStruct_base_names[] = {0};
static swig_lua_class _wrap_class_CardUseStruct = { "CardUseStruct", &SWIGTYPE_p_CardUseStruct,_wrap_new_CardUseStruct, swig_delete_CardUseStruct, swig_CardUseStruct_methods, swig_CardUseStruct_attributes, { "CardUseStruct", swig_CardUseStruct_cls_methods, swig_CardUseStruct_cls_attributes, swig_CardUseStruct_cls_constants }, swig_CardUseStruct_bases, swig_CardUseStruct_base_names };

static int _wrap_new_CardsMoveStruct__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::CardsMoveStruct",0,0)
  result = (CardsMoveStruct *)new CardsMoveStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardsMoveStruct__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = 0 ;
  Player *arg2 = (Player *) 0 ;
  Player *arg3 = (Player *) 0 ;
  Player::Place arg4 ;
  Player::Place arg5 ;
  CardMoveReason arg6 ;
  CardMoveReason *argp6 ;
  CardsMoveStruct *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::CardsMoveStruct",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",1,"QList< int > const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",2,"Player *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",3,"Player *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",4,"Player::Place");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",5,"Player::Place");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",6,"CardMoveReason");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",1,SWIGTYPE_p_QListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",3,SWIGTYPE_p_Player);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  arg5 = (Player::Place)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",6,SWIGTYPE_p_CardMoveReason);
  }
  arg6 = *argp6;
  
  result = (CardsMoveStruct *)new CardsMoveStruct((QList< int > const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardsMoveStruct__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = 0 ;
  Player *arg2 = (Player *) 0 ;
  Player::Place arg3 ;
  CardMoveReason arg4 ;
  CardMoveReason *argp4 ;
  CardsMoveStruct *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::CardsMoveStruct",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",1,"QList< int > const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",2,"Player *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",3,"Player::Place");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",4,"CardMoveReason");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",1,SWIGTYPE_p_QListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",4,SWIGTYPE_p_CardMoveReason);
  }
  arg4 = *argp4;
  
  result = (CardsMoveStruct *)new CardsMoveStruct((QList< int > const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardsMoveStruct__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Player *arg2 = (Player *) 0 ;
  Player *arg3 = (Player *) 0 ;
  Player::Place arg4 ;
  Player::Place arg5 ;
  CardMoveReason arg6 ;
  CardMoveReason *argp6 ;
  CardsMoveStruct *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::CardsMoveStruct",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",2,"Player *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",3,"Player *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",4,"Player::Place");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",5,"Player::Place");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",6,"CardMoveReason");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",3,SWIGTYPE_p_Player);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  arg5 = (Player::Place)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",6,SWIGTYPE_p_CardMoveReason);
  }
  arg6 = *argp6;
  
  result = (CardsMoveStruct *)new CardsMoveStruct(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardsMoveStruct__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Player *arg2 = (Player *) 0 ;
  Player::Place arg3 ;
  CardMoveReason arg4 ;
  CardMoveReason *argp4 ;
  CardsMoveStruct *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::CardsMoveStruct",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",2,"Player *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",3,"Player::Place");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("CardsMoveStruct::CardsMoveStruct",4,"CardMoveReason");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (Player::Place)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("new_CardsMoveStruct",4,SWIGTYPE_p_CardMoveReason);
  }
  arg4 = *argp4;
  
  result = (CardsMoveStruct *)new CardsMoveStruct(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardsMoveStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardsMoveStruct(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CardsMoveStruct__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_CardsMoveStruct__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_CardsMoveStruct__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_CardsMoveStruct__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_CardsMoveStruct__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CardsMoveStruct'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CardsMoveStruct::CardsMoveStruct()\n"
    "    CardsMoveStruct::CardsMoveStruct(QList< int > const &,Player *,Player *,Player::Place,Player::Place,CardMoveReason)\n"
    "    CardsMoveStruct::CardsMoveStruct(QList< int > const &,Player *,Player::Place,CardMoveReason)\n"
    "    CardsMoveStruct::CardsMoveStruct(int,Player *,Player *,Player::Place,Player::Place,CardMoveReason)\n"
    "    CardsMoveStruct::CardsMoveStruct(int,Player *,Player::Place,CardMoveReason)\n");
  lua_error(L);return 0;
}


static int _wrap_CardsMoveStruct_card_ids_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QList< int > *arg2 = (QList< int > *) 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::card_ids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::card_ids",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::card_ids",2,"QList< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_card_ids_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("CardsMoveStruct_card_ids_set",2,SWIGTYPE_p_QListT_int_t);
  }
  
  if (arg1) (arg1)->card_ids = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_card_ids_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QList< int > *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::card_ids",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::card_ids",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_card_ids_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (QList< int > *)& ((arg1)->card_ids);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_place_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::from_place",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from_place",1,"CardsMoveStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardsMoveStruct::from_place",2,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_place_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = (Player::Place)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->from_place = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_place_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("CardsMoveStruct::from_place",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from_place",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_place_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player::Place) ((arg1)->from_place);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_place_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::to_place",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to_place",1,"CardsMoveStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardsMoveStruct::to_place",2,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_place_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = (Player::Place)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->to_place = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_place_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("CardsMoveStruct::to_place",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to_place",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_place_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player::Place) ((arg1)->to_place);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_player_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::from_player_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from_player_name",1,"CardsMoveStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveStruct::from_player_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_player_name_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->from_player_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_player_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveStruct::from_player_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from_player_name",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_player_name_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result =  ((arg1)->from_player_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_player_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::to_player_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to_player_name",1,"CardsMoveStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveStruct::to_player_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_player_name_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->to_player_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_player_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveStruct::to_player_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to_player_name",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_player_name_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result =  ((arg1)->to_player_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_pile_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::from_pile_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from_pile_name",1,"CardsMoveStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveStruct::from_pile_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_pile_name_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->from_pile_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_pile_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveStruct::from_pile_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from_pile_name",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_pile_name_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result =  ((arg1)->from_pile_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_pile_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::to_pile_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to_pile_name",1,"CardsMoveStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveStruct::to_pile_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_pile_name_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->to_pile_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_pile_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveStruct::to_pile_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to_pile_name",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_pile_name_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result =  ((arg1)->to_pile_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::from",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveStruct_from_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::from",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_from_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::to",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveStruct_to_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::to",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_to_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player *) ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  CardMoveReason *arg2 = (CardMoveReason *) 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::reason",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::reason",2,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_reason_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardsMoveStruct_reason_set",2,SWIGTYPE_p_CardMoveReason);
  }
  
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  CardMoveReason *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::reason",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_reason_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (CardMoveReason *)& ((arg1)->reason);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardMoveReason,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_open_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::open",1,"CardsMoveStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardsMoveStruct::open",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_open_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->open = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_open_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardsMoveStruct::open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::open",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_open_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (bool) ((arg1)->open);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_is_last_handcard_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::is_last_handcard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::is_last_handcard",1,"CardsMoveStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardsMoveStruct::is_last_handcard",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_is_last_handcard_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->is_last_handcard = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_is_last_handcard_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardsMoveStruct::is_last_handcard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::is_last_handcard",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_is_last_handcard_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (bool) ((arg1)->is_last_handcard);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_from_place_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_from_place",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_from_place",1,"CardsMoveStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardsMoveStruct::origin_from_place",2,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_place_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = (Player::Place)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->origin_from_place = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_from_place_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("CardsMoveStruct::origin_from_place",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_from_place",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_place_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player::Place) ((arg1)->origin_from_place);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_to_place_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_to_place",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_to_place",1,"CardsMoveStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardsMoveStruct::origin_to_place",2,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_place_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = (Player::Place)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->origin_to_place = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_to_place_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("CardsMoveStruct::origin_to_place",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_to_place",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_place_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player::Place) ((arg1)->origin_to_place);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_from_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_from",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::origin_from",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->origin_from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_from_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_from",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player *) ((arg1)->origin_from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_to_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_to",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::origin_to",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->origin_to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_to_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_to",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result = (Player *) ((arg1)->origin_to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_from_pile_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_from_pile_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_from_pile_name",1,"CardsMoveStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveStruct::origin_from_pile_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_pile_name_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->origin_from_pile_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_from_pile_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveStruct::origin_from_pile_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_from_pile_name",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_from_pile_name_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result =  ((arg1)->origin_from_pile_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_to_pile_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveStruct::origin_to_pile_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_to_pile_name",1,"CardsMoveStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveStruct::origin_to_pile_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_pile_name_set",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->origin_to_pile_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_origin_to_pile_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveStruct::origin_to_pile_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::origin_to_pile_name",1,"CardsMoveStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_origin_to_pile_name_get",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  result =  ((arg1)->origin_to_pile_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveStruct_isRelevant(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveStruct *arg1 = (CardsMoveStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardsMoveStruct::isRelevant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveStruct::isRelevant",1,"CardsMoveStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveStruct::isRelevant",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("CardsMoveStruct_isRelevant",1,SWIGTYPE_p_CardsMoveStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("CardsMoveStruct_isRelevant",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)(arg1)->isRelevant((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardsMoveStruct(void *obj) {
CardsMoveStruct *arg1 = (CardsMoveStruct *) obj;
delete arg1;
}
static swig_lua_method swig_CardsMoveStruct_methods[] = {
    {"isRelevant", _wrap_CardsMoveStruct_isRelevant}, 
    {0,0}
};
static swig_lua_attribute swig_CardsMoveStruct_attributes[] = {
    { "card_ids", _wrap_CardsMoveStruct_card_ids_get, _wrap_CardsMoveStruct_card_ids_set},
    { "from_place", _wrap_CardsMoveStruct_from_place_get, _wrap_CardsMoveStruct_from_place_set},
    { "to_place", _wrap_CardsMoveStruct_to_place_get, _wrap_CardsMoveStruct_to_place_set},
    { "from_player_name", _wrap_CardsMoveStruct_from_player_name_get, _wrap_CardsMoveStruct_from_player_name_set},
    { "to_player_name", _wrap_CardsMoveStruct_to_player_name_get, _wrap_CardsMoveStruct_to_player_name_set},
    { "from_pile_name", _wrap_CardsMoveStruct_from_pile_name_get, _wrap_CardsMoveStruct_from_pile_name_set},
    { "to_pile_name", _wrap_CardsMoveStruct_to_pile_name_get, _wrap_CardsMoveStruct_to_pile_name_set},
    { "from", _wrap_CardsMoveStruct_from_get, _wrap_CardsMoveStruct_from_set},
    { "to", _wrap_CardsMoveStruct_to_get, _wrap_CardsMoveStruct_to_set},
    { "reason", _wrap_CardsMoveStruct_reason_get, _wrap_CardsMoveStruct_reason_set},
    { "open", _wrap_CardsMoveStruct_open_get, _wrap_CardsMoveStruct_open_set},
    { "is_last_handcard", _wrap_CardsMoveStruct_is_last_handcard_get, _wrap_CardsMoveStruct_is_last_handcard_set},
    { "origin_from_place", _wrap_CardsMoveStruct_origin_from_place_get, _wrap_CardsMoveStruct_origin_from_place_set},
    { "origin_to_place", _wrap_CardsMoveStruct_origin_to_place_get, _wrap_CardsMoveStruct_origin_to_place_set},
    { "origin_from", _wrap_CardsMoveStruct_origin_from_get, _wrap_CardsMoveStruct_origin_from_set},
    { "origin_to", _wrap_CardsMoveStruct_origin_to_get, _wrap_CardsMoveStruct_origin_to_set},
    { "origin_from_pile_name", _wrap_CardsMoveStruct_origin_from_pile_name_get, _wrap_CardsMoveStruct_origin_from_pile_name_set},
    { "origin_to_pile_name", _wrap_CardsMoveStruct_origin_to_pile_name_get, _wrap_CardsMoveStruct_origin_to_pile_name_set},
    {0,0,0}
};
static swig_lua_attribute swig_CardsMoveStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CardsMoveStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CardsMoveStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CardsMoveStruct_bases[] = {0};
static const char *swig_CardsMoveStruct_base_names[] = {0};
static swig_lua_class _wrap_class_CardsMoveStruct = { "CardsMoveStruct", &SWIGTYPE_p_CardsMoveStruct,_wrap_new_CardsMoveStruct, swig_delete_CardsMoveStruct, swig_CardsMoveStruct_methods, swig_CardsMoveStruct_attributes, { "CardsMoveStruct", swig_CardsMoveStruct_cls_methods, swig_CardsMoveStruct_cls_attributes, swig_CardsMoveStruct_cls_constants }, swig_CardsMoveStruct_bases, swig_CardsMoveStruct_base_names };

static int _wrap_CardsMoveOneTimeStruct_card_ids_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< int > *arg2 = (QList< int > *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::card_ids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::card_ids",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::card_ids",2,"QList< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_card_ids_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_card_ids_set",2,SWIGTYPE_p_QListT_int_t);
  }
  
  if (arg1) (arg1)->card_ids = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_card_ids_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< int > *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::card_ids",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::card_ids",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_card_ids_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (QList< int > *)& ((arg1)->card_ids);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_from_places_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< Player::Place > *arg2 = (QList< Player::Place > *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::from_places",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::from_places",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::from_places",2,"QList< Player::Place > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_places_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_places_set",2,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  if (arg1) (arg1)->from_places = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_from_places_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< Player::Place > *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::from_places",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::from_places",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_places_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (QList< Player::Place > *)& ((arg1)->from_places);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Player__Place_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_to_place_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player::Place arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::to_place",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::to_place",1,"CardsMoveOneTimeStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::to_place",2,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_place_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  arg2 = (Player::Place)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->to_place = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_to_place_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::to_place",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::to_place",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_place_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (Player::Place) ((arg1)->to_place);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  CardMoveReason *arg2 = (CardMoveReason *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::reason",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::reason",2,"CardMoveReason *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_reason_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_reason_set",2,SWIGTYPE_p_CardMoveReason);
  }
  
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  CardMoveReason *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::reason",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_reason_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (CardMoveReason *)& ((arg1)->reason);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardMoveReason,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::from",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::from",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::from",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (Player *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::to",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::to",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::to",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (Player *) ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_from_pile_names_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QStringList arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::from_pile_names",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::from_pile_names",1,"CardsMoveOneTimeStruct *");
  if(!lua_istable(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::from_pile_names",2,"QStringList");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_pile_names_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  for (size_t i = 0; i < lua_rawlen(L, 2); i++) {
    lua_rawgeti(L, 2, i + 1);
    const char *elem = luaL_checkstring(L, -1);
    arg2 << elem;
    lua_pop(L, 1);
  }
  
  if (arg1) (arg1)->from_pile_names = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_from_pile_names_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::from_pile_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::from_pile_names",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_from_pile_names_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result =  ((arg1)->from_pile_names);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_to_pile_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::to_pile_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::to_pile_name",1,"CardsMoveOneTimeStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::to_pile_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_pile_name_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->to_pile_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_to_pile_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::to_pile_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::to_pile_name",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_to_pile_name_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result =  ((arg1)->to_pile_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_from_places_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< Player::Place > *arg2 = (QList< Player::Place > *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_from_places",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from_places",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from_places",2,"QList< Player::Place > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_places_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player__Place_t,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_places_set",2,SWIGTYPE_p_QListT_Player__Place_t);
  }
  
  if (arg1) (arg1)->origin_from_places = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_from_places_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< Player::Place > *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_from_places",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from_places",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_places_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (QList< Player::Place > *)& ((arg1)->origin_from_places);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_Player__Place_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_to_place_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player::Place arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_to_place",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to_place",1,"CardsMoveOneTimeStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to_place",2,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_place_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  arg2 = (Player::Place)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->origin_to_place = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_to_place_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player::Place result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_to_place",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to_place",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_place_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (Player::Place) ((arg1)->origin_to_place);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_from_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->origin_from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_from_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (Player *) ((arg1)->origin_from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_to_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *arg2 = (Player *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to",2,"Player *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_set",2,SWIGTYPE_p_Player);
  }
  
  if (arg1) (arg1)->origin_to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_to_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  Player *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (Player *) ((arg1)->origin_to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Player,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_from_pile_names_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QStringList arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_from_pile_names",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from_pile_names",1,"CardsMoveOneTimeStruct *");
  if(!lua_istable(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from_pile_names",2,"QStringList");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_pile_names_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  for (size_t i = 0; i < lua_rawlen(L, 2); i++) {
    lua_rawgeti(L, 2, i + 1);
    const char *elem = luaL_checkstring(L, -1);
    arg2 << elem;
    lua_pop(L, 1);
  }
  
  if (arg1) (arg1)->origin_from_pile_names = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_from_pile_names_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_from_pile_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_from_pile_names",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_from_pile_names_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result =  ((arg1)->origin_from_pile_names);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_to_pile_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_to_pile_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to_pile_name",1,"CardsMoveOneTimeStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to_pile_name",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_pile_name_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->origin_to_pile_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_origin_to_pile_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::origin_to_pile_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::origin_to_pile_name",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_origin_to_pile_name_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result =  ((arg1)->origin_to_pile_name);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_open_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< bool > *arg2 = (QList< bool > *) 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::open",1,"CardsMoveOneTimeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::open",2,"QList< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_open_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_bool_t,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_open_set",2,SWIGTYPE_p_QListT_bool_t);
  }
  
  if (arg1) (arg1)->open = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_open_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  QList< bool > *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::open",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_open_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (QList< bool > *)& ((arg1)->open);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_bool_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_is_last_handcard_set(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::is_last_handcard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::is_last_handcard",1,"CardsMoveOneTimeStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardsMoveOneTimeStruct::is_last_handcard",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_is_last_handcard_set",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->is_last_handcard = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardsMoveOneTimeStruct_is_last_handcard_get(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::is_last_handcard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardsMoveOneTimeStruct::is_last_handcard",1,"CardsMoveOneTimeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardsMoveOneTimeStruct,0))){
    SWIG_fail_ptr("CardsMoveOneTimeStruct_is_last_handcard_get",1,SWIGTYPE_p_CardsMoveOneTimeStruct);
  }
  
  result = (bool) ((arg1)->is_last_handcard);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardsMoveOneTimeStruct(lua_State* L) {
  int SWIG_arg = 0;
  CardsMoveOneTimeStruct *result = 0 ;
  
  SWIG_check_num_args("CardsMoveOneTimeStruct::CardsMoveOneTimeStruct",0,0)
  result = (CardsMoveOneTimeStruct *)new CardsMoveOneTimeStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardsMoveOneTimeStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardsMoveOneTimeStruct(void *obj) {
CardsMoveOneTimeStruct *arg1 = (CardsMoveOneTimeStruct *) obj;
delete arg1;
}
static swig_lua_method swig_CardsMoveOneTimeStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CardsMoveOneTimeStruct_attributes[] = {
    { "card_ids", _wrap_CardsMoveOneTimeStruct_card_ids_get, _wrap_CardsMoveOneTimeStruct_card_ids_set},
    { "from_places", _wrap_CardsMoveOneTimeStruct_from_places_get, _wrap_CardsMoveOneTimeStruct_from_places_set},
    { "to_place", _wrap_CardsMoveOneTimeStruct_to_place_get, _wrap_CardsMoveOneTimeStruct_to_place_set},
    { "reason", _wrap_CardsMoveOneTimeStruct_reason_get, _wrap_CardsMoveOneTimeStruct_reason_set},
    { "from", _wrap_CardsMoveOneTimeStruct_from_get, _wrap_CardsMoveOneTimeStruct_from_set},
    { "to", _wrap_CardsMoveOneTimeStruct_to_get, _wrap_CardsMoveOneTimeStruct_to_set},
    { "from_pile_names", _wrap_CardsMoveOneTimeStruct_from_pile_names_get, _wrap_CardsMoveOneTimeStruct_from_pile_names_set},
    { "to_pile_name", _wrap_CardsMoveOneTimeStruct_to_pile_name_get, _wrap_CardsMoveOneTimeStruct_to_pile_name_set},
    { "origin_from_places", _wrap_CardsMoveOneTimeStruct_origin_from_places_get, _wrap_CardsMoveOneTimeStruct_origin_from_places_set},
    { "origin_to_place", _wrap_CardsMoveOneTimeStruct_origin_to_place_get, _wrap_CardsMoveOneTimeStruct_origin_to_place_set},
    { "origin_from", _wrap_CardsMoveOneTimeStruct_origin_from_get, _wrap_CardsMoveOneTimeStruct_origin_from_set},
    { "origin_to", _wrap_CardsMoveOneTimeStruct_origin_to_get, _wrap_CardsMoveOneTimeStruct_origin_to_set},
    { "origin_from_pile_names", _wrap_CardsMoveOneTimeStruct_origin_from_pile_names_get, _wrap_CardsMoveOneTimeStruct_origin_from_pile_names_set},
    { "origin_to_pile_name", _wrap_CardsMoveOneTimeStruct_origin_to_pile_name_get, _wrap_CardsMoveOneTimeStruct_origin_to_pile_name_set},
    { "open", _wrap_CardsMoveOneTimeStruct_open_get, _wrap_CardsMoveOneTimeStruct_open_set},
    { "is_last_handcard", _wrap_CardsMoveOneTimeStruct_is_last_handcard_get, _wrap_CardsMoveOneTimeStruct_is_last_handcard_set},
    {0,0,0}
};
static swig_lua_attribute swig_CardsMoveOneTimeStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CardsMoveOneTimeStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CardsMoveOneTimeStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CardsMoveOneTimeStruct_bases[] = {0};
static const char *swig_CardsMoveOneTimeStruct_base_names[] = {0};
static swig_lua_class _wrap_class_CardsMoveOneTimeStruct = { "CardsMoveOneTimeStruct", &SWIGTYPE_p_CardsMoveOneTimeStruct,_wrap_new_CardsMoveOneTimeStruct, swig_delete_CardsMoveOneTimeStruct, swig_CardsMoveOneTimeStruct_methods, swig_CardsMoveOneTimeStruct_attributes, { "CardsMoveOneTimeStruct", swig_CardsMoveOneTimeStruct_cls_methods, swig_CardsMoveOneTimeStruct_cls_attributes, swig_CardsMoveOneTimeStruct_cls_constants }, swig_CardsMoveOneTimeStruct_bases, swig_CardsMoveOneTimeStruct_base_names };

static int _wrap_new_DyingStruct(lua_State* L) {
  int SWIG_arg = 0;
  DyingStruct *result = 0 ;
  
  SWIG_check_num_args("DyingStruct::DyingStruct",0,0)
  result = (DyingStruct *)new DyingStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DyingStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DyingStruct_who_set(lua_State* L) {
  int SWIG_arg = 0;
  DyingStruct *arg1 = (DyingStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("DyingStruct::who",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DyingStruct::who",1,"DyingStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DyingStruct::who",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DyingStruct,0))){
    SWIG_fail_ptr("DyingStruct_who_set",1,SWIGTYPE_p_DyingStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DyingStruct_who_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->who = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DyingStruct_who_get(lua_State* L) {
  int SWIG_arg = 0;
  DyingStruct *arg1 = (DyingStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("DyingStruct::who",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DyingStruct::who",1,"DyingStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DyingStruct,0))){
    SWIG_fail_ptr("DyingStruct_who_get",1,SWIGTYPE_p_DyingStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->who);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DyingStruct_damage_set(lua_State* L) {
  int SWIG_arg = 0;
  DyingStruct *arg1 = (DyingStruct *) 0 ;
  DamageStruct *arg2 = (DamageStruct *) 0 ;
  
  SWIG_check_num_args("DyingStruct::damage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DyingStruct::damage",1,"DyingStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DyingStruct::damage",2,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DyingStruct,0))){
    SWIG_fail_ptr("DyingStruct_damage_set",1,SWIGTYPE_p_DyingStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DamageStruct,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DyingStruct_damage_set",2,SWIGTYPE_p_DamageStruct);
  }
  
  if (arg1) (arg1)->damage = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DyingStruct_damage_get(lua_State* L) {
  int SWIG_arg = 0;
  DyingStruct *arg1 = (DyingStruct *) 0 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DyingStruct::damage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DyingStruct::damage",1,"DyingStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DyingStruct,0))){
    SWIG_fail_ptr("DyingStruct_damage_get",1,SWIGTYPE_p_DyingStruct);
  }
  
  result = (DamageStruct *) ((arg1)->damage);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DyingStruct(void *obj) {
DyingStruct *arg1 = (DyingStruct *) obj;
delete arg1;
}
static swig_lua_method swig_DyingStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DyingStruct_attributes[] = {
    { "who", _wrap_DyingStruct_who_get, _wrap_DyingStruct_who_set},
    { "damage", _wrap_DyingStruct_damage_get, _wrap_DyingStruct_damage_set},
    {0,0,0}
};
static swig_lua_attribute swig_DyingStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DyingStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DyingStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DyingStruct_bases[] = {0};
static const char *swig_DyingStruct_base_names[] = {0};
static swig_lua_class _wrap_class_DyingStruct = { "DyingStruct", &SWIGTYPE_p_DyingStruct,_wrap_new_DyingStruct, swig_delete_DyingStruct, swig_DyingStruct_methods, swig_DyingStruct_attributes, { "DyingStruct", swig_DyingStruct_cls_methods, swig_DyingStruct_cls_attributes, swig_DyingStruct_cls_constants }, swig_DyingStruct_bases, swig_DyingStruct_base_names };

static int _wrap_new_DeathStruct(lua_State* L) {
  int SWIG_arg = 0;
  DeathStruct *result = 0 ;
  
  SWIG_check_num_args("DeathStruct::DeathStruct",0,0)
  result = (DeathStruct *)new DeathStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeathStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeathStruct_who_set(lua_State* L) {
  int SWIG_arg = 0;
  DeathStruct *arg1 = (DeathStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("DeathStruct::who",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeathStruct::who",1,"DeathStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DeathStruct::who",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeathStruct,0))){
    SWIG_fail_ptr("DeathStruct_who_set",1,SWIGTYPE_p_DeathStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DeathStruct_who_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->who = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeathStruct_who_get(lua_State* L) {
  int SWIG_arg = 0;
  DeathStruct *arg1 = (DeathStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("DeathStruct::who",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeathStruct::who",1,"DeathStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeathStruct,0))){
    SWIG_fail_ptr("DeathStruct_who_get",1,SWIGTYPE_p_DeathStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->who);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeathStruct_damage_set(lua_State* L) {
  int SWIG_arg = 0;
  DeathStruct *arg1 = (DeathStruct *) 0 ;
  DamageStruct *arg2 = (DamageStruct *) 0 ;
  
  SWIG_check_num_args("DeathStruct::damage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeathStruct::damage",1,"DeathStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DeathStruct::damage",2,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeathStruct,0))){
    SWIG_fail_ptr("DeathStruct_damage_set",1,SWIGTYPE_p_DeathStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DamageStruct,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DeathStruct_damage_set",2,SWIGTYPE_p_DamageStruct);
  }
  
  if (arg1) (arg1)->damage = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeathStruct_damage_get(lua_State* L) {
  int SWIG_arg = 0;
  DeathStruct *arg1 = (DeathStruct *) 0 ;
  DamageStruct *result = 0 ;
  
  SWIG_check_num_args("DeathStruct::damage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeathStruct::damage",1,"DeathStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeathStruct,0))){
    SWIG_fail_ptr("DeathStruct_damage_get",1,SWIGTYPE_p_DeathStruct);
  }
  
  result = (DamageStruct *) ((arg1)->damage);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DamageStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeathStruct(void *obj) {
DeathStruct *arg1 = (DeathStruct *) obj;
delete arg1;
}
static swig_lua_method swig_DeathStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DeathStruct_attributes[] = {
    { "who", _wrap_DeathStruct_who_get, _wrap_DeathStruct_who_set},
    { "damage", _wrap_DeathStruct_damage_get, _wrap_DeathStruct_damage_set},
    {0,0,0}
};
static swig_lua_attribute swig_DeathStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeathStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeathStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeathStruct_bases[] = {0};
static const char *swig_DeathStruct_base_names[] = {0};
static swig_lua_class _wrap_class_DeathStruct = { "DeathStruct", &SWIGTYPE_p_DeathStruct,_wrap_new_DeathStruct, swig_delete_DeathStruct, swig_DeathStruct_methods, swig_DeathStruct_attributes, { "DeathStruct", swig_DeathStruct_cls_methods, swig_DeathStruct_cls_attributes, swig_DeathStruct_cls_constants }, swig_DeathStruct_bases, swig_DeathStruct_base_names };

static int _wrap_new_RecoverStruct(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *result = 0 ;
  
  SWIG_check_num_args("RecoverStruct::RecoverStruct",0,0)
  result = (RecoverStruct *)new RecoverStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RecoverStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RecoverStruct_recover_set(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *arg1 = (RecoverStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("RecoverStruct::recover",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RecoverStruct::recover",1,"RecoverStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RecoverStruct::recover",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("RecoverStruct_recover_set",1,SWIGTYPE_p_RecoverStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->recover = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RecoverStruct_recover_get(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *arg1 = (RecoverStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("RecoverStruct::recover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RecoverStruct::recover",1,"RecoverStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("RecoverStruct_recover_get",1,SWIGTYPE_p_RecoverStruct);
  }
  
  result = (int) ((arg1)->recover);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RecoverStruct_who_set(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *arg1 = (RecoverStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("RecoverStruct::who",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RecoverStruct::who",1,"RecoverStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RecoverStruct::who",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("RecoverStruct_who_set",1,SWIGTYPE_p_RecoverStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("RecoverStruct_who_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->who = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RecoverStruct_who_get(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *arg1 = (RecoverStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("RecoverStruct::who",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RecoverStruct::who",1,"RecoverStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("RecoverStruct_who_get",1,SWIGTYPE_p_RecoverStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->who);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RecoverStruct_card_set(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *arg1 = (RecoverStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("RecoverStruct::card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RecoverStruct::card",1,"RecoverStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RecoverStruct::card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("RecoverStruct_card_set",1,SWIGTYPE_p_RecoverStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("RecoverStruct_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RecoverStruct_card_get(lua_State* L) {
  int SWIG_arg = 0;
  RecoverStruct *arg1 = (RecoverStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("RecoverStruct::card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RecoverStruct::card",1,"RecoverStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("RecoverStruct_card_get",1,SWIGTYPE_p_RecoverStruct);
  }
  
  result = (Card *) ((arg1)->card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RecoverStruct(void *obj) {
RecoverStruct *arg1 = (RecoverStruct *) obj;
delete arg1;
}
static swig_lua_method swig_RecoverStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_RecoverStruct_attributes[] = {
    { "recover", _wrap_RecoverStruct_recover_get, _wrap_RecoverStruct_recover_set},
    { "who", _wrap_RecoverStruct_who_get, _wrap_RecoverStruct_who_set},
    { "card", _wrap_RecoverStruct_card_get, _wrap_RecoverStruct_card_set},
    {0,0,0}
};
static swig_lua_attribute swig_RecoverStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RecoverStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_RecoverStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_RecoverStruct_bases[] = {0};
static const char *swig_RecoverStruct_base_names[] = {0};
static swig_lua_class _wrap_class_RecoverStruct = { "RecoverStruct", &SWIGTYPE_p_RecoverStruct,_wrap_new_RecoverStruct, swig_delete_RecoverStruct, swig_RecoverStruct_methods, swig_RecoverStruct_attributes, { "RecoverStruct", swig_RecoverStruct_cls_methods, swig_RecoverStruct_cls_attributes, swig_RecoverStruct_cls_constants }, swig_RecoverStruct_bases, swig_RecoverStruct_base_names };

static int _wrap_new_PindianStruct(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *result = 0 ;
  
  SWIG_check_num_args("PindianStruct::PindianStruct",0,0)
  result = (PindianStruct *)new PindianStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PindianStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_isSuccess(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("PindianStruct::isSuccess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::isSuccess",1,"PindianStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_isSuccess",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (bool)((PindianStruct const *)arg1)->isSuccess();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("PindianStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::from",1,"PindianStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PindianStruct::from",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_from_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("PindianStruct_from_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("PindianStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::from",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_from_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("PindianStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::to",1,"PindianStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PindianStruct::to",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_to_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("PindianStruct_to_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("PindianStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::to",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_to_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_from_card_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("PindianStruct::from_card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::from_card",1,"PindianStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PindianStruct::from_card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_from_card_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("PindianStruct_from_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->from_card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_from_card_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("PindianStruct::from_card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::from_card",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_from_card_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (Card *) ((arg1)->from_card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_to_card_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("PindianStruct::to_card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::to_card",1,"PindianStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PindianStruct::to_card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_to_card_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("PindianStruct_to_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->to_card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_to_card_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("PindianStruct::to_card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::to_card",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_to_card_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (Card *) ((arg1)->to_card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_from_number_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PindianStruct::from_number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::from_number",1,"PindianStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PindianStruct::from_number",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_from_number_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->from_number = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_from_number_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("PindianStruct::from_number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::from_number",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_from_number_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (int) ((arg1)->from_number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_to_number_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PindianStruct::to_number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::to_number",1,"PindianStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PindianStruct::to_number",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_to_number_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->to_number = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_to_number_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("PindianStruct::to_number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::to_number",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_to_number_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (int) ((arg1)->to_number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("PindianStruct::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::reason",1,"PindianStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("PindianStruct::reason",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_reason_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("PindianStruct::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::reason",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_reason_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result =  ((arg1)->reason);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_success_set(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("PindianStruct::success",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::success",1,"PindianStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("PindianStruct::success",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_success_set",1,SWIGTYPE_p_PindianStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->success = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PindianStruct_success_get(lua_State* L) {
  int SWIG_arg = 0;
  PindianStruct *arg1 = (PindianStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("PindianStruct::success",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PindianStruct::success",1,"PindianStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PindianStruct,0))){
    SWIG_fail_ptr("PindianStruct_success_get",1,SWIGTYPE_p_PindianStruct);
  }
  
  result = (bool) ((arg1)->success);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PindianStruct(void *obj) {
PindianStruct *arg1 = (PindianStruct *) obj;
delete arg1;
}
static swig_lua_method swig_PindianStruct_methods[] = {
    {"isSuccess", _wrap_PindianStruct_isSuccess}, 
    {0,0}
};
static swig_lua_attribute swig_PindianStruct_attributes[] = {
    { "from", _wrap_PindianStruct_from_get, _wrap_PindianStruct_from_set},
    { "to", _wrap_PindianStruct_to_get, _wrap_PindianStruct_to_set},
    { "from_card", _wrap_PindianStruct_from_card_get, _wrap_PindianStruct_from_card_set},
    { "to_card", _wrap_PindianStruct_to_card_get, _wrap_PindianStruct_to_card_set},
    { "from_number", _wrap_PindianStruct_from_number_get, _wrap_PindianStruct_from_number_set},
    { "to_number", _wrap_PindianStruct_to_number_get, _wrap_PindianStruct_to_number_set},
    { "reason", _wrap_PindianStruct_reason_get, _wrap_PindianStruct_reason_set},
    { "success", _wrap_PindianStruct_success_get, _wrap_PindianStruct_success_set},
    {0,0,0}
};
static swig_lua_attribute swig_PindianStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PindianStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_PindianStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_PindianStruct_bases[] = {0};
static const char *swig_PindianStruct_base_names[] = {0};
static swig_lua_class _wrap_class_PindianStruct = { "PindianStruct", &SWIGTYPE_p_PindianStruct,_wrap_new_PindianStruct, swig_delete_PindianStruct, swig_PindianStruct_methods, swig_PindianStruct_attributes, { "PindianStruct", swig_PindianStruct_cls_methods, swig_PindianStruct_cls_attributes, swig_PindianStruct_cls_constants }, swig_PindianStruct_bases, swig_PindianStruct_base_names };

static int _wrap_new_JudgeStruct(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *result = 0 ;
  
  SWIG_check_num_args("JudgeStruct::JudgeStruct",0,0)
  result = (JudgeStruct *)new JudgeStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_JudgeStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_isGood__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::isGood",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::isGood",1,"JudgeStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_isGood",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool)((JudgeStruct const *)arg1)->isGood();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_isBad(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::isBad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::isBad",1,"JudgeStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_isBad",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool)((JudgeStruct const *)arg1)->isBad();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_isEffected(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::isEffected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::isEffected",1,"JudgeStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_isEffected",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool)((JudgeStruct const *)arg1)->isEffected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_updateResult(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  
  SWIG_check_num_args("JudgeStruct::updateResult",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::updateResult",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_updateResult",1,SWIGTYPE_p_JudgeStruct);
  }
  
  (arg1)->updateResult();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_isGood__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::isGood",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::isGood",1,"JudgeStruct const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("JudgeStruct::isGood",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_isGood",1,SWIGTYPE_p_JudgeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("JudgeStruct_isGood",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((JudgeStruct const *)arg1)->isGood((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_isGood(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_JudgeStruct, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_JudgeStruct_isGood__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_JudgeStruct, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JudgeStruct_isGood__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JudgeStruct_isGood'\n"
    "  Possible C/C++ prototypes are:\n"
    "    JudgeStruct::isGood() const\n"
    "    JudgeStruct::isGood(Card const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_JudgeStruct_who_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("JudgeStruct::who",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::who",1,"JudgeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("JudgeStruct::who",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_who_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("JudgeStruct_who_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->who = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_who_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("JudgeStruct::who",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::who",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_who_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->who);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_card_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("JudgeStruct::card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::card",1,"JudgeStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("JudgeStruct::card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_card_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("JudgeStruct_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_card_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("JudgeStruct::card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::card",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_card_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (Card *) ((arg1)->card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_pattern_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("JudgeStruct::pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::pattern",1,"JudgeStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("JudgeStruct::pattern",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_pattern_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->pattern = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_pattern_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("JudgeStruct::pattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::pattern",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_pattern_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result =  ((arg1)->pattern);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_good_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("JudgeStruct::good",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::good",1,"JudgeStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("JudgeStruct::good",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_good_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->good = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_good_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::good",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::good",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_good_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool) ((arg1)->good);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("JudgeStruct::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::reason",1,"JudgeStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("JudgeStruct::reason",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_reason_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("JudgeStruct::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::reason",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_reason_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result =  ((arg1)->reason);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_time_consuming_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("JudgeStruct::time_consuming",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::time_consuming",1,"JudgeStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("JudgeStruct::time_consuming",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_time_consuming_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->time_consuming = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_time_consuming_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::time_consuming",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::time_consuming",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_time_consuming_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool) ((arg1)->time_consuming);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_negative_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("JudgeStruct::negative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::negative",1,"JudgeStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("JudgeStruct::negative",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_negative_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->negative = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_negative_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::negative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::negative",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_negative_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool) ((arg1)->negative);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_play_animation_set(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("JudgeStruct::play_animation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::play_animation",1,"JudgeStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("JudgeStruct::play_animation",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_play_animation_set",1,SWIGTYPE_p_JudgeStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->play_animation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JudgeStruct_play_animation_get(lua_State* L) {
  int SWIG_arg = 0;
  JudgeStruct *arg1 = (JudgeStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("JudgeStruct::play_animation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JudgeStruct::play_animation",1,"JudgeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("JudgeStruct_play_animation_get",1,SWIGTYPE_p_JudgeStruct);
  }
  
  result = (bool) ((arg1)->play_animation);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JudgeStruct(void *obj) {
JudgeStruct *arg1 = (JudgeStruct *) obj;
delete arg1;
}
static swig_lua_method swig_JudgeStruct_methods[] = {
    {"isBad", _wrap_JudgeStruct_isBad}, 
    {"isEffected", _wrap_JudgeStruct_isEffected}, 
    {"updateResult", _wrap_JudgeStruct_updateResult}, 
    {"isGood", _wrap_JudgeStruct_isGood}, 
    {0,0}
};
static swig_lua_attribute swig_JudgeStruct_attributes[] = {
    { "who", _wrap_JudgeStruct_who_get, _wrap_JudgeStruct_who_set},
    { "card", _wrap_JudgeStruct_card_get, _wrap_JudgeStruct_card_set},
    { "pattern", _wrap_JudgeStruct_pattern_get, _wrap_JudgeStruct_pattern_set},
    { "good", _wrap_JudgeStruct_good_get, _wrap_JudgeStruct_good_set},
    { "reason", _wrap_JudgeStruct_reason_get, _wrap_JudgeStruct_reason_set},
    { "time_consuming", _wrap_JudgeStruct_time_consuming_get, _wrap_JudgeStruct_time_consuming_set},
    { "negative", _wrap_JudgeStruct_negative_get, _wrap_JudgeStruct_negative_set},
    { "play_animation", _wrap_JudgeStruct_play_animation_get, _wrap_JudgeStruct_play_animation_set},
    {0,0,0}
};
static swig_lua_attribute swig_JudgeStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JudgeStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_JudgeStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_JudgeStruct_bases[] = {0};
static const char *swig_JudgeStruct_base_names[] = {0};
static swig_lua_class _wrap_class_JudgeStruct = { "JudgeStruct", &SWIGTYPE_p_JudgeStruct,_wrap_new_JudgeStruct, swig_delete_JudgeStruct, swig_JudgeStruct_methods, swig_JudgeStruct_attributes, { "JudgeStruct", swig_JudgeStruct_cls_methods, swig_JudgeStruct_cls_attributes, swig_JudgeStruct_cls_constants }, swig_JudgeStruct_bases, swig_JudgeStruct_base_names };

static int _wrap_new_PhaseChangeStruct(lua_State* L) {
  int SWIG_arg = 0;
  PhaseChangeStruct *result = 0 ;
  
  SWIG_check_num_args("PhaseChangeStruct::PhaseChangeStruct",0,0)
  result = (PhaseChangeStruct *)new PhaseChangeStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhaseChangeStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseChangeStruct_from_set(lua_State* L) {
  int SWIG_arg = 0;
  PhaseChangeStruct *arg1 = (PhaseChangeStruct *) 0 ;
  Player::Phase arg2 ;
  
  SWIG_check_num_args("PhaseChangeStruct::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseChangeStruct::from",1,"PhaseChangeStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseChangeStruct::from",2,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseChangeStruct,0))){
    SWIG_fail_ptr("PhaseChangeStruct_from_set",1,SWIGTYPE_p_PhaseChangeStruct);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseChangeStruct_from_get(lua_State* L) {
  int SWIG_arg = 0;
  PhaseChangeStruct *arg1 = (PhaseChangeStruct *) 0 ;
  Player::Phase result;
  
  SWIG_check_num_args("PhaseChangeStruct::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseChangeStruct::from",1,"PhaseChangeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseChangeStruct,0))){
    SWIG_fail_ptr("PhaseChangeStruct_from_get",1,SWIGTYPE_p_PhaseChangeStruct);
  }
  
  result = (Player::Phase) ((arg1)->from);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseChangeStruct_to_set(lua_State* L) {
  int SWIG_arg = 0;
  PhaseChangeStruct *arg1 = (PhaseChangeStruct *) 0 ;
  Player::Phase arg2 ;
  
  SWIG_check_num_args("PhaseChangeStruct::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseChangeStruct::to",1,"PhaseChangeStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseChangeStruct::to",2,"Player::Phase");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseChangeStruct,0))){
    SWIG_fail_ptr("PhaseChangeStruct_to_set",1,SWIGTYPE_p_PhaseChangeStruct);
  }
  
  arg2 = (Player::Phase)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->to = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseChangeStruct_to_get(lua_State* L) {
  int SWIG_arg = 0;
  PhaseChangeStruct *arg1 = (PhaseChangeStruct *) 0 ;
  Player::Phase result;
  
  SWIG_check_num_args("PhaseChangeStruct::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseChangeStruct::to",1,"PhaseChangeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseChangeStruct,0))){
    SWIG_fail_ptr("PhaseChangeStruct_to_get",1,SWIGTYPE_p_PhaseChangeStruct);
  }
  
  result = (Player::Phase) ((arg1)->to);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhaseChangeStruct(void *obj) {
PhaseChangeStruct *arg1 = (PhaseChangeStruct *) obj;
delete arg1;
}
static swig_lua_method swig_PhaseChangeStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_PhaseChangeStruct_attributes[] = {
    { "from", _wrap_PhaseChangeStruct_from_get, _wrap_PhaseChangeStruct_from_set},
    { "to", _wrap_PhaseChangeStruct_to_get, _wrap_PhaseChangeStruct_to_set},
    {0,0,0}
};
static swig_lua_attribute swig_PhaseChangeStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhaseChangeStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_PhaseChangeStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_PhaseChangeStruct_bases[] = {0};
static const char *swig_PhaseChangeStruct_base_names[] = {0};
static swig_lua_class _wrap_class_PhaseChangeStruct = { "PhaseChangeStruct", &SWIGTYPE_p_PhaseChangeStruct,_wrap_new_PhaseChangeStruct, swig_delete_PhaseChangeStruct, swig_PhaseChangeStruct_methods, swig_PhaseChangeStruct_attributes, { "PhaseChangeStruct", swig_PhaseChangeStruct_cls_methods, swig_PhaseChangeStruct_cls_attributes, swig_PhaseChangeStruct_cls_constants }, swig_PhaseChangeStruct_bases, swig_PhaseChangeStruct_base_names };

static int _wrap_new_CardResponseStruct__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::CardResponseStruct",0,0)
  result = (CardResponseStruct *)new CardResponseStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardResponseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardResponseStruct__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  CardResponseStruct *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::CardResponseStruct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardResponseStruct",1,SWIGTYPE_p_Card);
  }
  
  result = (CardResponseStruct *)new CardResponseStruct((Card const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardResponseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardResponseStruct__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  CardResponseStruct *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::CardResponseStruct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardResponseStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardResponseStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (CardResponseStruct *)new CardResponseStruct((Card const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardResponseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardResponseStruct__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool arg2 ;
  CardResponseStruct *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::CardResponseStruct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",1,"Card const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardResponseStruct",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (CardResponseStruct *)new CardResponseStruct((Card const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardResponseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardResponseStruct__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool arg3 ;
  CardResponseStruct *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::CardResponseStruct",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",2,"ServerPlayer *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CardResponseStruct::CardResponseStruct",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_CardResponseStruct",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_CardResponseStruct",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (CardResponseStruct *)new CardResponseStruct((Card const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardResponseStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CardResponseStruct(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CardResponseStruct__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CardResponseStruct__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CardResponseStruct__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CardResponseStruct__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CardResponseStruct__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CardResponseStruct'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CardResponseStruct::CardResponseStruct()\n"
    "    CardResponseStruct::CardResponseStruct(Card const *)\n"
    "    CardResponseStruct::CardResponseStruct(Card const *,ServerPlayer *)\n"
    "    CardResponseStruct::CardResponseStruct(Card const *,bool)\n"
    "    CardResponseStruct::CardResponseStruct(Card const *,ServerPlayer *,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_CardResponseStruct_m_card_set(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *arg1 = (CardResponseStruct *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("CardResponseStruct::m_card",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::m_card",1,"CardResponseStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardResponseStruct::m_card",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("CardResponseStruct_m_card_set",1,SWIGTYPE_p_CardResponseStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardResponseStruct_m_card_set",2,SWIGTYPE_p_Card);
  }
  
  if (arg1) (arg1)->m_card = (Card const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardResponseStruct_m_card_get(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *arg1 = (CardResponseStruct *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::m_card",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::m_card",1,"CardResponseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("CardResponseStruct_m_card_get",1,SWIGTYPE_p_CardResponseStruct);
  }
  
  result = (Card *) ((arg1)->m_card);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardResponseStruct_m_who_set(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *arg1 = (CardResponseStruct *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("CardResponseStruct::m_who",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::m_who",1,"CardResponseStruct *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CardResponseStruct::m_who",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("CardResponseStruct_m_who_set",1,SWIGTYPE_p_CardResponseStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CardResponseStruct_m_who_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->m_who = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardResponseStruct_m_who_get(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *arg1 = (CardResponseStruct *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("CardResponseStruct::m_who",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::m_who",1,"CardResponseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("CardResponseStruct_m_who_get",1,SWIGTYPE_p_CardResponseStruct);
  }
  
  result = (ServerPlayer *) ((arg1)->m_who);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardResponseStruct_m_isUse_set(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *arg1 = (CardResponseStruct *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CardResponseStruct::m_isUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::m_isUse",1,"CardResponseStruct *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CardResponseStruct::m_isUse",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("CardResponseStruct_m_isUse_set",1,SWIGTYPE_p_CardResponseStruct);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_isUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CardResponseStruct_m_isUse_get(lua_State* L) {
  int SWIG_arg = 0;
  CardResponseStruct *arg1 = (CardResponseStruct *) 0 ;
  bool result;
  
  SWIG_check_num_args("CardResponseStruct::m_isUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CardResponseStruct::m_isUse",1,"CardResponseStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CardResponseStruct,0))){
    SWIG_fail_ptr("CardResponseStruct_m_isUse_get",1,SWIGTYPE_p_CardResponseStruct);
  }
  
  result = (bool) ((arg1)->m_isUse);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CardResponseStruct(void *obj) {
CardResponseStruct *arg1 = (CardResponseStruct *) obj;
delete arg1;
}
static swig_lua_method swig_CardResponseStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CardResponseStruct_attributes[] = {
    { "m_card", _wrap_CardResponseStruct_m_card_get, _wrap_CardResponseStruct_m_card_set},
    { "m_who", _wrap_CardResponseStruct_m_who_get, _wrap_CardResponseStruct_m_who_set},
    { "m_isUse", _wrap_CardResponseStruct_m_isUse_get, _wrap_CardResponseStruct_m_isUse_set},
    {0,0,0}
};
static swig_lua_attribute swig_CardResponseStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CardResponseStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CardResponseStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CardResponseStruct_bases[] = {0};
static const char *swig_CardResponseStruct_base_names[] = {0};
static swig_lua_class _wrap_class_CardResponseStruct = { "CardResponseStruct", &SWIGTYPE_p_CardResponseStruct,_wrap_new_CardResponseStruct, swig_delete_CardResponseStruct, swig_CardResponseStruct_methods, swig_CardResponseStruct_attributes, { "CardResponseStruct", swig_CardResponseStruct_cls_methods, swig_CardResponseStruct_cls_attributes, swig_CardResponseStruct_cls_constants }, swig_CardResponseStruct_bases, swig_CardResponseStruct_base_names };

static int _wrap_new_PlayerNumStruct__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *result = 0 ;
  
  SWIG_check_num_args("PlayerNumStruct::PlayerNumStruct",0,0)
  result = (PlayerNumStruct *)new PlayerNumStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PlayerNumStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlayerNumStruct__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  PlayerNumStruct *result = 0 ;
  
  SWIG_check_num_args("PlayerNumStruct::PlayerNumStruct",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (PlayerNumStruct *)new PlayerNumStruct(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PlayerNumStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlayerNumStruct__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  MaxCardsType::MaxCardsCount arg3 ;
  PlayerNumStruct *result = 0 ;
  
  SWIG_check_num_args("PlayerNumStruct::PlayerNumStruct",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",3,"MaxCardsType::MaxCardsCount");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 3);
  result = (PlayerNumStruct *)new PlayerNumStruct(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PlayerNumStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlayerNumStruct__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  MaxCardsType::MaxCardsCount arg3 ;
  char *arg4 = (char *) 0 ;
  PlayerNumStruct *result = 0 ;
  
  SWIG_check_num_args("PlayerNumStruct::PlayerNumStruct",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",3,"MaxCardsType::MaxCardsCount");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("PlayerNumStruct::PlayerNumStruct",4,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (PlayerNumStruct *)new PlayerNumStruct(arg1,(char const *)arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PlayerNumStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlayerNumStruct(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PlayerNumStruct__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PlayerNumStruct__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PlayerNumStruct__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_PlayerNumStruct__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PlayerNumStruct'\n"
    "  Possible C/C++ prototypes are:\n"
    "    PlayerNumStruct::PlayerNumStruct()\n"
    "    PlayerNumStruct::PlayerNumStruct(int,char const *)\n"
    "    PlayerNumStruct::PlayerNumStruct(int,char const *,MaxCardsType::MaxCardsCount)\n"
    "    PlayerNumStruct::PlayerNumStruct(int,char const *,MaxCardsType::MaxCardsCount,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PlayerNumStruct_m_type_set(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  MaxCardsType::MaxCardsCount arg2 ;
  
  SWIG_check_num_args("PlayerNumStruct::m_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_type",1,"PlayerNumStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlayerNumStruct::m_type",2,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_type_set",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  arg2 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_type_get(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  MaxCardsType::MaxCardsCount result;
  
  SWIG_check_num_args("PlayerNumStruct::m_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_type",1,"PlayerNumStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_type_get",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  result = (MaxCardsType::MaxCardsCount) ((arg1)->m_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_num_set(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PlayerNumStruct::m_num",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_num",1,"PlayerNumStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlayerNumStruct::m_num",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_num_set",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_num = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_num_get(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("PlayerNumStruct::m_num",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_num",1,"PlayerNumStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_num_get",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  result = (int) ((arg1)->m_num);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_toCalculate_set(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("PlayerNumStruct::m_toCalculate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_toCalculate",1,"PlayerNumStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("PlayerNumStruct::m_toCalculate",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_toCalculate_set",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->m_toCalculate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_toCalculate_get(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("PlayerNumStruct::m_toCalculate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_toCalculate",1,"PlayerNumStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_toCalculate_get",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  result =  ((arg1)->m_toCalculate);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("PlayerNumStruct::m_reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_reason",1,"PlayerNumStruct *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("PlayerNumStruct::m_reason",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_reason_set",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->m_reason = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlayerNumStruct_m_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  PlayerNumStruct *arg1 = (PlayerNumStruct *) 0 ;
  QString result;
  
  SWIG_check_num_args("PlayerNumStruct::m_reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlayerNumStruct::m_reason",1,"PlayerNumStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PlayerNumStruct,0))){
    SWIG_fail_ptr("PlayerNumStruct_m_reason_get",1,SWIGTYPE_p_PlayerNumStruct);
  }
  
  result =  ((arg1)->m_reason);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PlayerNumStruct(void *obj) {
PlayerNumStruct *arg1 = (PlayerNumStruct *) obj;
delete arg1;
}
static swig_lua_method swig_PlayerNumStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_PlayerNumStruct_attributes[] = {
    { "m_type", _wrap_PlayerNumStruct_m_type_get, _wrap_PlayerNumStruct_m_type_set},
    { "m_num", _wrap_PlayerNumStruct_m_num_get, _wrap_PlayerNumStruct_m_num_set},
    { "m_toCalculate", _wrap_PlayerNumStruct_m_toCalculate_get, _wrap_PlayerNumStruct_m_toCalculate_set},
    { "m_reason", _wrap_PlayerNumStruct_m_reason_get, _wrap_PlayerNumStruct_m_reason_set},
    {0,0,0}
};
static swig_lua_attribute swig_PlayerNumStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PlayerNumStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_PlayerNumStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_PlayerNumStruct_bases[] = {0};
static const char *swig_PlayerNumStruct_base_names[] = {0};
static swig_lua_class _wrap_class_PlayerNumStruct = { "PlayerNumStruct", &SWIGTYPE_p_PlayerNumStruct,_wrap_new_PlayerNumStruct, swig_delete_PlayerNumStruct, swig_PlayerNumStruct_methods, swig_PlayerNumStruct_attributes, { "PlayerNumStruct", swig_PlayerNumStruct_cls_methods, swig_PlayerNumStruct_cls_attributes, swig_PlayerNumStruct_cls_constants }, swig_PlayerNumStruct_bases, swig_PlayerNumStruct_base_names };

static int _wrap_Card_AllSuits_get(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit *result = 0 ;
  
  SWIG_check_num_args("Card::AllSuits",0,0)
  result = (Card::Suit *)(Card::Suit *)Card::AllSuits;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card__Suit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getSuitString(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getSuitString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getSuitString",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getSuitString",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getSuitString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isRed(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isRed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isRed",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isRed",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isRed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isBlack(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isBlack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isBlack",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isBlack",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isBlack();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getId(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("Card::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getId",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getId",1,SWIGTYPE_p_Card);
  }
  
  result = (int)((Card const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_setId(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Card::setId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setId",1,"Card *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Card::setId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setId",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getEffectiveId(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("Card::getEffectiveId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getEffectiveId",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getEffectiveId",1,SWIGTYPE_p_Card);
  }
  
  result = (int)((Card const *)arg1)->getEffectiveId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getNumber(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("Card::getNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getNumber",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getNumber",1,SWIGTYPE_p_Card);
  }
  
  result = (int)((Card const *)arg1)->getNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_setNumber(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Card::setNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setNumber",1,"Card *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Card::setNumber",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setNumber",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumber(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getNumberString(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getNumberString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getNumberString",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getNumberString",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getNumberString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getSuit(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card::Suit result;
  
  SWIG_check_num_args("Card::getSuit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getSuit",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getSuit",1,SWIGTYPE_p_Card);
  }
  
  result = (Card::Suit)((Card const *)arg1)->getSuit();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_setSuit(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card::Suit arg2 ;
  
  SWIG_check_num_args("Card::setSuit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setSuit",1,"Card *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Card::setSuit",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setSuit",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  (arg1)->setSuit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_sameColorWith(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::sameColorWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::sameColorWith",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::sameColorWith",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_sameColorWith",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_sameColorWith",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->sameColorWith((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getColor(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card::Color result;
  
  SWIG_check_num_args("Card::getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getColor",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getColor",1,SWIGTYPE_p_Card);
  }
  
  result = (Card::Color)((Card const *)arg1)->getColor();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getFullName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("Card::getFullName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getFullName",1,"Card const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Card::getFullName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getFullName",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Card const *)arg1)->getFullName(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getFullName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getFullName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getFullName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getFullName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getFullName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getFullName(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Card_getFullName__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Card_getFullName__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_getFullName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::getFullName(bool) const\n"
    "    Card::getFullName() const\n");
  lua_error(L);return 0;
}


static int _wrap_Card_getLogName(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getLogName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getLogName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getLogName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getLogName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getName(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getSkillName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("Card::getSkillName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getSkillName",1,"Card const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Card::getSkillName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getSkillName",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Card const *)arg1)->getSkillName(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getSkillName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getSkillName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getSkillName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getSkillName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getSkillName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getSkillName(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Card_getSkillName__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Card_getSkillName__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_getSkillName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::getSkillName(bool) const\n"
    "    Card::getSkillName() const\n");
  lua_error(L);return 0;
}


static int _wrap_Card_setSkillName(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Card::setSkillName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setSkillName",1,"Card *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Card::setSkillName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setSkillName",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setSkillName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("Card::getDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getDescription",1,"Card const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Card::getDescription",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getDescription",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Card const *)arg1)->getDescription(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getDescription",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getDescription",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getDescription();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Card_getDescription__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Card_getDescription__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_getDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::getDescription(bool) const\n"
    "    Card::getDescription() const\n");
  lua_error(L);return 0;
}


static int _wrap_Card_isMute(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isMute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isMute",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isMute",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isMute();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_willThrow(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::willThrow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::willThrow",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_willThrow",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->willThrow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_canRecast(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::canRecast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::canRecast",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_canRecast",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->canRecast();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_hasPreAction(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::hasPreAction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::hasPreAction",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_hasPreAction",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->hasPreAction();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getHandlingMethod(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card::HandlingMethod result;
  
  SWIG_check_num_args("Card::getHandlingMethod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getHandlingMethod",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getHandlingMethod",1,SWIGTYPE_p_Card);
  }
  
  result = (Card::HandlingMethod)((Card const *)arg1)->getHandlingMethod();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Card::setFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setFlags",1,"Card const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Card::setFlags",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setFlags",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ((Card const *)arg1)->setFlags((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_hasFlag(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::hasFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::hasFlag",1,"Card const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Card::hasFlag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_hasFlag",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Card const *)arg1)->hasFlag((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_clearFlags(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  
  SWIG_check_num_args("Card::clearFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::clearFlags",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_clearFlags",1,SWIGTYPE_p_Card);
  }
  
  ((Card const *)arg1)->clearFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getPackage(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getPackage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getPackage",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getPackage",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getPackage();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getClassName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getClassName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isVirtualCard(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isVirtualCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isVirtualCard",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isVirtualCard",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isVirtualCard();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isEquipped(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isEquipped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isEquipped",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isEquipped",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isEquipped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getCommonEffectName(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getCommonEffectName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getCommonEffectName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getCommonEffectName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getCommonEffectName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_match(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::match",1,"Card const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Card::match",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_match",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Card const *)arg1)->match((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_addSubcard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Card::addSubcard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::addSubcard",1,"Card *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Card::addSubcard",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_addSubcard",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->addSubcard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_addSubcard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Card::addSubcard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::addSubcard",1,"Card *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::addSubcard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_addSubcard",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_addSubcard",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->addSubcard((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_addSubcard(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Card_addSubcard__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Card_addSubcard__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_addSubcard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::addSubcard(int)\n"
    "    Card::addSubcard(Card const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Card_getSubcards(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Card::getSubcards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getSubcards",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getSubcards",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getSubcards();
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_clearSubcards(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  
  SWIG_check_num_args("Card::clearSubcards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::clearSubcards",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_clearSubcards",1,SWIGTYPE_p_Card);
  }
  
  (arg1)->clearSubcards();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_subcardString(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::subcardString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::subcardString",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_subcardString",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->subcardString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_addSubcards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  
  SWIG_check_num_args("Card::addSubcards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::addSubcards",1,"Card *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::addSubcards",2,"QList< Card const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_addSubcards",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("Card_addSubcards",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  (arg1)->addSubcards((QList< Card const * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_addSubcards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QList< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Card::addSubcards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::addSubcards",1,"Card *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::addSubcards",2,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_addSubcards",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Card_addSubcards",2,SWIGTYPE_p_QListT_int_t);
  }
  
  (arg1)->addSubcards((QList< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_addSubcards(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Card_addSubcards__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Card_addSubcards__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_addSubcards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::addSubcards(QList< Card const * > const &)\n"
    "    Card::addSubcards(QList< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Card_subcardsLength(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("Card::subcardsLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::subcardsLength",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_subcardsLength",1,SWIGTYPE_p_Card);
  }
  
  result = (int)((Card const *)arg1)->subcardsLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getType(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getType",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getType",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getSubtype",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getSubtype",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card::CardType result;
  
  SWIG_check_num_args("Card::getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getTypeId",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getTypeId",1,SWIGTYPE_p_Card);
  }
  
  result = (Card::CardType)((Card const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isNDTrick(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isNDTrick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isNDTrick",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isNDTrick",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isNDTrick();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_targetFixed(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::targetFixed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::targetFixed",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_targetFixed",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->targetFixed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_targetsFeasible(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::targetsFeasible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::targetsFeasible",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::targetsFeasible",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Card::targetsFeasible",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_targetsFeasible",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("Card_targetsFeasible",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_targetsFeasible",3,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Card const *)arg1)->targetsFeasible((QList< Player const * > const &)*arg2,(Player const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_targetFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  Player *arg4 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::targetFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::targetFilter",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::targetFilter",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Card::targetFilter",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Card::targetFilter",4,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_targetFilter",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("Card_targetFilter",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_targetFilter",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_targetFilter",4,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Card const *)arg1)->targetFilter((QList< Player const * > const &)*arg2,(Player const *)arg3,(Player const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_targetFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  Player *arg4 = (Player *) 0 ;
  int *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("Card::targetFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::targetFilter",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::targetFilter",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Card::targetFilter",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Card::targetFilter",4,"Player const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Card::targetFilter",5,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_targetFilter",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("Card_targetFilter",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_targetFilter",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_targetFilter",4,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Card_targetFilter",5,SWIGTYPE_p_int);
  }
  
  result = (bool)((Card const *)arg1)->targetFilter((QList< Player const * > const &)*arg2,(Player const *)arg3,(Player const *)arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_targetFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Card_targetFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Card_targetFilter__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_targetFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::targetFilter(QList< Player const * > const &,Player const *,Player const *) const\n"
    "    Card::targetFilter(QList< Player const * > const &,Player const *,Player const *,int &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Card_isAvailable(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isAvailable",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::isAvailable",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isAvailable",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_isAvailable",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((Card const *)arg1)->isAvailable((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getRealCard(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Card::getRealCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getRealCard",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getRealCard",1,SWIGTYPE_p_Card);
  }
  
  result = (Card *)((Card const *)arg1)->getRealCard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_validate(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  CardUseStruct *arg2 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Card::validate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::validate",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::validate",2,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_validate",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Card_validate",2,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (Card *)((Card const *)arg1)->validate(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_validateInResponse(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Card::validateInResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::validateInResponse",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::validateInResponse",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_validateInResponse",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Card_validateInResponse",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)((Card const *)arg1)->validateInResponse(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_doPreAction(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("Card::doPreAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::doPreAction",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::doPreAction",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Card::doPreAction",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_doPreAction",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Card_doPreAction",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Card_doPreAction",3,SWIGTYPE_p_CardUseStruct);
  }
  
  ((Card const *)arg1)->doPreAction(arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_onUse(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("Card::onUse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::onUse",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::onUse",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Card::onUse",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_onUse",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Card_onUse",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Card_onUse",3,SWIGTYPE_p_CardUseStruct);
  }
  
  ((Card const *)arg1)->onUse(arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_use(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Room *arg2 = (Room *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg4 = 0 ;
  
  SWIG_check_num_args("Card::use",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::use",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::use",2,"Room *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Card::use",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Card::use",4,"QList< ServerPlayer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_use",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Card_use",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Card_use",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Card_use",4,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  ((Card const *)arg1)->use(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_onEffect(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Card::onEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::onEffect",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::onEffect",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_onEffect",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("Card_onEffect",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  ((Card const *)arg1)->onEffect((CardEffectStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isCancelable(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isCancelable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isCancelable",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::isCancelable",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isCancelable",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("Card_isCancelable",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (bool)((Card const *)arg1)->isCancelable((CardEffectStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_checkTargetModSkillShow(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  CardUseStruct *arg2 = 0 ;
  QStringList result;
  
  SWIG_check_num_args("Card::checkTargetModSkillShow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::checkTargetModSkillShow",1,"Card const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Card::checkTargetModSkillShow",2,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_checkTargetModSkillShow",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Card_checkTargetModSkillShow",2,SWIGTYPE_p_CardUseStruct);
  }
  
  result = ((Card const *)arg1)->checkTargetModSkillShow((CardUseStruct const &)*arg2);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_showSkill(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::showSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::showSkill",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_showSkill",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->showSkill();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_setShowSkill(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Card::setShowSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setShowSkill",1,"Card *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Card::setShowSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setShowSkill",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setShowSkill((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isKindOf",1,"Card const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Card::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isKindOf",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Card const *)arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_getFlags(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Card::getFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getFlags",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getFlags",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getFlags();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isModified(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isModified",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isModified",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isModified",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isModified();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_onNullified(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Card::onNullified",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::onNullified",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::onNullified",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_onNullified",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Card_onNullified",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((Card const *)arg1)->onNullified(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_CompareByNumber(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::CompareByNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::CompareByNumber",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::CompareByNumber",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_CompareByNumber",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_CompareByNumber",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)Card::CompareByNumber((Card const *)arg1,(Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_CompareBySuit(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::CompareBySuit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::CompareBySuit",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::CompareBySuit",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_CompareBySuit",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_CompareBySuit",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)Card::CompareBySuit((Card const *)arg1,(Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_CompareByType(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::CompareByType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::CompareByType",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::CompareByType",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_CompareByType",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_CompareByType",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)Card::CompareByType((Card const *)arg1,(Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_Clone(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Card::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::Clone",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_Clone",1,SWIGTYPE_p_Card);
  }
  
  result = (Card *)Card::Clone((Card const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_Suit2String(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  QString result;
  
  SWIG_check_num_args("Card::Suit2String",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Card::Suit2String",1,"Card::Suit");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  result = Card::Suit2String(arg1);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_S_UNKNOWN_CARD_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("Card::S_UNKNOWN_CARD_ID",0,0)
  result = (int)(int)Card::S_UNKNOWN_CARD_ID;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_Parse(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Card::Parse",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Card::Parse",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Card *)Card::Parse((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("Card::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toString",1,"Card const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Card::toString",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toString",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Card const *)arg1)->toString(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toString",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toString",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->toString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Card_toString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Card_toString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Card_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Card::toString(bool) const\n"
    "    Card::toString() const\n");
  lua_error(L);return 0;
}


static int _wrap_Card_getEffectName(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  QString result;
  
  SWIG_check_num_args("Card::getEffectName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::getEffectName",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_getEffectName",1,SWIGTYPE_p_Card);
  }
  
  result = ((Card const *)arg1)->getEffectName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_isTransferable(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::isTransferable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::isTransferable",1,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_isTransferable",1,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Card const *)arg1)->isTransferable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_setTransferable(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Card::setTransferable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::setTransferable",1,"Card *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Card::setTransferable",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_setTransferable",1,SWIGTYPE_p_Card);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTransferable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toEquipCard(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  EquipCard *result = 0 ;
  
  SWIG_check_num_args("Card::toEquipCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toEquipCard",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toEquipCard",1,SWIGTYPE_p_Card);
  }
  
  result = (EquipCard *)Card_toEquipCard(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EquipCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toWeapon(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Weapon *result = 0 ;
  
  SWIG_check_num_args("Card::toWeapon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toWeapon",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toWeapon",1,SWIGTYPE_p_Card);
  }
  
  result = (Weapon *)Card_toWeapon(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Weapon,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toArmor(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Armor *result = 0 ;
  
  SWIG_check_num_args("Card::toArmor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toArmor",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toArmor",1,SWIGTYPE_p_Card);
  }
  
  result = (Armor *)Card_toArmor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Armor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toTreasure(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Treasure *result = 0 ;
  
  SWIG_check_num_args("Card::toTreasure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toTreasure",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toTreasure",1,SWIGTYPE_p_Card);
  }
  
  result = (Treasure *)Card_toTreasure(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Treasure,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toWrapped(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Card::toWrapped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toWrapped",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toWrapped",1,SWIGTYPE_p_Card);
  }
  
  result = (WrappedCard *)Card_toWrapped(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_toTrick(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  TrickCard *result = 0 ;
  
  SWIG_check_num_args("Card::toTrick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::toTrick",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_toTrick",1,SWIGTYPE_p_Card);
  }
  
  result = (TrickCard *)Card_toTrick(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TrickCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_cardOnUse(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("Card::cardOnUse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::cardOnUse",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::cardOnUse",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Card::cardOnUse",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_cardOnUse",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Card_cardOnUse",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Card_cardOnUse",3,SWIGTYPE_p_CardUseStruct);
  }
  
  Card_cardOnUse((Card const *)arg1,arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Card_cardIsAvailable(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Card::cardIsAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Card::cardIsAvailable",1,"Card const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Card::cardIsAvailable",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Card_cardIsAvailable",1,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Card_cardIsAvailable",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)Card_cardIsAvailable((Card const *)arg1,(Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Card(void *obj) {
Card *arg1 = (Card *) obj;
delete arg1;
}
static swig_lua_method swig_Card_methods[] = {
    {"getSuitString", _wrap_Card_getSuitString}, 
    {"isRed", _wrap_Card_isRed}, 
    {"isBlack", _wrap_Card_isBlack}, 
    {"getId", _wrap_Card_getId}, 
    {"setId", _wrap_Card_setId}, 
    {"getEffectiveId", _wrap_Card_getEffectiveId}, 
    {"getNumber", _wrap_Card_getNumber}, 
    {"setNumber", _wrap_Card_setNumber}, 
    {"getNumberString", _wrap_Card_getNumberString}, 
    {"getSuit", _wrap_Card_getSuit}, 
    {"setSuit", _wrap_Card_setSuit}, 
    {"sameColorWith", _wrap_Card_sameColorWith}, 
    {"getColor", _wrap_Card_getColor}, 
    {"getFullName", _wrap_Card_getFullName}, 
    {"getLogName", _wrap_Card_getLogName}, 
    {"getName", _wrap_Card_getName}, 
    {"getSkillName", _wrap_Card_getSkillName}, 
    {"setSkillName", _wrap_Card_setSkillName}, 
    {"getDescription", _wrap_Card_getDescription}, 
    {"isMute", _wrap_Card_isMute}, 
    {"willThrow", _wrap_Card_willThrow}, 
    {"canRecast", _wrap_Card_canRecast}, 
    {"hasPreAction", _wrap_Card_hasPreAction}, 
    {"getHandlingMethod", _wrap_Card_getHandlingMethod}, 
    {"setFlags", _wrap_Card_setFlags}, 
    {"hasFlag", _wrap_Card_hasFlag}, 
    {"clearFlags", _wrap_Card_clearFlags}, 
    {"getPackage", _wrap_Card_getPackage}, 
    {"getClassName", _wrap_Card_getClassName}, 
    {"isVirtualCard", _wrap_Card_isVirtualCard}, 
    {"isEquipped", _wrap_Card_isEquipped}, 
    {"getCommonEffectName", _wrap_Card_getCommonEffectName}, 
    {"match", _wrap_Card_match}, 
    {"addSubcard", _wrap_Card_addSubcard}, 
    {"getSubcards", _wrap_Card_getSubcards}, 
    {"clearSubcards", _wrap_Card_clearSubcards}, 
    {"subcardString", _wrap_Card_subcardString}, 
    {"addSubcards", _wrap_Card_addSubcards}, 
    {"subcardsLength", _wrap_Card_subcardsLength}, 
    {"getType", _wrap_Card_getType}, 
    {"getSubtype", _wrap_Card_getSubtype}, 
    {"getTypeId", _wrap_Card_getTypeId}, 
    {"isNDTrick", _wrap_Card_isNDTrick}, 
    {"targetFixed", _wrap_Card_targetFixed}, 
    {"targetsFeasible", _wrap_Card_targetsFeasible}, 
    {"targetFilter", _wrap_Card_targetFilter}, 
    {"isAvailable", _wrap_Card_isAvailable}, 
    {"getRealCard", _wrap_Card_getRealCard}, 
    {"validate", _wrap_Card_validate}, 
    {"validateInResponse", _wrap_Card_validateInResponse}, 
    {"doPreAction", _wrap_Card_doPreAction}, 
    {"onUse", _wrap_Card_onUse}, 
    {"use", _wrap_Card_use}, 
    {"onEffect", _wrap_Card_onEffect}, 
    {"isCancelable", _wrap_Card_isCancelable}, 
    {"checkTargetModSkillShow", _wrap_Card_checkTargetModSkillShow}, 
    {"showSkill", _wrap_Card_showSkill}, 
    {"setShowSkill", _wrap_Card_setShowSkill}, 
    {"isKindOf", _wrap_Card_isKindOf}, 
    {"getFlags", _wrap_Card_getFlags}, 
    {"isModified", _wrap_Card_isModified}, 
    {"onNullified", _wrap_Card_onNullified}, 
    {"toString", _wrap_Card_toString}, 
    {"getEffectName", _wrap_Card_getEffectName}, 
    {"isTransferable", _wrap_Card_isTransferable}, 
    {"setTransferable", _wrap_Card_setTransferable}, 
    {"toEquipCard", _wrap_Card_toEquipCard}, 
    {"toWeapon", _wrap_Card_toWeapon}, 
    {"toArmor", _wrap_Card_toArmor}, 
    {"toTreasure", _wrap_Card_toTreasure}, 
    {"toWrapped", _wrap_Card_toWrapped}, 
    {"toTrick", _wrap_Card_toTrick}, 
    {"cardOnUse", _wrap_Card_cardOnUse}, 
    {"cardIsAvailable", _wrap_Card_cardIsAvailable}, 
    {0,0}
};
static swig_lua_attribute swig_Card_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Card_cls_attributes[] = {
    { "AllSuits", _wrap_Card_AllSuits_get, SWIG_Lua_set_immutable},
    { "S_UNKNOWN_CARD_ID", _wrap_Card_S_UNKNOWN_CARD_ID_get, SWIG_Lua_set_immutable},
    {0,0,0}
};
static swig_lua_method swig_Card_cls_methods[] = {
    {"CompareByNumber", _wrap_Card_CompareByNumber}, 
    {"CompareBySuit", _wrap_Card_CompareBySuit}, 
    {"CompareByType", _wrap_Card_CompareByType}, 
    {"Clone", _wrap_Card_Clone}, 
    {"Suit2String", _wrap_Card_Suit2String}, 
    {"Parse", _wrap_Card_Parse}, 
    {0,0}
};
static swig_lua_const_info swig_Card_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Spade", Card::Spade)},
    {SWIG_LUA_CONSTTAB_INT("Club", Card::Club)},
    {SWIG_LUA_CONSTTAB_INT("Heart", Card::Heart)},
    {SWIG_LUA_CONSTTAB_INT("Diamond", Card::Diamond)},
    {SWIG_LUA_CONSTTAB_INT("NoSuitBlack", Card::NoSuitBlack)},
    {SWIG_LUA_CONSTTAB_INT("NoSuitRed", Card::NoSuitRed)},
    {SWIG_LUA_CONSTTAB_INT("NoSuit", Card::NoSuit)},
    {SWIG_LUA_CONSTTAB_INT("SuitToBeDecided", Card::SuitToBeDecided)},
    {SWIG_LUA_CONSTTAB_INT("Red", Card::Red)},
    {SWIG_LUA_CONSTTAB_INT("Black", Card::Black)},
    {SWIG_LUA_CONSTTAB_INT("Colorless", Card::Colorless)},
    {SWIG_LUA_CONSTTAB_INT("MethodNone", Card::MethodNone)},
    {SWIG_LUA_CONSTTAB_INT("MethodUse", Card::MethodUse)},
    {SWIG_LUA_CONSTTAB_INT("MethodResponse", Card::MethodResponse)},
    {SWIG_LUA_CONSTTAB_INT("MethodDiscard", Card::MethodDiscard)},
    {SWIG_LUA_CONSTTAB_INT("MethodRecast", Card::MethodRecast)},
    {SWIG_LUA_CONSTTAB_INT("MethodPindian", Card::MethodPindian)},
    {SWIG_LUA_CONSTTAB_INT("TypeSkill", Card::TypeSkill)},
    {SWIG_LUA_CONSTTAB_INT("TypeBasic", Card::TypeBasic)},
    {SWIG_LUA_CONSTTAB_INT("TypeTrick", Card::TypeTrick)},
    {SWIG_LUA_CONSTTAB_INT("TypeEquip", Card::TypeEquip)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Card_bases[] = {0,0};
static const char *swig_Card_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_Card = { "Card", &SWIGTYPE_p_Card,0, swig_delete_Card, swig_Card_methods, swig_Card_attributes, { "Card", swig_Card_cls_methods, swig_Card_cls_attributes, swig_Card_cls_constants }, swig_Card_bases, swig_Card_base_names };

static int _wrap_new_WrappedCard(lua_State* L) {
  int SWIG_arg = 0;
  Card *arg1 = (Card *) 0 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("WrappedCard::WrappedCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::WrappedCard",1,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("new_WrappedCard",1,SWIGTYPE_p_Card);
  }
  
  result = (WrappedCard *)new WrappedCard(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_setId(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("WrappedCard::setId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::setId",1,"WrappedCard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WrappedCard::setId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_setId",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_setNumber(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("WrappedCard::setNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::setNumber",1,"WrappedCard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WrappedCard::setNumber",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_setNumber",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumber(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_setSuit(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Card::Suit arg2 ;
  
  SWIG_check_num_args("WrappedCard::setSuit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::setSuit",1,"WrappedCard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WrappedCard::setSuit",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_setSuit",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  (arg1)->setSuit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_setSkillName(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("WrappedCard::setSkillName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::setSkillName",1,"WrappedCard *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("WrappedCard::setSkillName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_setSkillName",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setSkillName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_takeOver(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("WrappedCard::takeOver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::takeOver",1,"WrappedCard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::takeOver",2,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_takeOver",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("WrappedCard_takeOver",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->takeOver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_copyEverythingFrom(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("WrappedCard::copyEverythingFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::copyEverythingFrom",1,"WrappedCard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::copyEverythingFrom",2,"Card *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_copyEverythingFrom",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("WrappedCard_copyEverythingFrom",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->copyEverythingFrom(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_setModified(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("WrappedCard::setModified",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::setModified",1,"WrappedCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("WrappedCard::setModified",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_setModified",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setModified(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_onNullified(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("WrappedCard::onNullified",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::onNullified",1,"WrappedCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::onNullified",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_onNullified",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("WrappedCard_onNullified",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((WrappedCard const *)arg1)->onNullified(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_isModified(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isModified",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isModified",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isModified",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->isModified();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getClassName",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getClassName",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = ((WrappedCard const *)arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getRealCard(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("WrappedCard::getRealCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getRealCard",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getRealCard",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (Card *)((WrappedCard const *)arg1)->getRealCard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_isMute(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isMute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isMute",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isMute",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->isMute();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_willThrow(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::willThrow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::willThrow",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_willThrow",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->willThrow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_canRecast(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::canRecast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::canRecast",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_canRecast",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->canRecast();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getHandlingMethod(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Card::HandlingMethod result;
  
  SWIG_check_num_args("WrappedCard::getHandlingMethod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getHandlingMethod",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getHandlingMethod",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (Card::HandlingMethod)((WrappedCard const *)arg1)->getHandlingMethod();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_hasPreAction(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::hasPreAction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::hasPreAction",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_hasPreAction",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->hasPreAction();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getPackage(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::getPackage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getPackage",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getPackage",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = ((WrappedCard const *)arg1)->getPackage();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_isVirtualCard(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isVirtualCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isVirtualCard",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isVirtualCard",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->isVirtualCard();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getCommonEffectName(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::getCommonEffectName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getCommonEffectName",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getCommonEffectName",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = ((WrappedCard const *)arg1)->getCommonEffectName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_match(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::match",1,"WrappedCard const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("WrappedCard::match",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_match",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((WrappedCard const *)arg1)->match((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("WrappedCard::setFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::setFlags",1,"WrappedCard const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("WrappedCard::setFlags",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_setFlags",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ((WrappedCard const *)arg1)->setFlags((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getType(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getType",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getType",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = ((WrappedCard const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getSubtype",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getSubtype",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = ((WrappedCard const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Card::CardType result;
  
  SWIG_check_num_args("WrappedCard::getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::getTypeId",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_getTypeId",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (Card::CardType)((WrappedCard const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::toString",1,"WrappedCard const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("WrappedCard::toString",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_toString",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((WrappedCard const *)arg1)->toString(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("WrappedCard::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::toString",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_toString",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = ((WrappedCard const *)arg1)->toString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_toString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WrappedCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WrappedCard_toString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WrappedCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_WrappedCard_toString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WrappedCard_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    WrappedCard::toString(bool) const\n"
    "    WrappedCard::toString() const\n");
  lua_error(L);return 0;
}


static int _wrap_WrappedCard_isNDTrick(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isNDTrick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isNDTrick",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isNDTrick",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->isNDTrick();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_targetFixed(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::targetFixed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::targetFixed",1,"WrappedCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_targetFixed",1,SWIGTYPE_p_WrappedCard);
  }
  
  result = (bool)((WrappedCard const *)arg1)->targetFixed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_targetsFeasible(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::targetsFeasible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::targetsFeasible",1,"WrappedCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WrappedCard::targetsFeasible",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("WrappedCard::targetsFeasible",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_targetsFeasible",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("WrappedCard_targetsFeasible",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("WrappedCard_targetsFeasible",3,SWIGTYPE_p_Player);
  }
  
  result = (bool)((WrappedCard const *)arg1)->targetsFeasible((QList< Player const * > const &)*arg2,(Player const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_targetFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  Player *arg4 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::targetFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::targetFilter",1,"WrappedCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WrappedCard::targetFilter",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("WrappedCard::targetFilter",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("WrappedCard::targetFilter",4,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",4,SWIGTYPE_p_Player);
  }
  
  result = (bool)((WrappedCard const *)arg1)->targetFilter((QList< Player const * > const &)*arg2,(Player const *)arg3,(Player const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_targetFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  Player *arg4 = (Player *) 0 ;
  int *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::targetFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::targetFilter",1,"WrappedCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WrappedCard::targetFilter",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("WrappedCard::targetFilter",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("WrappedCard::targetFilter",4,"Player const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("WrappedCard::targetFilter",5,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",4,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("WrappedCard_targetFilter",5,SWIGTYPE_p_int);
  }
  
  result = (bool)((WrappedCard const *)arg1)->targetFilter((QList< Player const * > const &)*arg2,(Player const *)arg3,(Player const *)arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_targetFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WrappedCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_WrappedCard_targetFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WrappedCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Player_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_WrappedCard_targetFilter__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WrappedCard_targetFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    WrappedCard::targetFilter(QList< Player const * > const &,Player const *,Player const *) const\n"
    "    WrappedCard::targetFilter(QList< Player const * > const &,Player const *,Player const *,int &) const\n");
  lua_error(L);return 0;
}


static int _wrap_WrappedCard_isAvailable(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isAvailable",1,"WrappedCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::isAvailable",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isAvailable",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("WrappedCard_isAvailable",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((WrappedCard const *)arg1)->isAvailable((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_validate(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  CardUseStruct *arg2 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("WrappedCard::validate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::validate",1,"WrappedCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WrappedCard::validate",2,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_validate",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("WrappedCard_validate",2,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (Card *)((WrappedCard const *)arg1)->validate(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_validateInResponse(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("WrappedCard::validateInResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::validateInResponse",1,"WrappedCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::validateInResponse",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_validateInResponse",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("WrappedCard_validateInResponse",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)((WrappedCard const *)arg1)->validateInResponse(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_doPreAction(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("WrappedCard::doPreAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::doPreAction",1,"WrappedCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::doPreAction",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WrappedCard::doPreAction",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_doPreAction",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("WrappedCard_doPreAction",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("WrappedCard_doPreAction",3,SWIGTYPE_p_CardUseStruct);
  }
  
  ((WrappedCard const *)arg1)->doPreAction(arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_onUse(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("WrappedCard::onUse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::onUse",1,"WrappedCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::onUse",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WrappedCard::onUse",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_onUse",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("WrappedCard_onUse",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("WrappedCard_onUse",3,SWIGTYPE_p_CardUseStruct);
  }
  
  ((WrappedCard const *)arg1)->onUse(arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_use(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg4 = 0 ;
  
  SWIG_check_num_args("WrappedCard::use",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::use",1,"WrappedCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WrappedCard::use",2,"Room *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("WrappedCard::use",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("WrappedCard::use",4,"QList< ServerPlayer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_use",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("WrappedCard_use",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("WrappedCard_use",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("WrappedCard_use",4,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  ((WrappedCard const *)arg1)->use(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_onEffect(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  
  SWIG_check_num_args("WrappedCard::onEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::onEffect",1,"WrappedCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WrappedCard::onEffect",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_onEffect",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("WrappedCard_onEffect",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  ((WrappedCard const *)arg1)->onEffect((CardEffectStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_isCancelable(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isCancelable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isCancelable",1,"WrappedCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WrappedCard::isCancelable",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isCancelable",1,SWIGTYPE_p_WrappedCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("WrappedCard_isCancelable",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (bool)((WrappedCard const *)arg1)->isCancelable((CardEffectStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedCard_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  WrappedCard *arg1 = (WrappedCard *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("WrappedCard::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WrappedCard::isKindOf",1,"WrappedCard const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("WrappedCard::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WrappedCard,0))){
    SWIG_fail_ptr("WrappedCard_isKindOf",1,SWIGTYPE_p_WrappedCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((WrappedCard const *)arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WrappedCard(void *obj) {
WrappedCard *arg1 = (WrappedCard *) obj;
delete arg1;
}
static swig_lua_method swig_WrappedCard_methods[] = {
    {"setId", _wrap_WrappedCard_setId}, 
    {"setNumber", _wrap_WrappedCard_setNumber}, 
    {"setSuit", _wrap_WrappedCard_setSuit}, 
    {"setSkillName", _wrap_WrappedCard_setSkillName}, 
    {"takeOver", _wrap_WrappedCard_takeOver}, 
    {"copyEverythingFrom", _wrap_WrappedCard_copyEverythingFrom}, 
    {"setModified", _wrap_WrappedCard_setModified}, 
    {"onNullified", _wrap_WrappedCard_onNullified}, 
    {"isModified", _wrap_WrappedCard_isModified}, 
    {"getClassName", _wrap_WrappedCard_getClassName}, 
    {"getRealCard", _wrap_WrappedCard_getRealCard}, 
    {"isMute", _wrap_WrappedCard_isMute}, 
    {"willThrow", _wrap_WrappedCard_willThrow}, 
    {"canRecast", _wrap_WrappedCard_canRecast}, 
    {"getHandlingMethod", _wrap_WrappedCard_getHandlingMethod}, 
    {"hasPreAction", _wrap_WrappedCard_hasPreAction}, 
    {"getPackage", _wrap_WrappedCard_getPackage}, 
    {"isVirtualCard", _wrap_WrappedCard_isVirtualCard}, 
    {"getCommonEffectName", _wrap_WrappedCard_getCommonEffectName}, 
    {"match", _wrap_WrappedCard_match}, 
    {"setFlags", _wrap_WrappedCard_setFlags}, 
    {"getType", _wrap_WrappedCard_getType}, 
    {"getSubtype", _wrap_WrappedCard_getSubtype}, 
    {"getTypeId", _wrap_WrappedCard_getTypeId}, 
    {"toString", _wrap_WrappedCard_toString}, 
    {"isNDTrick", _wrap_WrappedCard_isNDTrick}, 
    {"targetFixed", _wrap_WrappedCard_targetFixed}, 
    {"targetsFeasible", _wrap_WrappedCard_targetsFeasible}, 
    {"targetFilter", _wrap_WrappedCard_targetFilter}, 
    {"isAvailable", _wrap_WrappedCard_isAvailable}, 
    {"validate", _wrap_WrappedCard_validate}, 
    {"validateInResponse", _wrap_WrappedCard_validateInResponse}, 
    {"doPreAction", _wrap_WrappedCard_doPreAction}, 
    {"onUse", _wrap_WrappedCard_onUse}, 
    {"use", _wrap_WrappedCard_use}, 
    {"onEffect", _wrap_WrappedCard_onEffect}, 
    {"isCancelable", _wrap_WrappedCard_isCancelable}, 
    {"isKindOf", _wrap_WrappedCard_isKindOf}, 
    {0,0}
};
static swig_lua_attribute swig_WrappedCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_WrappedCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WrappedCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_WrappedCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WrappedCard_bases[] = {0,0};
static const char *swig_WrappedCard_base_names[] = {"Card *",0};
static swig_lua_class _wrap_class_WrappedCard = { "WrappedCard", &SWIGTYPE_p_WrappedCard,_wrap_new_WrappedCard, swig_delete_WrappedCard, swig_WrappedCard_methods, swig_WrappedCard_attributes, { "WrappedCard", swig_WrappedCard_cls_methods, swig_WrappedCard_cls_attributes, swig_WrappedCard_cls_constants }, swig_WrappedCard_bases, swig_WrappedCard_base_names };

static int _wrap_new_SkillCard(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *result = 0 ;
  
  SWIG_check_num_args("SkillCard::SkillCard",0,0)
  result = (SkillCard *)new SkillCard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SkillCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_setUserString(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SkillCard::setUserString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::setUserString",1,"SkillCard *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SkillCard::setUserString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_setUserString",1,SWIGTYPE_p_SkillCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setUserString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_getUserString(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("SkillCard::getUserString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::getUserString",1,"SkillCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_getUserString",1,SWIGTYPE_p_SkillCard);
  }
  
  result = ((SkillCard const *)arg1)->getUserString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("SkillCard::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::getSubtype",1,"SkillCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_getSubtype",1,SWIGTYPE_p_SkillCard);
  }
  
  result = ((SkillCard const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_getType(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("SkillCard::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::getType",1,"SkillCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_getType",1,SWIGTYPE_p_SkillCard);
  }
  
  result = ((SkillCard const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  Card::CardType result;
  
  SWIG_check_num_args("SkillCard::getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::getTypeId",1,"SkillCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_getTypeId",1,SWIGTYPE_p_SkillCard);
  }
  
  result = (Card::CardType)((SkillCard const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("SkillCard::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::toString",1,"SkillCard const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SkillCard::toString",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_toString",1,SWIGTYPE_p_SkillCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((SkillCard const *)arg1)->toString(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SkillCard *arg1 = (SkillCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("SkillCard::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillCard::toString",1,"SkillCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillCard,0))){
    SWIG_fail_ptr("SkillCard_toString",1,SWIGTYPE_p_SkillCard);
  }
  
  result = ((SkillCard const *)arg1)->toString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillCard_toString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SkillCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SkillCard_toString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SkillCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SkillCard_toString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SkillCard_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SkillCard::toString(bool) const\n"
    "    SkillCard::toString() const\n");
  lua_error(L);return 0;
}


static void swig_delete_SkillCard(void *obj) {
SkillCard *arg1 = (SkillCard *) obj;
delete arg1;
}
static swig_lua_method swig_SkillCard_methods[] = {
    {"setUserString", _wrap_SkillCard_setUserString}, 
    {"getUserString", _wrap_SkillCard_getUserString}, 
    {"getSubtype", _wrap_SkillCard_getSubtype}, 
    {"getType", _wrap_SkillCard_getType}, 
    {"getTypeId", _wrap_SkillCard_getTypeId}, 
    {"toString", _wrap_SkillCard_toString}, 
    {0,0}
};
static swig_lua_attribute swig_SkillCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SkillCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SkillCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SkillCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SkillCard_bases[] = {0,0};
static const char *swig_SkillCard_base_names[] = {"Card *",0};
static swig_lua_class _wrap_class_SkillCard = { "SkillCard", &SWIGTYPE_p_SkillCard,_wrap_new_SkillCard, swig_delete_SkillCard, swig_SkillCard_methods, swig_SkillCard_attributes, { "SkillCard", swig_SkillCard_cls_methods, swig_SkillCard_cls_attributes, swig_SkillCard_cls_constants }, swig_SkillCard_bases, swig_SkillCard_base_names };

static int _wrap_new_DummyCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DummyCard *result = 0 ;
  
  SWIG_check_num_args("DummyCard::DummyCard",0,0)
  result = (DummyCard *)new DummyCard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DummyCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DummyCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  QList< int > *arg1 = 0 ;
  DummyCard *result = 0 ;
  
  SWIG_check_num_args("DummyCard::DummyCard",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DummyCard::DummyCard",1,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("new_DummyCard",1,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (DummyCard *)new DummyCard((QList< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DummyCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DummyCard(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DummyCard__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DummyCard__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DummyCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DummyCard::DummyCard()\n"
    "    DummyCard::DummyCard(QList< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DummyCard_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  DummyCard *arg1 = (DummyCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("DummyCard::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DummyCard::getSubtype",1,"DummyCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DummyCard,0))){
    SWIG_fail_ptr("DummyCard_getSubtype",1,SWIGTYPE_p_DummyCard);
  }
  
  result = ((DummyCard const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyCard_getType(lua_State* L) {
  int SWIG_arg = 0;
  DummyCard *arg1 = (DummyCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("DummyCard::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DummyCard::getType",1,"DummyCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DummyCard,0))){
    SWIG_fail_ptr("DummyCard_getType",1,SWIGTYPE_p_DummyCard);
  }
  
  result = ((DummyCard const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyCard_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DummyCard *arg1 = (DummyCard *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("DummyCard::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DummyCard::toString",1,"DummyCard const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DummyCard::toString",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DummyCard,0))){
    SWIG_fail_ptr("DummyCard_toString",1,SWIGTYPE_p_DummyCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((DummyCard const *)arg1)->toString(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyCard_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DummyCard *arg1 = (DummyCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("DummyCard::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DummyCard::toString",1,"DummyCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DummyCard,0))){
    SWIG_fail_ptr("DummyCard_toString",1,SWIGTYPE_p_DummyCard);
  }
  
  result = ((DummyCard const *)arg1)->toString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyCard_toString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DummyCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DummyCard_toString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DummyCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_DummyCard_toString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DummyCard_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DummyCard::toString(bool) const\n"
    "    DummyCard::toString() const\n");
  lua_error(L);return 0;
}


static void swig_delete_DummyCard(void *obj) {
DummyCard *arg1 = (DummyCard *) obj;
delete arg1;
}
static swig_lua_method swig_DummyCard_methods[] = {
    {"getSubtype", _wrap_DummyCard_getSubtype}, 
    {"getType", _wrap_DummyCard_getType}, 
    {"toString", _wrap_DummyCard_toString}, 
    {0,0}
};
static swig_lua_attribute swig_DummyCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DummyCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DummyCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DummyCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DummyCard_bases[] = {0,0};
static const char *swig_DummyCard_base_names[] = {"SkillCard *",0};
static swig_lua_class _wrap_class_DummyCard = { "DummyCard", &SWIGTYPE_p_DummyCard,_wrap_new_DummyCard, swig_delete_DummyCard, swig_DummyCard_methods, swig_DummyCard_attributes, { "DummyCard", swig_DummyCard_cls_methods, swig_DummyCard_cls_attributes, swig_DummyCard_cls_constants }, swig_DummyCard_bases, swig_DummyCard_base_names };

static int _wrap_new_ArraySummonCard(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ArraySummonCard *result = 0 ;
  
  SWIG_check_num_args("ArraySummonCard::ArraySummonCard",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ArraySummonCard::ArraySummonCard",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ArraySummonCard *)new ArraySummonCard((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArraySummonCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArraySummonCard_validate(lua_State* L) {
  int SWIG_arg = 0;
  ArraySummonCard *arg1 = (ArraySummonCard *) 0 ;
  CardUseStruct *arg2 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("ArraySummonCard::validate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ArraySummonCard::validate",1,"ArraySummonCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ArraySummonCard::validate",2,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArraySummonCard,0))){
    SWIG_fail_ptr("ArraySummonCard_validate",1,SWIGTYPE_p_ArraySummonCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("ArraySummonCard_validate",2,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (Card *)((ArraySummonCard const *)arg1)->validate(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArraySummonCard(void *obj) {
ArraySummonCard *arg1 = (ArraySummonCard *) obj;
delete arg1;
}
static swig_lua_method swig_ArraySummonCard_methods[] = {
    {"validate", _wrap_ArraySummonCard_validate}, 
    {0,0}
};
static swig_lua_attribute swig_ArraySummonCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ArraySummonCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArraySummonCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ArraySummonCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ArraySummonCard_bases[] = {0,0};
static const char *swig_ArraySummonCard_base_names[] = {"SkillCard *",0};
static swig_lua_class _wrap_class_ArraySummonCard = { "ArraySummonCard", &SWIGTYPE_p_ArraySummonCard,_wrap_new_ArraySummonCard, swig_delete_ArraySummonCard, swig_ArraySummonCard_methods, swig_ArraySummonCard_attributes, { "ArraySummonCard", swig_ArraySummonCard_cls_methods, swig_ArraySummonCard_cls_attributes, swig_ArraySummonCard_cls_constants }, swig_ArraySummonCard_bases, swig_ArraySummonCard_base_names };

static int _wrap_new_Package__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Package::Type arg2 ;
  Package *result = 0 ;
  
  SWIG_check_num_args("Package::Package",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Package::Package",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Package::Package",2,"Package::Type");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (Package::Type)(int)lua_tonumber(L, 2);
  result = (Package *)new Package((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Package,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Package__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Package *result = 0 ;
  
  SWIG_check_num_args("Package::Package",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Package::Package",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Package *)new Package((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Package,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Package(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Package__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Package__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Package'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Package::Package(char const *,Package::Type)\n"
    "    Package::Package(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Package_insertRelatedSkills(lua_State* L) {
  int SWIG_arg = 0;
  Package *arg1 = (Package *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Package::insertRelatedSkills",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Package::insertRelatedSkills",1,"Package *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Package::insertRelatedSkills",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Package::insertRelatedSkills",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("Package_insertRelatedSkills",1,SWIGTYPE_p_Package);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->insertRelatedSkills((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Package(void *obj) {
Package *arg1 = (Package *) obj;
delete arg1;
}
static swig_lua_method swig_Package_methods[] = {
    {"insertRelatedSkills", _wrap_Package_insertRelatedSkills}, 
    {0,0}
};
static swig_lua_attribute swig_Package_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Package_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Package_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Package_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("GeneralPack", Package::GeneralPack)},
    {SWIG_LUA_CONSTTAB_INT("CardPack", Package::CardPack)},
    {SWIG_LUA_CONSTTAB_INT("MixedPack", Package::MixedPack)},
    {SWIG_LUA_CONSTTAB_INT("SpecialPack", Package::SpecialPack)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Package_bases[] = {0,0};
static const char *swig_Package_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_Package = { "Package", &SWIGTYPE_p_Package,_wrap_new_Package, swig_delete_Package, swig_Package_methods, swig_Package_attributes, { "Package", swig_Package_cls_methods, swig_Package_cls_attributes, swig_Package_cls_constants }, swig_Package_bases, swig_Package_base_names };

static int _wrap_new_Engine(lua_State* L) {
  int SWIG_arg = 0;
  Engine *result = 0 ;
  
  SWIG_check_num_args("Engine::Engine",0,0)
  result = (Engine *)new Engine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Engine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_addTranslationEntry(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Engine::addTranslationEntry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::addTranslationEntry",1,"Engine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::addTranslationEntry",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Engine::addTranslationEntry",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_addTranslationEntry",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->addTranslationEntry((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::translate",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::translate",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_translate",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Engine const *)arg1)->translate((char const *)arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::translate",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::translate",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Engine::translate",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_translate",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = ((Engine const *)arg1)->translate((char const *)arg2,(char const *)arg3);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_translate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Engine_translate__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Engine_translate__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::translate(char const *) const\n"
    "    Engine::translate(char const *,char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_addPackage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Package *arg2 = (Package *) 0 ;
  
  SWIG_check_num_args("Engine::addPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::addPackage",1,"Engine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::addPackage",2,"Package *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_addPackage",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Package,0))){
    SWIG_fail_ptr("Engine_addPackage",2,SWIGTYPE_p_Package);
  }
  
  (arg1)->addPackage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_addBanPackage(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Engine::addBanPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::addBanPackage",1,"Engine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::addBanPackage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_addBanPackage",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addBanPackage((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getBanPackages(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getBanPackages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getBanPackages",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getBanPackages",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getBanPackages();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_cloneCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Engine::cloneCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::cloneCard",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::cloneCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_cloneCard",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Engine_cloneCard",2,SWIGTYPE_p_Card);
  }
  
  result = (Card *)((Engine const *)arg1)->cloneCard((Card const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_cloneCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Card::Suit arg3 ;
  int arg4 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Engine::cloneCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::cloneCard",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::cloneCard",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Engine::cloneCard",3,"Card::Suit");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Engine::cloneCard",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_cloneCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Card::Suit)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (Card *)((Engine const *)arg1)->cloneCard((char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_cloneCard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Card::Suit arg3 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Engine::cloneCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::cloneCard",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::cloneCard",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Engine::cloneCard",3,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_cloneCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Card::Suit)(int)lua_tonumber(L, 3);
  result = (Card *)((Engine const *)arg1)->cloneCard((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_cloneCard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Engine::cloneCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::cloneCard",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::cloneCard",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_cloneCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Card *)((Engine const *)arg1)->cloneCard((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_cloneCard(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Engine_cloneCard__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Engine_cloneCard__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Engine_cloneCard__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Engine_cloneCard__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_cloneCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::cloneCard(Card const *) const\n"
    "    Engine::cloneCard(char const *,Card::Suit,int) const\n"
    "    Engine::cloneCard(char const *,Card::Suit) const\n"
    "    Engine::cloneCard(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_cloneSkillCard(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  SkillCard *result = 0 ;
  
  SWIG_check_num_args("Engine::cloneSkillCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::cloneSkillCard",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::cloneSkillCard",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_cloneSkillCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (SkillCard *)((Engine const *)arg1)->cloneSkillCard((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SkillCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getVersion(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getVersion",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getVersion",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getVersion();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getVersionName(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getVersionName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getVersionName",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getVersionName",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getVersionName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getMODName(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getMODName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getMODName",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getMODName",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getMODName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getExtensions(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getExtensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getExtensions",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getExtensions",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getExtensions();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getKingdoms(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getKingdoms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getKingdoms",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getKingdoms",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getKingdoms();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getChattingEasyTexts(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getChattingEasyTexts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getChattingEasyTexts",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getChattingEasyTexts",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getChattingEasyTexts();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getSetupString(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getSetupString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getSetupString",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getSetupString",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getSetupString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getModeName(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getModeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getModeName",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getModeName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getModeName",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Engine const *)arg1)->getModeName((char const *)arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getPlayerCount(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::getPlayerCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getPlayerCount",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getPlayerCount",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getPlayerCount",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)((Engine const *)arg1)->getPlayerCount((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getRoles(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getRoles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getRoles",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getRoles",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getRoles",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Engine const *)arg1)->getRoles((char const *)arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getRoleList(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getRoleList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getRoleList",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getRoleList",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getRoleList",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Engine const *)arg1)->getRoleList((char const *)arg2);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getPattern(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  CardPattern *result = 0 ;
  
  SWIG_check_num_args("Engine::getPattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getPattern",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getPattern",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getPattern",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (CardPattern *)((Engine const *)arg1)->getPattern((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CardPattern,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_matchExpPattern(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Player *arg3 = (Player *) 0 ;
  Card *arg4 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Engine::matchExpPattern",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::matchExpPattern",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::matchExpPattern",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Engine::matchExpPattern",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Engine::matchExpPattern",4,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_matchExpPattern",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_matchExpPattern",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Engine_matchExpPattern",4,SWIGTYPE_p_Card);
  }
  
  result = (bool)((Engine const *)arg1)->matchExpPattern((char const *)arg2,(Player const *)arg3,(Card const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getCardHandlingMethod(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Card::HandlingMethod result;
  
  SWIG_check_num_args("Engine::getCardHandlingMethod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getCardHandlingMethod",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getCardHandlingMethod",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getCardHandlingMethod",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Card::HandlingMethod)((Engine const *)arg1)->getCardHandlingMethod((char const *)arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getRelatedSkills(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< Skill const * > result;
  
  SWIG_check_num_args("Engine::getRelatedSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getRelatedSkills",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getRelatedSkills",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getRelatedSkills",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Engine const *)arg1)->getRelatedSkills((char const *)arg2);
  {
    QList< Skill const * > * resultptr = new QList< Skill const * >((const QList< Skill const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Skill_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getMainSkill(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("Engine::getMainSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getMainSkill",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getMainSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getMainSkill",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Skill *)((Engine const *)arg1)->getMainSkill((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getModScenarioNames(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getModScenarioNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getModScenarioNames",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getModScenarioNames",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getModScenarioNames();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_addScenario(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Scenario *arg2 = (Scenario *) 0 ;
  
  SWIG_check_num_args("Engine::addScenario",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::addScenario",1,"Engine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::addScenario",2,"Scenario *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_addScenario",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Scenario,0))){
    SWIG_fail_ptr("Engine_addScenario",2,SWIGTYPE_p_Scenario);
  }
  
  (arg1)->addScenario(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getScenario(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Scenario *result = 0 ;
  
  SWIG_check_num_args("Engine::getScenario",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getScenario",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getScenario",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getScenario",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Scenario *)((Engine const *)arg1)->getScenario((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Scenario,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_addPackage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Engine::addPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::addPackage",1,"Engine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::addPackage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_addPackage",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addPackage((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_addPackage(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Package, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Engine_addPackage__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Engine_addPackage__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_addPackage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::addPackage(Package *)\n"
    "    Engine::addPackage(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_getGeneral(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  General *result = 0 ;
  
  SWIG_check_num_args("Engine::getGeneral",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getGeneral",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getGeneral",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getGeneral",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (General *)((Engine const *)arg1)->getGeneral((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_General,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getGeneralCount__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("Engine::getGeneralCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getGeneralCount",1,"Engine const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Engine::getGeneralCount",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getGeneralCount",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((Engine const *)arg1)->getGeneralCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getGeneralCount__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::getGeneralCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getGeneralCount",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getGeneralCount",1,SWIGTYPE_p_Engine);
  }
  
  result = (int)((Engine const *)arg1)->getGeneralCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getGeneralCount(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Engine_getGeneralCount__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Engine_getGeneralCount__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_getGeneralCount'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::getGeneralCount(bool) const\n"
    "    Engine::getGeneralCount() const\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_getSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("Engine::getSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getSkill",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getSkill",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Skill *)((Engine const *)arg1)->getSkill((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  EquipCard *arg2 = (EquipCard *) 0 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("Engine::getSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getSkill",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::getSkill",2,"EquipCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getSkill",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("Engine_getSkill",2,SWIGTYPE_p_EquipCard);
  }
  
  result = (Skill *)((Engine const *)arg1)->getSkill((EquipCard const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getSkill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_EquipCard, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Engine_getSkill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Engine_getSkill__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_getSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::getSkill(char const *) const\n"
    "    Engine::getSkill(EquipCard const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_getSkillNames(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getSkillNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getSkillNames",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getSkillNames",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getSkillNames();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getTriggerSkill(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  TriggerSkill *result = 0 ;
  
  SWIG_check_num_args("Engine::getTriggerSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getTriggerSkill",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getTriggerSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getTriggerSkill",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TriggerSkill *)((Engine const *)arg1)->getTriggerSkill((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TriggerSkill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getViewAsSkill(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  ViewAsSkill *result = 0 ;
  
  SWIG_check_num_args("Engine::getViewAsSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getViewAsSkill",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::getViewAsSkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getViewAsSkill",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ViewAsSkill *)((Engine const *)arg1)->getViewAsSkill((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ViewAsSkill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_addSkills(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QList< Skill const * > *arg2 = 0 ;
  
  SWIG_check_num_args("Engine::addSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::addSkills",1,"Engine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Engine::addSkills",2,"QList< Skill const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_addSkills",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Skill_const_p_t,0))){
    SWIG_fail_ptr("Engine_addSkills",2,SWIGTYPE_p_QListT_Skill_const_p_t);
  }
  
  (arg1)->addSkills((QList< Skill const * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getCardCount(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::getCardCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getCardCount",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getCardCount",1,SWIGTYPE_p_Engine);
  }
  
  result = (int)((Engine const *)arg1)->getCardCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getEngineCard(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Engine::getEngineCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getEngineCard",1,"Engine const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Engine::getEngineCard",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getEngineCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Card *)((Engine const *)arg1)->getEngineCard(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getCard(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Engine::getCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getCard",1,"Engine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Engine::getCard",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Card *)(arg1)->getCard(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getWrappedCard(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  WrappedCard *result = 0 ;
  
  SWIG_check_num_args("Engine::getWrappedCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getWrappedCard",1,"Engine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Engine::getWrappedCard",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getWrappedCard",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (WrappedCard *)(arg1)->getWrappedCard(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WrappedCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getRandomGenerals(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getRandomGenerals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getRandomGenerals",1,"Engine const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Engine::getRandomGenerals",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getRandomGenerals",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Engine const *)arg1)->getRandomGenerals(arg2);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getRandomCards(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Engine::getRandomCards",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getRandomCards",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getRandomCards",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getRandomCards();
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getRandomGeneralName(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getRandomGeneralName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getRandomGeneralName",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getRandomGeneralName",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getRandomGeneralName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getLimitedGeneralNames(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getLimitedGeneralNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getLimitedGeneralNames",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getLimitedGeneralNames",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getLimitedGeneralNames();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getGeneralNames(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Engine::getGeneralNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getGeneralNames",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getGeneralNames",1,SWIGTYPE_p_Engine);
  }
  
  result = ((Engine const *)arg1)->getGeneralNames();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_playSystemAudioEffect(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Engine::playSystemAudioEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::playSystemAudioEffect",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::playSystemAudioEffect",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_playSystemAudioEffect",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ((Engine const *)arg1)->playSystemAudioEffect((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_playAudioEffect(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Engine::playAudioEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::playAudioEffect",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::playAudioEffect",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_playAudioEffect",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ((Engine const *)arg1)->playAudioEffect((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_playSkillAudioEffect(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Engine::playSkillAudioEffect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::playSkillAudioEffect",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::playSkillAudioEffect",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Engine::playSkillAudioEffect",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_playSkillAudioEffect",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  ((Engine const *)arg1)->playSkillAudioEffect((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctDistance(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Player *arg3 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::correctDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctDistance",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctDistance",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Engine::correctDistance",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctDistance",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_correctDistance",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_correctDistance",3,SWIGTYPE_p_Player);
  }
  
  result = (int)((Engine const *)arg1)->correctDistance((Player const *)arg2,(Player const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctMaxCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool arg3 ;
  MaxCardsType::MaxCardsCount arg4 ;
  int result;
  
  SWIG_check_num_args("Engine::correctMaxCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctMaxCards",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctMaxCards",2,"ServerPlayer const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Engine::correctMaxCards",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Engine::correctMaxCards",4,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctMaxCards",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Engine_correctMaxCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 4);
  result = (int)((Engine const *)arg1)->correctMaxCards((ServerPlayer const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctMaxCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("Engine::correctMaxCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctMaxCards",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctMaxCards",2,"ServerPlayer const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Engine::correctMaxCards",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctMaxCards",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Engine_correctMaxCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((Engine const *)arg1)->correctMaxCards((ServerPlayer const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctMaxCards__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::correctMaxCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctMaxCards",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctMaxCards",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctMaxCards",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Engine_correctMaxCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((Engine const *)arg1)->correctMaxCards((ServerPlayer const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctMaxCards(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Engine_correctMaxCards__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Engine_correctMaxCards__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Engine_correctMaxCards__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_correctMaxCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::correctMaxCards(ServerPlayer const *,bool,MaxCardsType::MaxCardsCount) const\n"
    "    Engine::correctMaxCards(ServerPlayer const *,bool) const\n"
    "    Engine::correctMaxCards(ServerPlayer const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_correctCardTarget(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  TargetModSkill::ModType arg2 ;
  Player *arg3 = (Player *) 0 ;
  Card *arg4 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::correctCardTarget",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctCardTarget",1,"Engine const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Engine::correctCardTarget",2,"TargetModSkill::ModType const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Engine::correctCardTarget",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Engine::correctCardTarget",4,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctCardTarget",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (TargetModSkill::ModType const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_correctCardTarget",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Engine_correctCardTarget",4,SWIGTYPE_p_Card);
  }
  
  result = (int)((Engine const *)arg1)->correctCardTarget(arg2,(Player const *)arg3,(Card const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctAttackRange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  SWIG_check_num_args("Engine::correctAttackRange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctAttackRange",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctAttackRange",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Engine::correctAttackRange",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Engine::correctAttackRange",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctAttackRange",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_correctAttackRange",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (int)((Engine const *)arg1)->correctAttackRange((Player const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctAttackRange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("Engine::correctAttackRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctAttackRange",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctAttackRange",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Engine::correctAttackRange",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctAttackRange",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_correctAttackRange",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((Engine const *)arg1)->correctAttackRange((Player const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctAttackRange__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Player *arg2 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("Engine::correctAttackRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::correctAttackRange",1,"Engine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Engine::correctAttackRange",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_correctAttackRange",1,SWIGTYPE_p_Engine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Engine_correctAttackRange",2,SWIGTYPE_p_Player);
  }
  
  result = (int)((Engine const *)arg1)->correctAttackRange((Player const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_correctAttackRange(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Engine_correctAttackRange__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Engine_correctAttackRange__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Engine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Engine_correctAttackRange__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Engine_correctAttackRange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Engine::correctAttackRange(Player const *,bool,bool) const\n"
    "    Engine::correctAttackRange(Player const *,bool) const\n"
    "    Engine::correctAttackRange(Player const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_currentRoom(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  Room *result = 0 ;
  
  SWIG_check_num_args("Engine::currentRoom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::currentRoom",1,"Engine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_currentRoom",1,SWIGTYPE_p_Engine);
  }
  
  result = (Room *)(arg1)->currentRoom();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Room,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getCurrentCardUsePattern(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getCurrentCardUsePattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getCurrentCardUsePattern",1,"Engine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getCurrentCardUsePattern",1,SWIGTYPE_p_Engine);
  }
  
  result = (arg1)->getCurrentCardUsePattern();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getCurrentCardUseReason(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  CardUseStruct::CardUseReason result;
  
  SWIG_check_num_args("Engine::getCurrentCardUseReason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getCurrentCardUseReason",1,"Engine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getCurrentCardUseReason",1,SWIGTYPE_p_Engine);
  }
  
  result = (CardUseStruct::CardUseReason)(arg1)->getCurrentCardUseReason();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_isGeneralHidden(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Engine::isGeneralHidden",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::isGeneralHidden",1,"Engine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Engine::isGeneralHidden",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_isGeneralHidden",1,SWIGTYPE_p_Engine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Engine const *)arg1)->isGeneralHidden((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getVersionNumber(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  QString result;
  
  SWIG_check_num_args("Engine::getVersionNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Engine::getVersionNumber",1,"Engine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Engine_getVersionNumber",1,SWIGTYPE_p_Engine);
  }
  
  result = Engine_getVersionNumber((Engine const *)arg1);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Engine(void *obj) {
Engine *arg1 = (Engine *) obj;
delete arg1;
}
static swig_lua_method swig_Engine_methods[] = {
    {"addTranslationEntry", _wrap_Engine_addTranslationEntry}, 
    {"translate", _wrap_Engine_translate}, 
    {"addBanPackage", _wrap_Engine_addBanPackage}, 
    {"getBanPackages", _wrap_Engine_getBanPackages}, 
    {"cloneCard", _wrap_Engine_cloneCard}, 
    {"cloneSkillCard", _wrap_Engine_cloneSkillCard}, 
    {"getVersion", _wrap_Engine_getVersion}, 
    {"getVersionName", _wrap_Engine_getVersionName}, 
    {"getMODName", _wrap_Engine_getMODName}, 
    {"getExtensions", _wrap_Engine_getExtensions}, 
    {"getKingdoms", _wrap_Engine_getKingdoms}, 
    {"getChattingEasyTexts", _wrap_Engine_getChattingEasyTexts}, 
    {"getSetupString", _wrap_Engine_getSetupString}, 
    {"getModeName", _wrap_Engine_getModeName}, 
    {"getPlayerCount", _wrap_Engine_getPlayerCount}, 
    {"getRoles", _wrap_Engine_getRoles}, 
    {"getRoleList", _wrap_Engine_getRoleList}, 
    {"getPattern", _wrap_Engine_getPattern}, 
    {"matchExpPattern", _wrap_Engine_matchExpPattern}, 
    {"getCardHandlingMethod", _wrap_Engine_getCardHandlingMethod}, 
    {"getRelatedSkills", _wrap_Engine_getRelatedSkills}, 
    {"getMainSkill", _wrap_Engine_getMainSkill}, 
    {"getModScenarioNames", _wrap_Engine_getModScenarioNames}, 
    {"addScenario", _wrap_Engine_addScenario}, 
    {"getScenario", _wrap_Engine_getScenario}, 
    {"addPackage", _wrap_Engine_addPackage}, 
    {"getGeneral", _wrap_Engine_getGeneral}, 
    {"getGeneralCount", _wrap_Engine_getGeneralCount}, 
    {"getSkill", _wrap_Engine_getSkill}, 
    {"getSkillNames", _wrap_Engine_getSkillNames}, 
    {"getTriggerSkill", _wrap_Engine_getTriggerSkill}, 
    {"getViewAsSkill", _wrap_Engine_getViewAsSkill}, 
    {"addSkills", _wrap_Engine_addSkills}, 
    {"getCardCount", _wrap_Engine_getCardCount}, 
    {"getEngineCard", _wrap_Engine_getEngineCard}, 
    {"getCard", _wrap_Engine_getCard}, 
    {"getWrappedCard", _wrap_Engine_getWrappedCard}, 
    {"getRandomGenerals", _wrap_Engine_getRandomGenerals}, 
    {"getRandomCards", _wrap_Engine_getRandomCards}, 
    {"getRandomGeneralName", _wrap_Engine_getRandomGeneralName}, 
    {"getLimitedGeneralNames", _wrap_Engine_getLimitedGeneralNames}, 
    {"getGeneralNames", _wrap_Engine_getGeneralNames}, 
    {"playSystemAudioEffect", _wrap_Engine_playSystemAudioEffect}, 
    {"playAudioEffect", _wrap_Engine_playAudioEffect}, 
    {"playSkillAudioEffect", _wrap_Engine_playSkillAudioEffect}, 
    {"correctDistance", _wrap_Engine_correctDistance}, 
    {"correctMaxCards", _wrap_Engine_correctMaxCards}, 
    {"correctCardTarget", _wrap_Engine_correctCardTarget}, 
    {"correctAttackRange", _wrap_Engine_correctAttackRange}, 
    {"currentRoom", _wrap_Engine_currentRoom}, 
    {"getCurrentCardUsePattern", _wrap_Engine_getCurrentCardUsePattern}, 
    {"getCurrentCardUseReason", _wrap_Engine_getCurrentCardUseReason}, 
    {"isGeneralHidden", _wrap_Engine_isGeneralHidden}, 
    {"getVersionNumber", _wrap_Engine_getVersionNumber}, 
    {0,0}
};
static swig_lua_attribute swig_Engine_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Engine_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Engine_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Engine_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Engine_bases[] = {0,0};
static const char *swig_Engine_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_Engine = { "Engine", &SWIGTYPE_p_Engine,_wrap_new_Engine, swig_delete_Engine, swig_Engine_methods, swig_Engine_attributes, { "Engine", swig_Engine_cls_methods, swig_Engine_cls_attributes, swig_Engine_cls_constants }, swig_Engine_bases, swig_Engine_base_names };

static int _wrap_Sanguosha_set(lua_State* L) {
  int SWIG_arg = 0;
  Engine *arg1 = (Engine *) 0 ;
  
  SWIG_check_num_args("Sanguosha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Sanguosha",1,"Engine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Engine,0))){
    SWIG_fail_ptr("Sanguosha_set",1,SWIGTYPE_p_Engine);
  }
  
  Sanguosha = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sanguosha_get(lua_State* L) {
  int SWIG_arg = 0;
  Engine *result = 0 ;
  
  SWIG_check_num_args("Sanguosha",0,0)
  result = (Engine *)Sanguosha;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Engine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Skill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Skill::Frequency arg2 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("Skill::Skill",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Skill::Skill",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Skill::Skill",2,"Skill::Frequency");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (Skill::Frequency)(int)lua_tonumber(L, 2);
  result = (Skill *)new Skill((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Skill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Skill *result = 0 ;
  
  SWIG_check_num_args("Skill::Skill",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Skill::Skill",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Skill *)new Skill((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Skill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Skill__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Skill__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Skill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Skill::Skill(char const *,Skill::Frequency)\n"
    "    Skill::Skill(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Skill_isLordSkill(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Skill::isLordSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::isLordSkill",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_isLordSkill",1,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Skill const *)arg1)->isLordSkill();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_isAttachedLordSkill(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Skill::isAttachedLordSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::isAttachedLordSkill",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_isAttachedLordSkill",1,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Skill const *)arg1)->isAttachedLordSkill();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool arg2 ;
  QString result;
  
  SWIG_check_num_args("Skill::getDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getDescription",1,"Skill const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Skill::getDescription",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getDescription",1,SWIGTYPE_p_Skill);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Skill const *)arg1)->getDescription(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  QString result;
  
  SWIG_check_num_args("Skill::getDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getDescription",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getDescription",1,SWIGTYPE_p_Skill);
  }
  
  result = ((Skill const *)arg1)->getDescription();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Skill_getDescription__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Skill_getDescription__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Skill_getDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Skill::getDescription(bool) const\n"
    "    Skill::getDescription() const\n");
  lua_error(L);return 0;
}


static int _wrap_Skill_getNotice(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  int arg2 ;
  QString result;
  
  SWIG_check_num_args("Skill::getNotice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getNotice",1,"Skill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Skill::getNotice",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getNotice",1,SWIGTYPE_p_Skill);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Skill const *)arg1)->getNotice(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Skill::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::isVisible",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_isVisible",1,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Skill const *)arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getEffectIndex(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("Skill::getEffectIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getEffectIndex",1,"Skill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Skill::getEffectIndex",2,"ServerPlayer const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Skill::getEffectIndex",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getEffectIndex",1,SWIGTYPE_p_Skill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Skill_getEffectIndex",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Skill_getEffectIndex",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((Skill const *)arg1)->getEffectIndex((ServerPlayer const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getDialog(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  QDialog *result = 0 ;
  
  SWIG_check_num_args("Skill::getDialog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getDialog",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getDialog",1,SWIGTYPE_p_Skill);
  }
  
  result = (QDialog *)((Skill const *)arg1)->getDialog();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QDialog,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_initMediaSource(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  
  SWIG_check_num_args("Skill::initMediaSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::initMediaSource",1,"Skill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_initMediaSource",1,SWIGTYPE_p_Skill);
  }
  
  (arg1)->initMediaSource();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_playAudioEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Skill::playAudioEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::playAudioEffect",1,"Skill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Skill::playAudioEffect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_playAudioEffect",1,SWIGTYPE_p_Skill);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((Skill const *)arg1)->playAudioEffect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_playAudioEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  
  SWIG_check_num_args("Skill::playAudioEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::playAudioEffect",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_playAudioEffect",1,SWIGTYPE_p_Skill);
  }
  
  ((Skill const *)arg1)->playAudioEffect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_playAudioEffect(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Skill_playAudioEffect__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Skill_playAudioEffect__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Skill_playAudioEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Skill::playAudioEffect(int) const\n"
    "    Skill::playAudioEffect() const\n");
  lua_error(L);return 0;
}


static int _wrap_Skill_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  Skill::Frequency result;
  
  SWIG_check_num_args("Skill::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getFrequency",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getFrequency",1,SWIGTYPE_p_Skill);
  }
  
  result = (Skill::Frequency)((Skill const *)arg1)->getFrequency();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getLimitMark(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  QString result;
  
  SWIG_check_num_args("Skill::getLimitMark",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getLimitMark",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getLimitMark",1,SWIGTYPE_p_Skill);
  }
  
  result = ((Skill const *)arg1)->getLimitMark();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_getSources(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Skill::getSources",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::getSources",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_getSources",1,SWIGTYPE_p_Skill);
  }
  
  result = ((Skill const *)arg1)->getSources();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_canPreshow(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Skill::canPreshow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::canPreshow",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_canPreshow",1,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Skill const *)arg1)->canPreshow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_relateToPlace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("Skill::relateToPlace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::relateToPlace",1,"Skill const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Skill::relateToPlace",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_relateToPlace",1,SWIGTYPE_p_Skill);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((Skill const *)arg1)->relateToPlace(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_relateToPlace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  bool result;
  
  SWIG_check_num_args("Skill::relateToPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::relateToPlace",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_relateToPlace",1,SWIGTYPE_p_Skill);
  }
  
  result = (bool)((Skill const *)arg1)->relateToPlace();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_relateToPlace(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Skill_relateToPlace__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Skill_relateToPlace__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Skill_relateToPlace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Skill::relateToPlace(bool) const\n"
    "    Skill::relateToPlace() const\n");
  lua_error(L);return 0;
}


static int _wrap_Skill_setRelateToPlace(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Skill::setRelateToPlace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::setRelateToPlace",1,"Skill *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Skill::setRelateToPlace",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_setRelateToPlace",1,SWIGTYPE_p_Skill);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setRelateToPlace((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skill_toTriggerSkill(lua_State* L) {
  int SWIG_arg = 0;
  Skill *arg1 = (Skill *) 0 ;
  TriggerSkill *result = 0 ;
  
  SWIG_check_num_args("Skill::toTriggerSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Skill::toTriggerSkill",1,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Skill_toTriggerSkill",1,SWIGTYPE_p_Skill);
  }
  
  result = (TriggerSkill *)Skill_toTriggerSkill((Skill const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TriggerSkill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Skill(void *obj) {
Skill *arg1 = (Skill *) obj;
delete arg1;
}
static swig_lua_method swig_Skill_methods[] = {
    {"isLordSkill", _wrap_Skill_isLordSkill}, 
    {"isAttachedLordSkill", _wrap_Skill_isAttachedLordSkill}, 
    {"getDescription", _wrap_Skill_getDescription}, 
    {"getNotice", _wrap_Skill_getNotice}, 
    {"isVisible", _wrap_Skill_isVisible}, 
    {"getEffectIndex", _wrap_Skill_getEffectIndex}, 
    {"getDialog", _wrap_Skill_getDialog}, 
    {"initMediaSource", _wrap_Skill_initMediaSource}, 
    {"playAudioEffect", _wrap_Skill_playAudioEffect}, 
    {"getFrequency", _wrap_Skill_getFrequency}, 
    {"getLimitMark", _wrap_Skill_getLimitMark}, 
    {"getSources", _wrap_Skill_getSources}, 
    {"canPreshow", _wrap_Skill_canPreshow}, 
    {"relateToPlace", _wrap_Skill_relateToPlace}, 
    {"setRelateToPlace", _wrap_Skill_setRelateToPlace}, 
    {"toTriggerSkill", _wrap_Skill_toTriggerSkill}, 
    {0,0}
};
static swig_lua_attribute swig_Skill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Skill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Skill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Skill_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Frequent", Skill::Frequent)},
    {SWIG_LUA_CONSTTAB_INT("NotFrequent", Skill::NotFrequent)},
    {SWIG_LUA_CONSTTAB_INT("Compulsory", Skill::Compulsory)},
    {SWIG_LUA_CONSTTAB_INT("Limited", Skill::Limited)},
    {SWIG_LUA_CONSTTAB_INT("Wake", Skill::Wake)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Skill_bases[] = {0,0};
static const char *swig_Skill_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_Skill = { "Skill", &SWIGTYPE_p_Skill,_wrap_new_Skill, swig_delete_Skill, swig_Skill_methods, swig_Skill_attributes, { "Skill", swig_Skill_cls_methods, swig_Skill_cls_attributes, swig_Skill_cls_constants }, swig_Skill_bases, swig_Skill_base_names };

static int _wrap_new_TriggerSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TriggerSkill *result = 0 ;
  
  SWIG_check_num_args("TriggerSkill::TriggerSkill",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TriggerSkill::TriggerSkill",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (TriggerSkill *)new TriggerSkill((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TriggerSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_getViewAsSkill(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  ViewAsSkill *result = 0 ;
  
  SWIG_check_num_args("TriggerSkill::getViewAsSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::getViewAsSkill",1,"TriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_getViewAsSkill",1,SWIGTYPE_p_TriggerSkill);
  }
  
  result = (ViewAsSkill *)((TriggerSkill const *)arg1)->getViewAsSkill();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ViewAsSkill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_getTriggerEvents(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  SwigValueWrapper< QList< enum TriggerEvent > > result;
  
  SWIG_check_num_args("TriggerSkill::getTriggerEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::getTriggerEvents",1,"TriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_getTriggerEvents",1,SWIGTYPE_p_TriggerSkill);
  }
  
  result = ((TriggerSkill const *)arg1)->getTriggerEvents();
  {
    QList< TriggerEvent > * resultptr = new QList< TriggerEvent >((const QList< TriggerEvent > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_TriggerEvent_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  int result;
  
  SWIG_check_num_args("TriggerSkill::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::getPriority",1,"TriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_getPriority",1,SWIGTYPE_p_TriggerSkill);
  }
  
  result = (int)((TriggerSkill const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_triggerable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriggerSkill::triggerable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::triggerable",1,"TriggerSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TriggerSkill::triggerable",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",1,SWIGTYPE_p_TriggerSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((TriggerSkill const *)arg1)->triggerable((ServerPlayer const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_triggerable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer **arg6 = 0 ;
  QStringList result;
  
  SWIG_check_num_args("TriggerSkill::triggerable",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::triggerable",1,"TriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerSkill::triggerable",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TriggerSkill::triggerable",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TriggerSkill::triggerable",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TriggerSkill::triggerable",5,"QVariant &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("TriggerSkill::triggerable",6,"ServerPlayer *&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",1,SWIGTYPE_p_TriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_triggerable",6,SWIGTYPE_p_p_ServerPlayer);
  }
  
  result = ((TriggerSkill const *)arg1)->triggerable(arg2,arg3,arg4,*arg5,*arg6);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_triggerable(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TriggerSkill_triggerable__SWIG_0(L);
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_TriggerSkill_triggerable__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TriggerSkill_triggerable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TriggerSkill::triggerable(ServerPlayer const *) const\n"
    "    TriggerSkill::triggerable(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *&) const\n");
  lua_error(L);return 0;
}


static int _wrap_TriggerSkill_cost__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer *arg6 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriggerSkill::cost",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::cost",1,"TriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerSkill::cost",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TriggerSkill::cost",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TriggerSkill::cost",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TriggerSkill::cost",5,"QVariant &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("TriggerSkill::cost",6,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_cost",1,SWIGTYPE_p_TriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("TriggerSkill_cost",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_cost",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TriggerSkill_cost",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_cost",6,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((TriggerSkill const *)arg1)->cost(arg2,arg3,arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_cost__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("TriggerSkill::cost",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::cost",1,"TriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerSkill::cost",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TriggerSkill::cost",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TriggerSkill::cost",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TriggerSkill::cost",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_cost",1,SWIGTYPE_p_TriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("TriggerSkill_cost",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_cost",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TriggerSkill_cost",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((TriggerSkill const *)arg1)->cost(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_cost(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_TriggerSkill_cost__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_TriggerSkill_cost__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TriggerSkill_cost'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TriggerSkill::cost(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *) const\n"
    "    TriggerSkill::cost(TriggerEvent,Room *,ServerPlayer *,QVariant &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TriggerSkill_effect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer *arg6 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriggerSkill::effect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::effect",1,"TriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerSkill::effect",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TriggerSkill::effect",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TriggerSkill::effect",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TriggerSkill::effect",5,"QVariant &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("TriggerSkill::effect",6,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_effect",1,SWIGTYPE_p_TriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("TriggerSkill_effect",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_effect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TriggerSkill_effect",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_effect",6,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((TriggerSkill const *)arg1)->effect(arg2,arg3,arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_effect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("TriggerSkill::effect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::effect",1,"TriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerSkill::effect",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TriggerSkill::effect",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TriggerSkill::effect",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TriggerSkill::effect",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_effect",1,SWIGTYPE_p_TriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("TriggerSkill_effect",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_effect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TriggerSkill_effect",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((TriggerSkill const *)arg1)->effect(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_effect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_TriggerSkill_effect__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_TriggerSkill_effect__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TriggerSkill_effect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TriggerSkill::effect(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *) const\n"
    "    TriggerSkill::effect(TriggerEvent,Room *,ServerPlayer *,QVariant &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TriggerSkill_isGlobal(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  bool result;
  
  SWIG_check_num_args("TriggerSkill::isGlobal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::isGlobal",1,"TriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_isGlobal",1,SWIGTYPE_p_TriggerSkill);
  }
  
  result = (bool)((TriggerSkill const *)arg1)->isGlobal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_toBattleArraySkill(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  BattleArraySkill *result = 0 ;
  
  SWIG_check_num_args("TriggerSkill::toBattleArraySkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::toBattleArraySkill",1,"TriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_toBattleArraySkill",1,SWIGTYPE_p_TriggerSkill);
  }
  
  result = (BattleArraySkill *)TriggerSkill_toBattleArraySkill((TriggerSkill const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BattleArraySkill,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerSkill_TriggerSkillTriggerable(lua_State* L) {
  int SWIG_arg = 0;
  TriggerSkill *arg1 = (TriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  QMap< ServerPlayer *,QStringList > result;
  
  SWIG_check_num_args("TriggerSkill::TriggerSkillTriggerable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerSkill::TriggerSkillTriggerable",1,"TriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerSkill::TriggerSkillTriggerable",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TriggerSkill::TriggerSkillTriggerable",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TriggerSkill::TriggerSkillTriggerable",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TriggerSkill::TriggerSkillTriggerable",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("TriggerSkill_TriggerSkillTriggerable",1,SWIGTYPE_p_TriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("TriggerSkill_TriggerSkillTriggerable",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TriggerSkill_TriggerSkillTriggerable",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TriggerSkill_TriggerSkillTriggerable",5,SWIGTYPE_p_QVariant);
  }
  
  result = TriggerSkill_TriggerSkillTriggerable((TriggerSkill const *)arg1,arg2,arg3,arg4,*arg5);
  {
    QMap< ServerPlayer *,QStringList > * resultptr = new QMap< ServerPlayer *,QStringList >((const QMap< ServerPlayer *,QStringList > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QMapT_ServerPlayer_p_QStringList_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerSkill(void *obj) {
TriggerSkill *arg1 = (TriggerSkill *) obj;
delete arg1;
}
static swig_lua_method swig_TriggerSkill_methods[] = {
    {"getViewAsSkill", _wrap_TriggerSkill_getViewAsSkill}, 
    {"getTriggerEvents", _wrap_TriggerSkill_getTriggerEvents}, 
    {"getPriority", _wrap_TriggerSkill_getPriority}, 
    {"triggerable", _wrap_TriggerSkill_triggerable}, 
    {"cost", _wrap_TriggerSkill_cost}, 
    {"effect", _wrap_TriggerSkill_effect}, 
    {"isGlobal", _wrap_TriggerSkill_isGlobal}, 
    {"toBattleArraySkill", _wrap_TriggerSkill_toBattleArraySkill}, 
    {"TriggerSkillTriggerable", _wrap_TriggerSkill_TriggerSkillTriggerable}, 
    {0,0}
};
static swig_lua_attribute swig_TriggerSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TriggerSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TriggerSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TriggerSkill_bases[] = {0,0};
static const char *swig_TriggerSkill_base_names[] = {"Skill *",0};
static swig_lua_class _wrap_class_TriggerSkill = { "TriggerSkill", &SWIGTYPE_p_TriggerSkill,_wrap_new_TriggerSkill, swig_delete_TriggerSkill, swig_TriggerSkill_methods, swig_TriggerSkill_attributes, { "TriggerSkill", swig_TriggerSkill_cls_methods, swig_TriggerSkill_cls_attributes, swig_TriggerSkill_cls_constants }, swig_TriggerSkill_bases, swig_TriggerSkill_base_names };

static int _wrap_new_QThread(lua_State* L) {
  int SWIG_arg = 0;
  QThread *result = 0 ;
  
  SWIG_check_num_args("QThread::QThread",0,0)
  result = (QThread *)new QThread();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QThread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_QThread(void *obj) {
QThread *arg1 = (QThread *) obj;
delete arg1;
}
static swig_lua_method swig_QThread_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_QThread_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QThread_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QThread_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QThread_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QThread_bases[] = {0,0};
static const char *swig_QThread_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_QThread = { "QThread", &SWIGTYPE_p_QThread,_wrap_new_QThread, swig_delete_QThread, swig_QThread_methods, swig_QThread_attributes, { "QThread", swig_QThread_cls_methods, swig_QThread_cls_attributes, swig_QThread_cls_constants }, swig_QThread_bases, swig_QThread_base_names };

static int _wrap_new_LogMessage(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *result = 0 ;
  
  SWIG_check_num_args("LogMessage::LogMessage",0,0)
  result = (LogMessage *)new LogMessage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LogMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_toString(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString result;
  
  SWIG_check_num_args("LogMessage::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::toString",1,"LogMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_toString",1,SWIGTYPE_p_LogMessage);
  }
  
  result = ((LogMessage const *)arg1)->toString();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_type_set(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("LogMessage::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::type",1,"LogMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LogMessage::type",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_type_set",1,SWIGTYPE_p_LogMessage);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_type_get(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString result;
  
  SWIG_check_num_args("LogMessage::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::type",1,"LogMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_type_get",1,SWIGTYPE_p_LogMessage);
  }
  
  result =  ((arg1)->type);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_from_set(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LogMessage::from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::from",1,"LogMessage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LogMessage::from",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_from_set",1,SWIGTYPE_p_LogMessage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("LogMessage_from_set",2,SWIGTYPE_p_ServerPlayer);
  }
  
  if (arg1) (arg1)->from = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_from_get(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("LogMessage::from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::from",1,"LogMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_from_get",1,SWIGTYPE_p_LogMessage);
  }
  
  result = (ServerPlayer *) ((arg1)->from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_to_set(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QList< ServerPlayer * > *arg2 = (QList< ServerPlayer * > *) 0 ;
  
  SWIG_check_num_args("LogMessage::to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::to",1,"LogMessage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LogMessage::to",2,"QList< ServerPlayer * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_to_set",1,SWIGTYPE_p_LogMessage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("LogMessage_to_set",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  if (arg1) (arg1)->to = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_to_get(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QList< ServerPlayer * > *result = 0 ;
  
  SWIG_check_num_args("LogMessage::to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::to",1,"LogMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_to_get",1,SWIGTYPE_p_LogMessage);
  }
  
  result = (QList< ServerPlayer * > *)& ((arg1)->to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_ServerPlayer_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_card_str_set(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("LogMessage::card_str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::card_str",1,"LogMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LogMessage::card_str",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_card_str_set",1,SWIGTYPE_p_LogMessage);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->card_str = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_card_str_get(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString result;
  
  SWIG_check_num_args("LogMessage::card_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::card_str",1,"LogMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_card_str_get",1,SWIGTYPE_p_LogMessage);
  }
  
  result =  ((arg1)->card_str);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_arg_set(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("LogMessage::arg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::arg",1,"LogMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LogMessage::arg",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_arg_set",1,SWIGTYPE_p_LogMessage);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->arg = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_arg_get(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString result;
  
  SWIG_check_num_args("LogMessage::arg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::arg",1,"LogMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_arg_get",1,SWIGTYPE_p_LogMessage);
  }
  
  result =  ((arg1)->arg);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_arg2_set(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString arg2 ;
  
  SWIG_check_num_args("LogMessage::arg2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::arg2",1,"LogMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LogMessage::arg2",2,"QString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_arg2_set",1,SWIGTYPE_p_LogMessage);
  }
  
  arg2 = lua_tostring(L, 2); 
  if (arg1) (arg1)->arg2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage_arg2_get(lua_State* L) {
  int SWIG_arg = 0;
  LogMessage *arg1 = (LogMessage *) 0 ;
  QString result;
  
  SWIG_check_num_args("LogMessage::arg2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LogMessage::arg2",1,"LogMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("LogMessage_arg2_get",1,SWIGTYPE_p_LogMessage);
  }
  
  result =  ((arg1)->arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogMessage(void *obj) {
LogMessage *arg1 = (LogMessage *) obj;
delete arg1;
}
static swig_lua_method swig_LogMessage_methods[] = {
    {"toString", _wrap_LogMessage_toString}, 
    {0,0}
};
static swig_lua_attribute swig_LogMessage_attributes[] = {
    { "type", _wrap_LogMessage_type_get, _wrap_LogMessage_type_set},
    { "from", _wrap_LogMessage_from_get, _wrap_LogMessage_from_set},
    { "to", _wrap_LogMessage_to_get, _wrap_LogMessage_to_set},
    { "card_str", _wrap_LogMessage_card_str_get, _wrap_LogMessage_card_str_set},
    { "arg", _wrap_LogMessage_arg_get, _wrap_LogMessage_arg_set},
    { "arg2", _wrap_LogMessage_arg2_get, _wrap_LogMessage_arg2_set},
    {0,0,0}
};
static swig_lua_attribute swig_LogMessage_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LogMessage_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LogMessage_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LogMessage_bases[] = {0};
static const char *swig_LogMessage_base_names[] = {0};
static swig_lua_class _wrap_class_LogMessage = { "LogMessage", &SWIGTYPE_p_LogMessage,_wrap_new_LogMessage, swig_delete_LogMessage, swig_LogMessage_methods, swig_LogMessage_attributes, { "LogMessage", swig_LogMessage_cls_methods, swig_LogMessage_cls_attributes, swig_LogMessage_cls_constants }, swig_LogMessage_bases, swig_LogMessage_base_names };

static int _wrap_new_RoomThread(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  RoomThread *result = 0 ;
  
  SWIG_check_num_args("RoomThread::RoomThread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::RoomThread",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("new_RoomThread",1,SWIGTYPE_p_Room);
  }
  
  result = (RoomThread *)new RoomThread(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RoomThread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_constructTriggerTable(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  
  SWIG_check_num_args("RoomThread::constructTriggerTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::constructTriggerTable",1,"RoomThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_constructTriggerTable",1,SWIGTYPE_p_RoomThread);
  }
  
  (arg1)->constructTriggerTable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_trigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("RoomThread::trigger",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::trigger",1,"RoomThread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RoomThread::trigger",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RoomThread::trigger",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RoomThread::trigger",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("RoomThread::trigger",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_trigger",1,SWIGTYPE_p_RoomThread);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("RoomThread_trigger",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("RoomThread_trigger",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("RoomThread_trigger",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->trigger(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_trigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("RoomThread::trigger",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::trigger",1,"RoomThread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RoomThread::trigger",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RoomThread::trigger",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RoomThread::trigger",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_trigger",1,SWIGTYPE_p_RoomThread);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("RoomThread_trigger",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("RoomThread_trigger",4,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)(arg1)->trigger(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_trigger(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RoomThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RoomThread_trigger__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RoomThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_RoomThread_trigger__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RoomThread_trigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RoomThread::trigger(TriggerEvent,Room *,ServerPlayer *,QVariant &)\n"
    "    RoomThread::trigger(TriggerEvent,Room *,ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_RoomThread_addPlayerSkills__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("RoomThread::addPlayerSkills",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::addPlayerSkills",1,"RoomThread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RoomThread::addPlayerSkills",2,"ServerPlayer *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("RoomThread::addPlayerSkills",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_addPlayerSkills",1,SWIGTYPE_p_RoomThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("RoomThread_addPlayerSkills",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->addPlayerSkills(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_addPlayerSkills__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("RoomThread::addPlayerSkills",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::addPlayerSkills",1,"RoomThread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RoomThread::addPlayerSkills",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_addPlayerSkills",1,SWIGTYPE_p_RoomThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("RoomThread_addPlayerSkills",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->addPlayerSkills(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_addPlayerSkills(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RoomThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RoomThread_addPlayerSkills__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RoomThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_RoomThread_addPlayerSkills__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RoomThread_addPlayerSkills'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RoomThread::addPlayerSkills(ServerPlayer *,bool)\n"
    "    RoomThread::addPlayerSkills(ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_RoomThread_addTriggerSkill(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  TriggerSkill *arg2 = (TriggerSkill *) 0 ;
  
  SWIG_check_num_args("RoomThread::addTriggerSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::addTriggerSkill",1,"RoomThread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RoomThread::addTriggerSkill",2,"TriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_addTriggerSkill",1,SWIGTYPE_p_RoomThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TriggerSkill,0))){
    SWIG_fail_ptr("RoomThread_addTriggerSkill",2,SWIGTYPE_p_TriggerSkill);
  }
  
  (arg1)->addTriggerSkill((TriggerSkill const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_delay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("RoomThread::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::delay",1,"RoomThread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RoomThread::delay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_delay",1,SWIGTYPE_p_RoomThread);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->delay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_delay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RoomThread *arg1 = (RoomThread *) 0 ;
  
  SWIG_check_num_args("RoomThread::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RoomThread::delay",1,"RoomThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RoomThread,0))){
    SWIG_fail_ptr("RoomThread_delay",1,SWIGTYPE_p_RoomThread);
  }
  
  (arg1)->delay();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RoomThread_delay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RoomThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RoomThread_delay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RoomThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RoomThread_delay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RoomThread_delay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RoomThread::delay(unsigned long)\n"
    "    RoomThread::delay()\n");
  lua_error(L);return 0;
}


static void swig_delete_RoomThread(void *obj) {
RoomThread *arg1 = (RoomThread *) obj;
delete arg1;
}
static swig_lua_method swig_RoomThread_methods[] = {
    {"constructTriggerTable", _wrap_RoomThread_constructTriggerTable}, 
    {"trigger", _wrap_RoomThread_trigger}, 
    {"addPlayerSkills", _wrap_RoomThread_addPlayerSkills}, 
    {"addTriggerSkill", _wrap_RoomThread_addTriggerSkill}, 
    {"delay", _wrap_RoomThread_delay}, 
    {0,0}
};
static swig_lua_attribute swig_RoomThread_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_RoomThread_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RoomThread_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_RoomThread_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_RoomThread_bases[] = {0,0};
static const char *swig_RoomThread_base_names[] = {"QThread *",0};
static swig_lua_class _wrap_class_RoomThread = { "RoomThread", &SWIGTYPE_p_RoomThread,_wrap_new_RoomThread, swig_delete_RoomThread, swig_RoomThread_methods, swig_RoomThread_attributes, { "RoomThread", swig_RoomThread_cls_methods, swig_RoomThread_cls_attributes, swig_RoomThread_cls_constants }, swig_RoomThread_bases, swig_RoomThread_base_names };

static int _wrap_new_Room(lua_State* L) {
  int SWIG_arg = 0;
  QObject *arg1 = (QObject *) 0 ;
  char *arg2 = (char *) 0 ;
  Room *result = 0 ;
  
  SWIG_check_num_args("Room::Room",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::Room",1,"QObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::Room",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QObject,0))){
    SWIG_fail_ptr("new_Room",1,SWIGTYPE_p_QObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Room *)new Room(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Room,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_isFull(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::isFull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::isFull",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_isFull",1,SWIGTYPE_p_Room);
  }
  
  result = (bool)((Room const *)arg1)->isFull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_isFinished(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::isFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::isFinished",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_isFinished",1,SWIGTYPE_p_Room);
  }
  
  result = (bool)((Room const *)arg1)->isFinished();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_canPause(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::canPause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::canPause",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::canPause",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_canPause",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_canPause",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((Room const *)arg1)->canPause(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_tryPause(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::tryPause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::tryPause",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_tryPause",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->tryPause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getMode(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QString result;
  
  SWIG_check_num_args("Room::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getMode",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getMode",1,SWIGTYPE_p_Room);
  }
  
  result = ((Room const *)arg1)->getMode();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getThread(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  RoomThread *result = 0 ;
  
  SWIG_check_num_args("Room::getThread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getThread",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getThread",1,SWIGTYPE_p_Room);
  }
  
  result = (RoomThread *)((Room const *)arg1)->getThread();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RoomThread,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getCurrent(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getCurrent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCurrent",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCurrent",1,SWIGTYPE_p_Room);
  }
  
  result = (ServerPlayer *)((Room const *)arg1)->getCurrent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCurrent(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::setCurrent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setCurrent",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setCurrent",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setCurrent",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setCurrent",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->setCurrent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_alivePlayerCount(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int result;
  
  SWIG_check_num_args("Room::alivePlayerCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::alivePlayerCount",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_alivePlayerCount",1,SWIGTYPE_p_Room);
  }
  
  result = (int)((Room const *)arg1)->alivePlayerCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getOtherPlayers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool arg3 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getOtherPlayers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getOtherPlayers",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::getOtherPlayers",2,"ServerPlayer *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::getOtherPlayers",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getOtherPlayers",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_getOtherPlayers",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((Room const *)arg1)->getOtherPlayers(arg2,arg3);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getOtherPlayers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getOtherPlayers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getOtherPlayers",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::getOtherPlayers",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getOtherPlayers",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_getOtherPlayers",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((Room const *)arg1)->getOtherPlayers(arg2);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getOtherPlayers(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_getOtherPlayers__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_getOtherPlayers__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_getOtherPlayers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::getOtherPlayers(ServerPlayer *,bool) const\n"
    "    Room::getOtherPlayers(ServerPlayer *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_getPlayers(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getPlayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getPlayers",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getPlayers",1,SWIGTYPE_p_Room);
  }
  
  result = ((Room const *)arg1)->getPlayers();
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getAllPlayers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  bool arg2 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getAllPlayers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getAllPlayers",1,"Room const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Room::getAllPlayers",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getAllPlayers",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Room const *)arg1)->getAllPlayers(arg2);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getAllPlayers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getAllPlayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getAllPlayers",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getAllPlayers",1,SWIGTYPE_p_Room);
  }
  
  result = ((Room const *)arg1)->getAllPlayers();
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getAllPlayers(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Room_getAllPlayers__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_getAllPlayers__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_getAllPlayers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::getAllPlayers(bool) const\n"
    "    Room::getAllPlayers() const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_getAlivePlayers(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getAlivePlayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getAlivePlayers",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getAlivePlayers",1,SWIGTYPE_p_Room);
  }
  
  result = ((Room const *)arg1)->getAlivePlayers();
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_output(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Room::output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::output",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::output",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_output",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->output((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_outputEventStack(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::outputEventStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::outputEventStack",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_outputEventStack",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->outputEventStack();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_enterDying(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  DamageStruct *arg3 = (DamageStruct *) 0 ;
  
  SWIG_check_num_args("Room::enterDying",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::enterDying",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::enterDying",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::enterDying",3,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_enterDying",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_enterDying",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("Room_enterDying",3,SWIGTYPE_p_DamageStruct);
  }
  
  (arg1)->enterDying(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getCurrentDyingPlayer(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getCurrentDyingPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCurrentDyingPlayer",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCurrentDyingPlayer",1,SWIGTYPE_p_Room);
  }
  
  result = (ServerPlayer *)((Room const *)arg1)->getCurrentDyingPlayer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_killPlayer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  DamageStruct *arg3 = (DamageStruct *) 0 ;
  
  SWIG_check_num_args("Room::killPlayer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::killPlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::killPlayer",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::killPlayer",3,"DamageStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_killPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_killPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("Room_killPlayer",3,SWIGTYPE_p_DamageStruct);
  }
  
  (arg1)->killPlayer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_killPlayer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::killPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::killPlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::killPlayer",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_killPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_killPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->killPlayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_killPlayer(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_killPlayer__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DamageStruct, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_killPlayer__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_killPlayer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::killPlayer(ServerPlayer *,DamageStruct *)\n"
    "    Room::killPlayer(ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_revivePlayer(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::revivePlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::revivePlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::revivePlayer",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_revivePlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_revivePlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->revivePlayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_aliveRoles__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Room::aliveRoles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::aliveRoles",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::aliveRoles",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_aliveRoles",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_aliveRoles",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((Room const *)arg1)->aliveRoles(arg2);
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_aliveRoles__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QStringList result;
  
  SWIG_check_num_args("Room::aliveRoles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::aliveRoles",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_aliveRoles",1,SWIGTYPE_p_Room);
  }
  
  result = ((Room const *)arg1)->aliveRoles();
  
  lua_createtable(L, (&result)->length(), 0);
  
  for (int i = 0; i < (&result)->length(); i++) {
    QString str = (&result)->at(i);
    lua_pushstring(L, str.toUtf8());
    lua_rawseti(L, -2, i + 1);
  }
  
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_aliveRoles(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Room_aliveRoles__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_aliveRoles__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_aliveRoles'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::aliveRoles(ServerPlayer *) const\n"
    "    Room::aliveRoles() const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_gameOver(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Room::gameOver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::gameOver",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::gameOver",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_gameOver",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->gameOver((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_slashEffect(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  SlashEffectStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Room::slashEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::slashEffect",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::slashEffect",2,"SlashEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_slashEffect",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("Room_slashEffect",2,SWIGTYPE_p_SlashEffectStruct);
  }
  
  (arg1)->slashEffect((SlashEffectStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_slashResult(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  SlashEffectStruct *arg2 = 0 ;
  Card *arg3 = (Card *) 0 ;
  
  SWIG_check_num_args("Room::slashResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::slashResult",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::slashResult",2,"SlashEffectStruct const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::slashResult",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_slashResult",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SlashEffectStruct,0))){
    SWIG_fail_ptr("Room_slashResult",2,SWIGTYPE_p_SlashEffectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_slashResult",3,SWIGTYPE_p_Card);
  }
  
  (arg1)->slashResult((SlashEffectStruct const &)*arg2,(Card const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_attachSkillToPlayer(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::attachSkillToPlayer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::attachSkillToPlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::attachSkillToPlayer",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::attachSkillToPlayer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_attachSkillToPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_attachSkillToPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->attachSkillToPlayer(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_detachSkillFromPlayer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::detachSkillFromPlayer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::detachSkillFromPlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::detachSkillFromPlayer",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::detachSkillFromPlayer",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::detachSkillFromPlayer",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::detachSkillFromPlayer",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_detachSkillFromPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_detachSkillFromPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->detachSkillFromPlayer(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_detachSkillFromPlayer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::detachSkillFromPlayer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::detachSkillFromPlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::detachSkillFromPlayer",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::detachSkillFromPlayer",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::detachSkillFromPlayer",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_detachSkillFromPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_detachSkillFromPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->detachSkillFromPlayer(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_detachSkillFromPlayer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::detachSkillFromPlayer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::detachSkillFromPlayer",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::detachSkillFromPlayer",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::detachSkillFromPlayer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_detachSkillFromPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_detachSkillFromPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->detachSkillFromPlayer(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_detachSkillFromPlayer(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_detachSkillFromPlayer__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_detachSkillFromPlayer__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_detachSkillFromPlayer__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_detachSkillFromPlayer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::detachSkillFromPlayer(ServerPlayer *,char const *,bool,bool)\n"
    "    Room::detachSkillFromPlayer(ServerPlayer *,char const *,bool)\n"
    "    Room::detachSkillFromPlayer(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_handleAcquireDetachSkills__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::handleAcquireDetachSkills",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::handleAcquireDetachSkills",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::handleAcquireDetachSkills",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::handleAcquireDetachSkills",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::handleAcquireDetachSkills",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_handleAcquireDetachSkills",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_handleAcquireDetachSkills",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->handleAcquireDetachSkills(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_handleAcquireDetachSkills__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::handleAcquireDetachSkills",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::handleAcquireDetachSkills",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::handleAcquireDetachSkills",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::handleAcquireDetachSkills",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_handleAcquireDetachSkills",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_handleAcquireDetachSkills",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->handleAcquireDetachSkills(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_handleAcquireDetachSkills(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_handleAcquireDetachSkills__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_handleAcquireDetachSkills__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_handleAcquireDetachSkills'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::handleAcquireDetachSkills(ServerPlayer *,char const *,bool)\n"
    "    Room::handleAcquireDetachSkills(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_setPlayerFlag(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::setPlayerFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setPlayerFlag",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setPlayerFlag",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setPlayerFlag",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setPlayerFlag",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setPlayerFlag",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setPlayerFlag(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setPlayerProperty(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  
  SWIG_check_num_args("Room::setPlayerProperty",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setPlayerProperty",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setPlayerProperty",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setPlayerProperty",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::setPlayerProperty",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setPlayerProperty",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setPlayerProperty",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_setPlayerProperty",4,SWIGTYPE_p_QVariant);
  }
  
  (arg1)->setPlayerProperty(arg2,(char const *)arg3,(QVariant const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setPlayerMark(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Room::setPlayerMark",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setPlayerMark",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setPlayerMark",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setPlayerMark",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::setPlayerMark",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setPlayerMark",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setPlayerMark",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setPlayerMark(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_addPlayerMark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Room::addPlayerMark",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::addPlayerMark",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::addPlayerMark",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::addPlayerMark",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::addPlayerMark",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_addPlayerMark",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_addPlayerMark",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->addPlayerMark(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_addPlayerMark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::addPlayerMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::addPlayerMark",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::addPlayerMark",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::addPlayerMark",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_addPlayerMark",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_addPlayerMark",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->addPlayerMark(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_addPlayerMark(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_addPlayerMark__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_addPlayerMark__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_addPlayerMark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::addPlayerMark(ServerPlayer *,char const *,int)\n"
    "    Room::addPlayerMark(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_removePlayerMark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Room::removePlayerMark",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::removePlayerMark",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::removePlayerMark",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::removePlayerMark",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::removePlayerMark",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_removePlayerMark",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_removePlayerMark",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->removePlayerMark(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_removePlayerMark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::removePlayerMark",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::removePlayerMark",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::removePlayerMark",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::removePlayerMark",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_removePlayerMark",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_removePlayerMark",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->removePlayerMark(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_removePlayerMark(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_removePlayerMark__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_removePlayerMark__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_removePlayerMark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::removePlayerMark(ServerPlayer *,char const *,int)\n"
    "    Room::removePlayerMark(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_setPlayerCardLimitation(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::setPlayerCardLimitation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setPlayerCardLimitation",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setPlayerCardLimitation",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setPlayerCardLimitation",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::setPlayerCardLimitation",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::setPlayerCardLimitation",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setPlayerCardLimitation",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setPlayerCardLimitation",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setPlayerCardLimitation(arg2,(char const *)arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_removePlayerCardLimitation(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Room::removePlayerCardLimitation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::removePlayerCardLimitation",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::removePlayerCardLimitation",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::removePlayerCardLimitation",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::removePlayerCardLimitation",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_removePlayerCardLimitation",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_removePlayerCardLimitation",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->removePlayerCardLimitation(arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearPlayerCardLimitation(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Room::clearPlayerCardLimitation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearPlayerCardLimitation",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::clearPlayerCardLimitation",2,"ServerPlayer *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::clearPlayerCardLimitation",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearPlayerCardLimitation",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_clearPlayerCardLimitation",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->clearPlayerCardLimitation(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setPlayerDisableShow(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Room::setPlayerDisableShow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setPlayerDisableShow",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setPlayerDisableShow",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setPlayerDisableShow",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::setPlayerDisableShow",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setPlayerDisableShow",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setPlayerDisableShow",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->setPlayerDisableShow(arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_removePlayerDisableShow(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::removePlayerDisableShow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::removePlayerDisableShow",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::removePlayerDisableShow",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::removePlayerDisableShow",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_removePlayerDisableShow",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_removePlayerDisableShow",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->removePlayerDisableShow(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCardFlag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  char *arg3 = (char *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::setCardFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setCardFlag",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setCardFlag",2,"Card const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setCardFlag",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::setCardFlag",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setCardFlag",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_setCardFlag",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setCardFlag",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->setCardFlag((Card const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCardFlag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::setCardFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setCardFlag",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setCardFlag",2,"Card const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setCardFlag",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setCardFlag",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_setCardFlag",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setCardFlag((Card const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCardFlag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::setCardFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setCardFlag",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::setCardFlag",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setCardFlag",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::setCardFlag",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setCardFlag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setCardFlag",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->setCardFlag(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCardFlag__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::setCardFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setCardFlag",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::setCardFlag",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setCardFlag",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setCardFlag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setCardFlag(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCardFlag(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_setCardFlag__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_setCardFlag__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_setCardFlag__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_setCardFlag__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_setCardFlag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::setCardFlag(Card const *,char const *,ServerPlayer *)\n"
    "    Room::setCardFlag(Card const *,char const *)\n"
    "    Room::setCardFlag(int,char const *,ServerPlayer *)\n"
    "    Room::setCardFlag(int,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_clearCardFlag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::clearCardFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearCardFlag",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::clearCardFlag",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::clearCardFlag",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearCardFlag",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_clearCardFlag",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_clearCardFlag",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->clearCardFlag((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearCardFlag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Room::clearCardFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearCardFlag",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::clearCardFlag",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearCardFlag",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_clearCardFlag",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->clearCardFlag((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearCardFlag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::clearCardFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearCardFlag",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::clearCardFlag",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::clearCardFlag",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearCardFlag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_clearCardFlag",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->clearCardFlag(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearCardFlag__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Room::clearCardFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearCardFlag",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::clearCardFlag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearCardFlag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->clearCardFlag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearCardFlag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_clearCardFlag__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_clearCardFlag__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_clearCardFlag__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_clearCardFlag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_clearCardFlag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::clearCardFlag(Card const *,ServerPlayer *)\n"
    "    Room::clearCardFlag(Card const *)\n"
    "    Room::clearCardFlag(int,ServerPlayer *)\n"
    "    Room::clearCardFlag(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_useCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardUseStruct *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Room::useCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::useCard",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::useCard",2,"CardUseStruct const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::useCard",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_useCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Room_useCard",2,SWIGTYPE_p_CardUseStruct);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->useCard((CardUseStruct const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_useCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardUseStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Room::useCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::useCard",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::useCard",2,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_useCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Room_useCard",2,SWIGTYPE_p_CardUseStruct);
  }
  
  result = (bool)(arg1)->useCard((CardUseStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_useCard(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardUseStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_useCard__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardUseStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_useCard__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_useCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::useCard(CardUseStruct const &,bool)\n"
    "    Room::useCard(CardUseStruct const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_damage(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  DamageStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Room::damage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::damage",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::damage",2,"DamageStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_damage",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("Room_damage",2,SWIGTYPE_p_DamageStruct);
  }
  
  (arg1)->damage((DamageStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_sendDamageLog(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  DamageStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Room::sendDamageLog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::sendDamageLog",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::sendDamageLog",2,"DamageStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_sendDamageLog",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("Room_sendDamageLog",2,SWIGTYPE_p_DamageStruct);
  }
  
  (arg1)->sendDamageLog((DamageStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_loseHp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::loseHp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::loseHp",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::loseHp",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::loseHp",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_loseHp",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_loseHp",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loseHp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_loseHp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::loseHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::loseHp",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::loseHp",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_loseHp",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_loseHp",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->loseHp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_loseHp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_loseHp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_loseHp__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_loseHp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::loseHp(ServerPlayer *,int)\n"
    "    Room::loseHp(ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_loseMaxHp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::loseMaxHp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::loseMaxHp",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::loseMaxHp",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::loseMaxHp",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_loseMaxHp",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_loseMaxHp",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loseMaxHp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_loseMaxHp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::loseMaxHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::loseMaxHp",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::loseMaxHp",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_loseMaxHp",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_loseMaxHp",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->loseMaxHp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_loseMaxHp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_loseMaxHp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_loseMaxHp__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_loseMaxHp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::loseMaxHp(ServerPlayer *,int)\n"
    "    Room::loseMaxHp(ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_applyDamage(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  DamageStruct *arg3 = 0 ;
  
  SWIG_check_num_args("Room::applyDamage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::applyDamage",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::applyDamage",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::applyDamage",3,"DamageStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_applyDamage",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_applyDamage",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DamageStruct,0))){
    SWIG_fail_ptr("Room_applyDamage",3,SWIGTYPE_p_DamageStruct);
  }
  
  (arg1)->applyDamage(arg2,(DamageStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_recover__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  RecoverStruct *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::recover",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::recover",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::recover",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::recover",3,"RecoverStruct const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::recover",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_recover",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_recover",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("Room_recover",3,SWIGTYPE_p_RecoverStruct);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->recover(arg2,(RecoverStruct const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_recover__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  RecoverStruct *arg3 = 0 ;
  
  SWIG_check_num_args("Room::recover",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::recover",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::recover",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::recover",3,"RecoverStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_recover",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_recover",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_RecoverStruct,0))){
    SWIG_fail_ptr("Room_recover",3,SWIGTYPE_p_RecoverStruct);
  }
  
  (arg1)->recover(arg2,(RecoverStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_recover(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_RecoverStruct, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_recover__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_RecoverStruct, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_recover__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_recover'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::recover(ServerPlayer *,RecoverStruct const &,bool)\n"
    "    Room::recover(ServerPlayer *,RecoverStruct const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_cardEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::cardEffect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::cardEffect",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::cardEffect",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::cardEffect",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::cardEffect",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_cardEffect",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_cardEffect",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_cardEffect",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_cardEffect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)(arg1)->cardEffect((Card const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_cardEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Room::cardEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::cardEffect",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::cardEffect",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_cardEffect",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("Room_cardEffect",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (bool)(arg1)->cardEffect((CardEffectStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_cardEffect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardEffectStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_cardEffect__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_cardEffect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_cardEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::cardEffect(Card const *,ServerPlayer *,ServerPlayer *)\n"
    "    Room::cardEffect(CardEffectStruct const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_isJinkEffected(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::isJinkEffected",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::isJinkEffected",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::isJinkEffected",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::isJinkEffected",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_isJinkEffected",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_isJinkEffected",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_isJinkEffected",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)(arg1)->isJinkEffected(arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_judge(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  JudgeStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Room::judge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::judge",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::judge",2,"JudgeStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_judge",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("Room_judge",2,SWIGTYPE_p_JudgeStruct);
  }
  
  (arg1)->judge(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_sendJudgeResult(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  JudgeStruct *arg2 = (JudgeStruct *) 0 ;
  
  SWIG_check_num_args("Room::sendJudgeResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::sendJudgeResult",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::sendJudgeResult",2,"JudgeStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_sendJudgeResult",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("Room_sendJudgeResult",2,SWIGTYPE_p_JudgeStruct);
  }
  
  (arg1)->sendJudgeResult((JudgeStruct const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getNCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  bool arg3 ;
  QList< int > result;
  
  SWIG_check_num_args("Room::getNCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getNCards",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::getNCards",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::getNCards",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getNCards",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->getNCards(arg2,arg3);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getNCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  QList< int > result;
  
  SWIG_check_num_args("Room::getNCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getNCards",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::getNCards",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getNCards",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getNCards(arg2);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getNCards(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_getNCards__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_getNCards__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_getNCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::getNCards(int,bool)\n"
    "    Room::getNCards(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_getLord__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getLord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getLord",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::getLord",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::getLord",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getLord",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ServerPlayer *)((Room const *)arg1)->getLord((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getLord__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getLord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getLord",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::getLord",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getLord",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ServerPlayer *)((Room const *)arg1)->getLord((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getLord(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_getLord__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_getLord__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_getLord'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::getLord(char const *,bool) const\n"
    "    Room::getLord(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForGuanxing__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  Room::GuanxingType arg4 ;
  
  SWIG_check_num_args("Room::askForGuanxing",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGuanxing",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGuanxing",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForGuanxing",3,"QList< int > const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForGuanxing",4,"Room::GuanxingType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGuanxing",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGuanxing",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForGuanxing",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (Room::GuanxingType)(int)lua_tonumber(L, 4);
  (arg1)->askForGuanxing(arg2,(QList< int > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGuanxing__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  
  SWIG_check_num_args("Room::askForGuanxing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGuanxing",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGuanxing",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForGuanxing",3,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGuanxing",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGuanxing",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForGuanxing",3,SWIGTYPE_p_QListT_int_t);
  }
  
  (arg1)->askForGuanxing(arg2,(QList< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGuanxing(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_askForGuanxing__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForGuanxing__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForGuanxing'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForGuanxing(ServerPlayer *,QList< int > const &,Room::GuanxingType)\n"
    "    Room::askForGuanxing(ServerPlayer *,QList< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_doGongxin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< int > arg4 ;
  char *arg5 = (char *) 0 ;
  QList< int > *argp4 ;
  int result;
  
  SWIG_check_num_args("Room::doGongxin",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doGongxin",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::doGongxin",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::doGongxin",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::doGongxin",4,"QList< int >");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::doGongxin",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doGongxin",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doGongxin",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doGongxin",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_doGongxin",4,SWIGTYPE_p_QListT_int_t);
  }
  arg4 = *argp4;
  
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)(arg1)->doGongxin(arg2,arg3,arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doGongxin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< int > arg4 ;
  QList< int > *argp4 ;
  int result;
  
  SWIG_check_num_args("Room::doGongxin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doGongxin",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::doGongxin",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::doGongxin",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::doGongxin",4,"QList< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doGongxin",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doGongxin",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doGongxin",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_doGongxin",4,SWIGTYPE_p_QListT_int_t);
  }
  arg4 = *argp4;
  
  result = (int)(arg1)->doGongxin(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doGongxin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("Room::doGongxin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doGongxin",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::doGongxin",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::doGongxin",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doGongxin",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doGongxin",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doGongxin",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)(arg1)->doGongxin(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doGongxin(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_doGongxin__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_doGongxin__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_doGongxin__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_doGongxin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::doGongxin(ServerPlayer *,ServerPlayer *,QList< int >,char const *)\n"
    "    Room::doGongxin(ServerPlayer *,ServerPlayer *,QList< int >)\n"
    "    Room::doGongxin(ServerPlayer *,ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_drawCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int result;
  
  SWIG_check_num_args("Room::drawCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCard",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCard",1,SWIGTYPE_p_Room);
  }
  
  result = (int)(arg1)->drawCard();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_fillAG__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > *arg2 = 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< int > *arg4 = 0 ;
  
  SWIG_check_num_args("Room::fillAG",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::fillAG",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::fillAG",2,"QList< int > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::fillAG",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::fillAG",4,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_fillAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_fillAG",2,SWIGTYPE_p_QListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_fillAG",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_fillAG",4,SWIGTYPE_p_QListT_int_t);
  }
  
  (arg1)->fillAG((QList< int > const &)*arg2,arg3,(QList< int > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_fillAG__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > *arg2 = 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::fillAG",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::fillAG",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::fillAG",2,"QList< int > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::fillAG",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_fillAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_fillAG",2,SWIGTYPE_p_QListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_fillAG",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->fillAG((QList< int > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_fillAG__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Room::fillAG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::fillAG",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::fillAG",2,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_fillAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_fillAG",2,SWIGTYPE_p_QListT_int_t);
  }
  
  (arg1)->fillAG((QList< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_fillAG(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_fillAG__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_fillAG__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_fillAG__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_fillAG'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::fillAG(QList< int > const &,ServerPlayer *,QList< int > const &)\n"
    "    Room::fillAG(QList< int > const &,ServerPlayer *)\n"
    "    Room::fillAG(QList< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_takeAG__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::takeAG",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::takeAG",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::takeAG",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::takeAG",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::takeAG",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_takeAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_takeAG",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->takeAG(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_takeAG__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::takeAG",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::takeAG",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::takeAG",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::takeAG",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_takeAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_takeAG",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->takeAG(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_takeAG(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_takeAG__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_takeAG__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_takeAG'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::takeAG(ServerPlayer *,int,bool)\n"
    "    Room::takeAG(ServerPlayer *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_clearAG__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::clearAG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearAG",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::clearAG",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_clearAG",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->clearAG(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearAG__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::clearAG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::clearAG",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_clearAG",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->clearAG();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_clearAG(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Room_clearAG__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_clearAG__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_clearAG'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::clearAG(ServerPlayer *)\n"
    "    Room::clearAG()\n");
  lua_error(L);return 0;
}


static int _wrap_Room_provide(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  
  SWIG_check_num_args("Room::provide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::provide",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::provide",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_provide",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_provide",2,SWIGTYPE_p_Card);
  }
  
  (arg1)->provide((Card const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getLieges(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::getLieges",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getLieges",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::getLieges",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::getLieges",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getLieges",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_getLieges",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = ((Room const *)arg1)->getLieges((char const *)arg2,arg3);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_sendLog(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  LogMessage *arg2 = 0 ;
  
  SWIG_check_num_args("Room::sendLog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::sendLog",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::sendLog",2,"LogMessage const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_sendLog",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LogMessage,0))){
    SWIG_fail_ptr("Room_sendLog",2,SWIGTYPE_p_LogMessage);
  }
  
  (arg1)->sendLog((LogMessage const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_showCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::showCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::showCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::showCard",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::showCard",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::showCard",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_showCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_showCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_showCard",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->showCard(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_showCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::showCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::showCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::showCard",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::showCard",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_showCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_showCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->showCard(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_showCard(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_showCard__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_showCard__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_showCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::showCard(ServerPlayer *,int,ServerPlayer *)\n"
    "    Room::showCard(ServerPlayer *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_showAllCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::showAllCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::showAllCards",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::showAllCards",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::showAllCards",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_showAllCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_showAllCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_showAllCards",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->showAllCards(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_showAllCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::showAllCards",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::showAllCards",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::showAllCards",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_showAllCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_showAllCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->showAllCards(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_showAllCards(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_showAllCards__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_showAllCards__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_showAllCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::showAllCards(ServerPlayer *,ServerPlayer *)\n"
    "    Room::showAllCards(ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_retrial__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  JudgeStruct *arg4 = (JudgeStruct *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("Room::retrial",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::retrial",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::retrial",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::retrial",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::retrial",4,"JudgeStruct *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::retrial",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::retrial",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_retrial",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_retrial",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_retrial",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("Room_retrial",4,SWIGTYPE_p_JudgeStruct);
  }
  
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->retrial((Card const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_retrial__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  JudgeStruct *arg4 = (JudgeStruct *) 0 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("Room::retrial",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::retrial",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::retrial",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::retrial",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::retrial",4,"JudgeStruct *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::retrial",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_retrial",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_retrial",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_retrial",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_JudgeStruct,0))){
    SWIG_fail_ptr("Room_retrial",4,SWIGTYPE_p_JudgeStruct);
  }
  
  arg5 = (char *)lua_tostring(L, 5);
  (arg1)->retrial((Card const *)arg2,arg3,arg4,(char const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_retrial(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_JudgeStruct, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_retrial__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_JudgeStruct, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_retrial__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_retrial'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::retrial(Card const *,ServerPlayer *,JudgeStruct *,char const *,bool)\n"
    "    Room::retrial(Card const *,ServerPlayer *,JudgeStruct *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_doNotify(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::doNotify",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doNotify",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::doNotify",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::doNotify",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::doNotify",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doNotify",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_doNotify",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->doNotify(arg2,arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doBroadcastNotify__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::doBroadcastNotify",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doBroadcastNotify",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::doBroadcastNotify",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::doBroadcastNotify",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doBroadcastNotify",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->doBroadcastNotify(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doBroadcastNotify__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::doBroadcastNotify",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doBroadcastNotify",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::doBroadcastNotify",2,"QList< ServerPlayer * > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::doBroadcastNotify",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::doBroadcastNotify",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doBroadcastNotify",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_doBroadcastNotify",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->doBroadcastNotify((QList< ServerPlayer * > const &)*arg2,arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doBroadcastNotify(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_doBroadcastNotify__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_doBroadcastNotify__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_doBroadcastNotify'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::doBroadcastNotify(int,char const *)\n"
    "    Room::doBroadcastNotify(QList< ServerPlayer * > const &,int,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_notifyMoveCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  bool arg2 ;
  QList< CardsMoveStruct > arg3 ;
  bool arg4 ;
  QList< ServerPlayer * > arg5 ;
  QList< CardsMoveStruct > *argp3 ;
  QList< ServerPlayer * > *argp5 ;
  bool result;
  
  SWIG_check_num_args("Room::notifyMoveCards",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifyMoveCards",1,"Room *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Room::notifyMoveCards",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::notifyMoveCards",3,"QList< CardsMoveStruct >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::notifyMoveCards",4,"bool");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::notifyMoveCards",5,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifyMoveCards",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("Room_notifyMoveCards",3,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_notifyMoveCards",5,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg5 = *argp5;
  
  result = (bool)(arg1)->notifyMoveCards(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_notifyMoveCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  bool arg2 ;
  QList< CardsMoveStruct > arg3 ;
  bool arg4 ;
  QList< CardsMoveStruct > *argp3 ;
  bool result;
  
  SWIG_check_num_args("Room::notifyMoveCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifyMoveCards",1,"Room *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Room::notifyMoveCards",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::notifyMoveCards",3,"QList< CardsMoveStruct >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::notifyMoveCards",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifyMoveCards",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("Room_notifyMoveCards",3,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->notifyMoveCards(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_notifyMoveCards(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_notifyMoveCards__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Room_notifyMoveCards__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_notifyMoveCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::notifyMoveCards(bool,QList< CardsMoveStruct >,bool,QList< ServerPlayer * >)\n"
    "    Room::notifyMoveCards(bool,QList< CardsMoveStruct >,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_notifyProperty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::notifyProperty",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifyProperty",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::notifyProperty",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::notifyProperty",3,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::notifyProperty",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::notifyProperty",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifyProperty",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifyProperty",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifyProperty",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)(arg1)->notifyProperty(arg2,(ServerPlayer const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_notifyProperty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::notifyProperty",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifyProperty",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::notifyProperty",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::notifyProperty",3,"ServerPlayer const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::notifyProperty",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifyProperty",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifyProperty",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifyProperty",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->notifyProperty(arg2,(ServerPlayer const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_notifyProperty(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_notifyProperty__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_notifyProperty__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_notifyProperty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::notifyProperty(ServerPlayer *,ServerPlayer const *,char const *,char const *)\n"
    "    Room::notifyProperty(ServerPlayer *,ServerPlayer const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_notifyUpdateCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  Card *arg4 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::notifyUpdateCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifyUpdateCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::notifyUpdateCard",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::notifyUpdateCard",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::notifyUpdateCard",4,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifyUpdateCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifyUpdateCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_notifyUpdateCard",4,SWIGTYPE_p_Card);
  }
  
  result = (bool)(arg1)->notifyUpdateCard(arg2,arg3,(Card const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastUpdateCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  int arg3 ;
  Card *arg4 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::broadcastUpdateCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastUpdateCard",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::broadcastUpdateCard",2,"QList< ServerPlayer * > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::broadcastUpdateCard",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::broadcastUpdateCard",4,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastUpdateCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_broadcastUpdateCard",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_broadcastUpdateCard",4,SWIGTYPE_p_Card);
  }
  
  result = (bool)(arg1)->broadcastUpdateCard((QList< ServerPlayer * > const &)*arg2,arg3,(Card const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_notifyResetCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("Room::notifyResetCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifyResetCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::notifyResetCard",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::notifyResetCard",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifyResetCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifyResetCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->notifyResetCard(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastResetCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("Room::broadcastResetCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastResetCard",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::broadcastResetCard",2,"QList< ServerPlayer * > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::broadcastResetCard",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastResetCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_broadcastResetCard",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->broadcastResetCard((QList< ServerPlayer * > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastProperty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::broadcastProperty",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastProperty",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::broadcastProperty",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::broadcastProperty",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::broadcastProperty",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastProperty",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_broadcastProperty",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->broadcastProperty(arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastProperty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::broadcastProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastProperty",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::broadcastProperty",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::broadcastProperty",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastProperty",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_broadcastProperty",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->broadcastProperty(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastProperty(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_broadcastProperty__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_broadcastProperty__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_broadcastProperty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::broadcastProperty(ServerPlayer *,char const *,char const *)\n"
    "    Room::broadcastProperty(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_notifySkillInvoked(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::notifySkillInvoked",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::notifySkillInvoked",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::notifySkillInvoked",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::notifySkillInvoked",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_notifySkillInvoked",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_notifySkillInvoked",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->notifySkillInvoked(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::broadcastSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastSkillInvoke",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::broadcastSkillInvoke",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::broadcastSkillInvoke",3,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->broadcastSkillInvoke((char const *)arg2,(ServerPlayer const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Room::broadcastSkillInvoke",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastSkillInvoke",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::broadcastSkillInvoke",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->broadcastSkillInvoke((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::broadcastSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastSkillInvoke",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::broadcastSkillInvoke",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::broadcastSkillInvoke",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->broadcastSkillInvoke((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::broadcastSkillInvoke",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastSkillInvoke",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::broadcastSkillInvoke",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::broadcastSkillInvoke",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::broadcastSkillInvoke",4,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->broadcastSkillInvoke((char const *)arg2,arg3,(ServerPlayer const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::broadcastSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastSkillInvoke",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::broadcastSkillInvoke",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::broadcastSkillInvoke",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->broadcastSkillInvoke((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Room::broadcastSkillInvoke",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::broadcastSkillInvoke",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::broadcastSkillInvoke",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::broadcastSkillInvoke",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::broadcastSkillInvoke",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_broadcastSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->broadcastSkillInvoke((char const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_broadcastSkillInvoke(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_broadcastSkillInvoke__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_broadcastSkillInvoke__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_broadcastSkillInvoke__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_broadcastSkillInvoke__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_broadcastSkillInvoke__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_broadcastSkillInvoke__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_broadcastSkillInvoke'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::broadcastSkillInvoke(char const *,ServerPlayer const *)\n"
    "    Room::broadcastSkillInvoke(char const *)\n"
    "    Room::broadcastSkillInvoke(char const *,char const *)\n"
    "    Room::broadcastSkillInvoke(char const *,int,ServerPlayer const *)\n"
    "    Room::broadcastSkillInvoke(char const *,int)\n"
    "    Room::broadcastSkillInvoke(char const *,bool,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_doLightbox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::doLightbox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doLightbox",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::doLightbox",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::doLightbox",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doLightbox",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->doLightbox((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doLightbox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Room::doLightbox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doLightbox",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::doLightbox",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doLightbox",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->doLightbox((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doLightbox(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_doLightbox__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_doLightbox__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_doLightbox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::doLightbox(char const *,int)\n"
    "    Room::doLightbox(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_doSuperLightbox(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::doSuperLightbox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doSuperLightbox",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::doSuperLightbox",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::doSuperLightbox",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doSuperLightbox",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->doSuperLightbox((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doAnimate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QList< ServerPlayer * > arg5 ;
  QList< ServerPlayer * > *argp5 ;
  
  SWIG_check_num_args("Room::doAnimate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doAnimate",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::doAnimate",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::doAnimate",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::doAnimate",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::doAnimate",5,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doAnimate",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_doAnimate",5,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg5 = *argp5;
  
  (arg1)->doAnimate(arg2,(char const *)arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doAnimate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Room::doAnimate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doAnimate",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::doAnimate",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::doAnimate",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::doAnimate",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doAnimate",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->doAnimate(arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doAnimate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::doAnimate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doAnimate",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::doAnimate",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::doAnimate",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doAnimate",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->doAnimate(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doAnimate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Room::doAnimate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::doAnimate",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::doAnimate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_doAnimate",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->doAnimate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_doAnimate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_doAnimate__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_doAnimate__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_doAnimate__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Room_doAnimate__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_doAnimate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::doAnimate(int,char const *,char const *,QList< ServerPlayer * >)\n"
    "    Room::doAnimate(int,char const *,char const *)\n"
    "    Room::doAnimate(int,char const *)\n"
    "    Room::doAnimate(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_preparePlayers(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::preparePlayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::preparePlayers",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_preparePlayers",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->preparePlayers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_changePlayerGeneral(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::changePlayerGeneral",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::changePlayerGeneral",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::changePlayerGeneral",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::changePlayerGeneral",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_changePlayerGeneral",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_changePlayerGeneral",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->changePlayerGeneral(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_changePlayerGeneral2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::changePlayerGeneral2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::changePlayerGeneral2",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::changePlayerGeneral2",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::changePlayerGeneral2",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_changePlayerGeneral2",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_changePlayerGeneral2",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->changePlayerGeneral2(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_filterCards(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< Card const * > arg3 ;
  bool arg4 ;
  QList< Card const * > *argp3 ;
  
  SWIG_check_num_args("Room::filterCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::filterCards",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::filterCards",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::filterCards",3,"QList< Card const * >");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::filterCards",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_filterCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_filterCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("Room_filterCards",3,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->filterCards(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Skill *arg3 = (Skill *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::acquireSkill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::acquireSkill",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::acquireSkill",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::acquireSkill",3,"Skill const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::acquireSkill",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::acquireSkill",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_acquireSkill",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_acquireSkill",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Room_acquireSkill",3,SWIGTYPE_p_Skill);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->acquireSkill(arg2,(Skill const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Skill *arg3 = (Skill *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::acquireSkill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::acquireSkill",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::acquireSkill",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::acquireSkill",3,"Skill const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::acquireSkill",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_acquireSkill",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_acquireSkill",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Room_acquireSkill",3,SWIGTYPE_p_Skill);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->acquireSkill(arg2,(Skill const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Skill *arg3 = (Skill *) 0 ;
  
  SWIG_check_num_args("Room::acquireSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::acquireSkill",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::acquireSkill",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::acquireSkill",3,"Skill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_acquireSkill",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_acquireSkill",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Skill,0))){
    SWIG_fail_ptr("Room_acquireSkill",3,SWIGTYPE_p_Skill);
  }
  
  (arg1)->acquireSkill(arg2,(Skill const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::acquireSkill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::acquireSkill",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::acquireSkill",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::acquireSkill",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::acquireSkill",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::acquireSkill",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_acquireSkill",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_acquireSkill",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->acquireSkill(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::acquireSkill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::acquireSkill",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::acquireSkill",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::acquireSkill",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::acquireSkill",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_acquireSkill",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_acquireSkill",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->acquireSkill(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::acquireSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::acquireSkill",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::acquireSkill",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::acquireSkill",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_acquireSkill",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_acquireSkill",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->acquireSkill(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_acquireSkill(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_acquireSkill__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_acquireSkill__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_acquireSkill__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_acquireSkill__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Skill, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_acquireSkill__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_acquireSkill__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_acquireSkill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::acquireSkill(ServerPlayer *,Skill const *,bool,bool)\n"
    "    Room::acquireSkill(ServerPlayer *,Skill const *,bool)\n"
    "    Room::acquireSkill(ServerPlayer *,Skill const *)\n"
    "    Room::acquireSkill(ServerPlayer *,char const *,bool,bool)\n"
    "    Room::acquireSkill(ServerPlayer *,char const *,bool)\n"
    "    Room::acquireSkill(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_adjustSeats(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::adjustSeats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::adjustSeats",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_adjustSeats",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->adjustSeats();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_swapPile(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::swapPile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::swapPile",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_swapPile",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->swapPile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getDiscardPile(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Room::getDiscardPile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getDiscardPile",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getDiscardPile",1,SWIGTYPE_p_Room);
  }
  
  result = (arg1)->getDiscardPile();
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getDrawPile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > *result = 0 ;
  
  SWIG_check_num_args("Room::getDrawPile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getDrawPile",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getDrawPile",1,SWIGTYPE_p_Room);
  }
  
  result = (QList< int > *) &(arg1)->getDrawPile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getDrawPile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > *result = 0 ;
  
  SWIG_check_num_args("Room::getDrawPile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getDrawPile",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getDrawPile",1,SWIGTYPE_p_Room);
  }
  
  result = (QList< int > *) &((Room const *)arg1)->getDrawPile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QListT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getDrawPile(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Room_getDrawPile__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Room_getDrawPile__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_getDrawPile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::getDrawPile()\n"
    "    Room::getDrawPile() const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_getCardFromPile(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Room::getCardFromPile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCardFromPile",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::getCardFromPile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCardFromPile",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->getCardFromPile((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_findPlayer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::findPlayer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::findPlayer",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::findPlayer",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::findPlayer",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_findPlayer",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ServerPlayer *)((Room const *)arg1)->findPlayer((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_findPlayer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::findPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::findPlayer",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::findPlayer",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_findPlayer",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ServerPlayer *)((Room const *)arg1)->findPlayer((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_findPlayer(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Room_findPlayer__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_findPlayer__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_findPlayer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::findPlayer(char const *,bool) const\n"
    "    Room::findPlayer(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_findPlayersBySkillName(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("Room::findPlayersBySkillName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::findPlayersBySkillName",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::findPlayersBySkillName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_findPlayersBySkillName",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Room const *)arg1)->findPlayersBySkillName((char const *)arg2);
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_findPlayerBySkillName(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::findPlayerBySkillName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::findPlayerBySkillName",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::findPlayerBySkillName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_findPlayerBySkillName",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ServerPlayer *)((Room const *)arg1)->findPlayerBySkillName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_installEquip(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::installEquip",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::installEquip",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::installEquip",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::installEquip",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_installEquip",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_installEquip",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->installEquip(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_resetAI(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::resetAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::resetAI",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::resetAI",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_resetAI",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_resetAI",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->resetAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_swapSeat(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::swapSeat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::swapSeat",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::swapSeat",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::swapSeat",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_swapSeat",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_swapSeat",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_swapSeat",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->swapSeat(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setFixedDistance(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Player *arg3 = (Player *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Room::setFixedDistance",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setFixedDistance",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setFixedDistance",2,"Player *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::setFixedDistance",3,"Player const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::setFixedDistance",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setFixedDistance",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Room_setFixedDistance",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Room_setFixedDistance",3,SWIGTYPE_p_Player);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setFixedDistance(arg2,(Player const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getFront(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getFront",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getFront",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::getFront",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::getFront",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getFront",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_getFront",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_getFront",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (ServerPlayer *)((Room const *)arg1)->getFront(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_signup(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::signup",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::signup",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::signup",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::signup",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::signup",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::signup",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_signup",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_signup",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->signup(arg2,(char const *)arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getOwner(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getOwner",1,"Room const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getOwner",1,SWIGTYPE_p_Room);
  }
  
  result = (ServerPlayer *)((Room const *)arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_updateStateItem(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::updateStateItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::updateStateItem",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_updateStateItem",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->updateStateItem();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_reconnect(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ClientSocket *arg3 = (ClientSocket *) 0 ;
  
  SWIG_check_num_args("Room::reconnect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::reconnect",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::reconnect",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::reconnect",3,"ClientSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_reconnect",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_reconnect",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ClientSocket,0))){
    SWIG_fail_ptr("Room_reconnect",3,SWIGTYPE_p_ClientSocket);
  }
  
  (arg1)->reconnect(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_marshal(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::marshal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::marshal",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::marshal",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_marshal",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_marshal",2,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->marshal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_sortByActionOrder(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  
  SWIG_check_num_args("Room::sortByActionOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::sortByActionOrder",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::sortByActionOrder",2,"QList< ServerPlayer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_sortByActionOrder",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_sortByActionOrder",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  (arg1)->sortByActionOrder(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setTag(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  
  SWIG_check_num_args("Room::setTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setTag",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::setTag",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::setTag",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setTag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_setTag",3,SWIGTYPE_p_QVariant);
  }
  
  (arg1)->setTag((char const *)arg2,(QVariant const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getTag(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant result;
  
  SWIG_check_num_args("Room::getTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getTag",1,"Room const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::getTag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getTag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((Room const *)arg1)->getTag((char const *)arg2);
  {
    QVariant * resultptr = new QVariant((const QVariant &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QVariant,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_removeTag(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Room::removeTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::removeTag",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::removeTag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_removeTag",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->removeTag((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setEmotion(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::setEmotion",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setEmotion",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::setEmotion",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::setEmotion",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setEmotion",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setEmotion",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setEmotion(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getCardPlace(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  Player::Place result;
  
  SWIG_check_num_args("Room::getCardPlace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCardPlace",1,"Room const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::getCardPlace",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCardPlace",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Player::Place)((Room const *)arg1)->getCardPlace(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getCardIdsOnTable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Room::getCardIdsOnTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCardIdsOnTable",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::getCardIdsOnTable",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCardIdsOnTable",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_getCardIdsOnTable",2,SWIGTYPE_p_Card);
  }
  
  result = ((Room const *)arg1)->getCardIdsOnTable((Card const *)arg2);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getCardIdsOnTable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > *arg2 = 0 ;
  QList< int > result;
  
  SWIG_check_num_args("Room::getCardIdsOnTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCardIdsOnTable",1,"Room const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::getCardIdsOnTable",2,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCardIdsOnTable",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_getCardIdsOnTable",2,SWIGTYPE_p_QListT_int_t);
  }
  
  result = ((Room const *)arg1)->getCardIdsOnTable((QList< int > const &)*arg2);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_getCardIdsOnTable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_getCardIdsOnTable__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Room_getCardIdsOnTable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_getCardIdsOnTable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::getCardIdsOnTable(Card const *) const\n"
    "    Room::getCardIdsOnTable(QList< int > const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Room_getCardOwner(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::getCardOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCardOwner",1,"Room const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::getCardOwner",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCardOwner",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ServerPlayer *)((Room const *)arg1)->getCardOwner(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_setCardMapping(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  Player::Place arg4 ;
  
  SWIG_check_num_args("Room::setCardMapping",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::setCardMapping",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::setCardMapping",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::setCardMapping",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::setCardMapping",4,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_setCardMapping",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_setCardMapping",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  (arg1)->setCardMapping(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Room::drawCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCards",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::drawCards",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::drawCards",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::drawCards",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_drawCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->drawCards(arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::drawCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCards",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::drawCards",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::drawCards",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_drawCards",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->drawCards(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  QList< ServerPlayer * > *argp2 ;
  
  SWIG_check_num_args("Room::drawCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::drawCards",2,"QList< ServerPlayer * >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::drawCards",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::drawCards",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_drawCards",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->drawCards(arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > arg2 ;
  int arg3 ;
  QList< ServerPlayer * > *argp2 ;
  
  SWIG_check_num_args("Room::drawCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::drawCards",2,"QList< ServerPlayer * >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::drawCards",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_drawCards",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->drawCards(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > arg2 ;
  QList< int > arg3 ;
  char *arg4 = (char *) 0 ;
  QList< ServerPlayer * > *argp2 ;
  QList< int > *argp3 ;
  
  SWIG_check_num_args("Room::drawCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::drawCards",2,"QList< ServerPlayer * >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::drawCards",3,"QList< int >");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::drawCards",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_drawCards",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_drawCards",3,SWIGTYPE_p_QListT_int_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->drawCards(arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< ServerPlayer * > arg2 ;
  QList< int > arg3 ;
  QList< ServerPlayer * > *argp2 ;
  QList< int > *argp3 ;
  
  SWIG_check_num_args("Room::drawCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::drawCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::drawCards",2,"QList< ServerPlayer * >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::drawCards",3,"QList< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_drawCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_drawCards",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_drawCards",3,SWIGTYPE_p_QListT_int_t);
  }
  arg3 = *argp3;
  
  (arg1)->drawCards(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_drawCards(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_drawCards__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_drawCards__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_drawCards__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_drawCards__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_drawCards__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_drawCards__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_drawCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::drawCards(ServerPlayer *,int,char const *)\n"
    "    Room::drawCards(ServerPlayer *,int)\n"
    "    Room::drawCards(QList< ServerPlayer * >,int,char const *)\n"
    "    Room::drawCards(QList< ServerPlayer * >,int)\n"
    "    Room::drawCards(QList< ServerPlayer * >,QList< int >,char const *)\n"
    "    Room::drawCards(QList< ServerPlayer * >,QList< int >)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_obtainCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::obtainCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::obtainCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::obtainCard",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::obtainCard",3,"Card const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::obtainCard",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_obtainCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_obtainCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_obtainCard",3,SWIGTYPE_p_Card);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->obtainCard(arg2,(Card const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_obtainCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *arg3 = (Card *) 0 ;
  
  SWIG_check_num_args("Room::obtainCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::obtainCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::obtainCard",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::obtainCard",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_obtainCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_obtainCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_obtainCard",3,SWIGTYPE_p_Card);
  }
  
  (arg1)->obtainCard(arg2,(Card const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_obtainCard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Room::obtainCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::obtainCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::obtainCard",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::obtainCard",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::obtainCard",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_obtainCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_obtainCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->obtainCard(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_obtainCard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Room::obtainCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::obtainCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::obtainCard",2,"ServerPlayer *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Room::obtainCard",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_obtainCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_obtainCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->obtainCard(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_obtainCard__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *arg3 = (Card *) 0 ;
  CardMoveReason *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::obtainCard",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::obtainCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::obtainCard",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::obtainCard",3,"Card const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::obtainCard",4,"CardMoveReason const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::obtainCard",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_obtainCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_obtainCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_obtainCard",3,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_obtainCard",4,SWIGTYPE_p_CardMoveReason);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->obtainCard(arg2,(Card const *)arg3,(CardMoveReason const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_obtainCard__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *arg3 = (Card *) 0 ;
  CardMoveReason *arg4 = 0 ;
  
  SWIG_check_num_args("Room::obtainCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::obtainCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::obtainCard",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::obtainCard",3,"Card const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::obtainCard",4,"CardMoveReason const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_obtainCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_obtainCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_obtainCard",3,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_obtainCard",4,SWIGTYPE_p_CardMoveReason);
  }
  
  (arg1)->obtainCard(arg2,(Card const *)arg3,(CardMoveReason const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_obtainCard(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_obtainCard__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_obtainCard__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_obtainCard__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_obtainCard__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_obtainCard__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_obtainCard__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_obtainCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::obtainCard(ServerPlayer *,Card const *,bool)\n"
    "    Room::obtainCard(ServerPlayer *,Card const *)\n"
    "    Room::obtainCard(ServerPlayer *,int,bool)\n"
    "    Room::obtainCard(ServerPlayer *,int)\n"
    "    Room::obtainCard(ServerPlayer *,Card const *,CardMoveReason const &,bool)\n"
    "    Room::obtainCard(ServerPlayer *,Card const *,CardMoveReason const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_throwCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::throwCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwCard",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::throwCard",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::throwCard",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::throwCard",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwCard",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwCard(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::throwCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwCard",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::throwCard",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::throwCard",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwCard",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwCard(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwCard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::throwCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::throwCard",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::throwCard",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::throwCard",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_throwCard",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwCard((Card const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwCard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::throwCard",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::throwCard",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::throwCard",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_throwCard",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",3,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwCard((Card const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwCard__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  CardMoveReason *arg3 = 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  ServerPlayer *arg5 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::throwCard",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::throwCard",2,"Card const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::throwCard",3,"CardMoveReason const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::throwCard",4,"ServerPlayer *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Room::throwCard",5,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_throwCard",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_throwCard",3,SWIGTYPE_p_CardMoveReason);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",5,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwCard((Card const *)arg2,(CardMoveReason const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwCard__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  CardMoveReason *arg3 = 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Room::throwCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::throwCard",2,"Card const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::throwCard",3,"CardMoveReason const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::throwCard",4,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_throwCard",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_throwCard",3,SWIGTYPE_p_CardMoveReason);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_throwCard",4,SWIGTYPE_p_ServerPlayer);
  }
  
  (arg1)->throwCard((Card const *)arg2,(CardMoveReason const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwCard(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_throwCard__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_throwCard__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_throwCard__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_throwCard__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_throwCard__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Room_throwCard__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_throwCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::throwCard(int,ServerPlayer *,ServerPlayer *)\n"
    "    Room::throwCard(int,ServerPlayer *)\n"
    "    Room::throwCard(Card const *,ServerPlayer *,ServerPlayer *)\n"
    "    Room::throwCard(Card const *,ServerPlayer *)\n"
    "    Room::throwCard(Card const *,CardMoveReason const &,ServerPlayer *,ServerPlayer *)\n"
    "    Room::throwCard(Card const *,CardMoveReason const &,ServerPlayer *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_moveCardTo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  Player::Place arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Room::moveCardTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"Player::Place");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  Player::Place arg4 ;
  
  SWIG_check_num_args("Room::moveCardTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"Player::Place");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  Player::Place arg4 ;
  CardMoveReason *arg5 = 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("Room::moveCardTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"Player::Place");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"CardMoveReason const &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::moveCardTo",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_moveCardTo",5,SWIGTYPE_p_CardMoveReason);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,(CardMoveReason const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  Player::Place arg4 ;
  CardMoveReason *arg5 = 0 ;
  
  SWIG_check_num_args("Room::moveCardTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"Player::Place");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"CardMoveReason const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (Player::Place)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_moveCardTo",5,SWIGTYPE_p_CardMoveReason);
  }
  
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,(CardMoveReason const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  Player::Place arg5 ;
  CardMoveReason *arg6 = 0 ;
  bool arg7 ;
  
  SWIG_check_num_args("Room::moveCardTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"ServerPlayer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"Player::Place");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Room::moveCardTo",6,"CardMoveReason const &");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::moveCardTo",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (Player::Place)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_moveCardTo",6,SWIGTYPE_p_CardMoveReason);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,arg5,(CardMoveReason const &)*arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  Player::Place arg5 ;
  CardMoveReason *arg6 = 0 ;
  
  SWIG_check_num_args("Room::moveCardTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"ServerPlayer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"Player::Place");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Room::moveCardTo",6,"CardMoveReason const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (Player::Place)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_moveCardTo",6,SWIGTYPE_p_CardMoveReason);
  }
  
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,arg5,(CardMoveReason const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  Player::Place arg5 ;
  char *arg6 = (char *) 0 ;
  CardMoveReason *arg7 = 0 ;
  bool arg8 ;
  
  SWIG_check_num_args("Room::moveCardTo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"ServerPlayer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"Player::Place");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::moveCardTo",6,"char const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Room::moveCardTo",7,"CardMoveReason const &");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Room::moveCardTo",8,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (Player::Place)(int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_moveCardTo",7,SWIGTYPE_p_CardMoveReason);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,arg5,(char const *)arg6,(CardMoveReason const &)*arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  Player::Place arg5 ;
  char *arg6 = (char *) 0 ;
  CardMoveReason *arg7 = 0 ;
  
  SWIG_check_num_args("Room::moveCardTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::moveCardTo",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::moveCardTo",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::moveCardTo",4,"ServerPlayer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::moveCardTo",5,"Player::Place");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::moveCardTo",6,"char const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Room::moveCardTo",7,"CardMoveReason const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_moveCardTo",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_moveCardTo",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (Player::Place)(int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_moveCardTo",7,SWIGTYPE_p_CardMoveReason);
  }
  
  (arg1)->moveCardTo((Card const *)arg2,arg3,arg4,arg5,(char const *)arg6,(CardMoveReason const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardTo(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_moveCardTo__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Room_moveCardTo__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_moveCardTo__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Room_moveCardTo__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_moveCardTo__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_moveCardTo__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_Room_moveCardTo__SWIG_7(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Room_moveCardTo__SWIG_6(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_moveCardTo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,Player::Place,bool)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,Player::Place)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,Player::Place,CardMoveReason const &,bool)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,Player::Place,CardMoveReason const &)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,ServerPlayer *,Player::Place,CardMoveReason const &,bool)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,ServerPlayer *,Player::Place,CardMoveReason const &)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,ServerPlayer *,Player::Place,char const *,CardMoveReason const &,bool)\n"
    "    Room::moveCardTo(Card const *,ServerPlayer *,ServerPlayer *,Player::Place,char const *,CardMoveReason const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_moveCardsAtomic__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< CardsMoveStruct > arg2 ;
  bool arg3 ;
  QList< CardsMoveStruct > *argp2 ;
  
  SWIG_check_num_args("Room::moveCardsAtomic",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardsAtomic",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCardsAtomic",2,"QList< CardsMoveStruct >");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::moveCardsAtomic",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardsAtomic",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("Room_moveCardsAtomic",2,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->moveCardsAtomic(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardsAtomic__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardsMoveStruct arg2 ;
  bool arg3 ;
  CardsMoveStruct *argp2 ;
  
  SWIG_check_num_args("Room::moveCardsAtomic",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardsAtomic",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCardsAtomic",2,"CardsMoveStruct");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::moveCardsAtomic",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardsAtomic",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("Room_moveCardsAtomic",2,SWIGTYPE_p_CardsMoveStruct);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->moveCardsAtomic(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCardsAtomic(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_moveCardsAtomic__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardsMoveStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_moveCardsAtomic__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_moveCardsAtomic'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::moveCardsAtomic(QList< CardsMoveStruct >,bool)\n"
    "    Room::moveCardsAtomic(CardsMoveStruct,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_moveCardsToEndOfDrawpile(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< int > arg2 ;
  QList< int > *argp2 ;
  
  SWIG_check_num_args("Room::moveCardsToEndOfDrawpile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCardsToEndOfDrawpile",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCardsToEndOfDrawpile",2,"QList< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCardsToEndOfDrawpile",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_moveCardsToEndOfDrawpile",2,SWIGTYPE_p_QListT_int_t);
  }
  arg2 = *argp2;
  
  (arg1)->moveCardsToEndOfDrawpile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCards__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardsMoveStruct arg2 ;
  bool arg3 ;
  bool arg4 ;
  CardsMoveStruct *argp2 ;
  
  SWIG_check_num_args("Room::moveCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCards",2,"CardsMoveStruct");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::moveCards",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::moveCards",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("Room_moveCards",2,SWIGTYPE_p_CardsMoveStruct);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->moveCards(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCards__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardsMoveStruct arg2 ;
  bool arg3 ;
  CardsMoveStruct *argp2 ;
  
  SWIG_check_num_args("Room::moveCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCards",2,"CardsMoveStruct");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::moveCards",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("Room_moveCards",2,SWIGTYPE_p_CardsMoveStruct);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->moveCards(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCards__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< CardsMoveStruct > arg2 ;
  bool arg3 ;
  bool arg4 ;
  QList< CardsMoveStruct > *argp2 ;
  
  SWIG_check_num_args("Room::moveCards",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCards",2,"QList< CardsMoveStruct >");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::moveCards",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::moveCards",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("Room_moveCards",2,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->moveCards(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCards__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  QList< CardsMoveStruct > arg2 ;
  bool arg3 ;
  QList< CardsMoveStruct > *argp2 ;
  
  SWIG_check_num_args("Room::moveCards",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::moveCards",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::moveCards",2,"QList< CardsMoveStruct >");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Room::moveCards",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_moveCards",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_QListT_CardsMoveStruct_t,0))){
    SWIG_fail_ptr("Room_moveCards",2,SWIGTYPE_p_QListT_CardsMoveStruct_t);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->moveCards(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_moveCards(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardsMoveStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_moveCards__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_moveCards__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_CardsMoveStruct_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_moveCards__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CardsMoveStruct, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_moveCards__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_moveCards'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::moveCards(CardsMoveStruct,bool,bool)\n"
    "    Room::moveCards(CardsMoveStruct,bool)\n"
    "    Room::moveCards(QList< CardsMoveStruct >,bool,bool)\n"
    "    Room::moveCards(QList< CardsMoveStruct >,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_activate(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("Room::activate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::activate",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::activate",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::activate",3,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_activate",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_activate",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("Room_activate",3,SWIGTYPE_p_CardUseStruct);
  }
  
  (arg1)->activate(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForLuckCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  
  SWIG_check_num_args("Room::askForLuckCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForLuckCard",1,"Room *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForLuckCard",1,SWIGTYPE_p_Room);
  }
  
  (arg1)->askForLuckCard();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForSuit(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card::Suit result;
  
  SWIG_check_num_args("Room::askForSuit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForSuit",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForSuit",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForSuit",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForSuit",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForSuit",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card::Suit)(arg1)->askForSuit(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForKingdom(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForKingdom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForKingdom",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForKingdom",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForKingdom",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForKingdom",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (arg1)->askForKingdom(arg2);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForSkillInvoke__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Room::askForSkillInvoke",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForSkillInvoke",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForSkillInvoke",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForSkillInvoke",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Room::askForSkillInvoke",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForSkillInvoke",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForSkillInvoke",4,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->askForSkillInvoke(arg2,(char const *)arg3,(QVariant const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForSkillInvoke__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::askForSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForSkillInvoke",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForSkillInvoke",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForSkillInvoke",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForSkillInvoke",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForSkillInvoke",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->askForSkillInvoke(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForSkillInvoke(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_askForSkillInvoke__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Room_askForSkillInvoke__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForSkillInvoke'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForSkillInvoke(ServerPlayer *,char const *,QVariant const &)\n"
    "    Room::askForSkillInvoke(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForChoice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForChoice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForChoice",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForChoice",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForChoice",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForChoice",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForChoice",5,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForChoice",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForChoice",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForChoice",5,SWIGTYPE_p_QVariant);
  }
  
  result = (arg1)->askForChoice(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForChoice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForChoice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForChoice",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForChoice",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForChoice",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForChoice",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForChoice",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForChoice",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (arg1)->askForChoice(arg2,(char const *)arg3,(char const *)arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForChoice(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForChoice__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Room_askForChoice__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForChoice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForChoice(ServerPlayer *,char const *,char const *,QVariant const &)\n"
    "    Room::askForChoice(ServerPlayer *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForDiscard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::askForDiscard",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForDiscard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForDiscard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForDiscard",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForDiscard",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForDiscard",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForDiscard",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForDiscard",7,"bool");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("Room::askForDiscard",8,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForDiscard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForDiscard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (char *)lua_tostring(L, 8);
  result = (bool)(arg1)->askForDiscard(arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForDiscard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  SWIG_check_num_args("Room::askForDiscard",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForDiscard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForDiscard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForDiscard",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForDiscard",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForDiscard",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForDiscard",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForDiscard",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForDiscard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForDiscard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (bool)(arg1)->askForDiscard(arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForDiscard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool result;
  
  SWIG_check_num_args("Room::askForDiscard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForDiscard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForDiscard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForDiscard",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForDiscard",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForDiscard",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForDiscard",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForDiscard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForDiscard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (bool)(arg1)->askForDiscard(arg2,(char const *)arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForDiscard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("Room::askForDiscard",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForDiscard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForDiscard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForDiscard",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForDiscard",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForDiscard",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForDiscard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForDiscard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)(arg1)->askForDiscard(arg2,(char const *)arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForDiscard(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForDiscard__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForDiscard__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForDiscard__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Room_askForDiscard__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForDiscard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForDiscard(ServerPlayer *,char const *,int,int,bool,bool,char const *)\n"
    "    Room::askForDiscard(ServerPlayer *,char const *,int,int,bool,bool)\n"
    "    Room::askForDiscard(ServerPlayer *,char const *,int,int,bool)\n"
    "    Room::askForDiscard(ServerPlayer *,char const *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForExchange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForExchange",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForExchange",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForExchange",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForExchange",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForExchange",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForExchange",5,"bool");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::askForExchange",6,"char const *");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForExchange",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForExchange",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForExchange",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Card *)(arg1)->askForExchange(arg2,(char const *)arg3,arg4,arg5,(char const *)arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForExchange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForExchange",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForExchange",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForExchange",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForExchange",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForExchange",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForExchange",5,"bool");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::askForExchange",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForExchange",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForExchange",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (char *)lua_tostring(L, 6);
  result = (Card *)(arg1)->askForExchange(arg2,(char const *)arg3,arg4,arg5,(char const *)arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForExchange__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForExchange",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForExchange",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForExchange",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForExchange",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForExchange",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForExchange",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForExchange",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForExchange",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Card *)(arg1)->askForExchange(arg2,(char const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForExchange__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForExchange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForExchange",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForExchange",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForExchange",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::askForExchange",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForExchange",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForExchange",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (Card *)(arg1)->askForExchange(arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForExchange(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForExchange__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForExchange__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForExchange__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForExchange__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForExchange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForExchange(ServerPlayer *,char const *,int,bool,char const *,bool)\n"
    "    Room::askForExchange(ServerPlayer *,char const *,int,bool,char const *)\n"
    "    Room::askForExchange(ServerPlayer *,char const *,int,bool)\n"
    "    Room::askForExchange(ServerPlayer *,char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForNullification(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  bool arg5 ;
  bool result;
  
  SWIG_check_num_args("Room::askForNullification",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForNullification",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForNullification",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForNullification",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::askForNullification",4,"ServerPlayer *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForNullification",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForNullification",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Room_askForNullification",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForNullification",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForNullification",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)(arg1)->askForNullification((Card const *)arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_isCanceled(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Room::isCanceled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::isCanceled",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::isCanceled",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_isCanceled",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("Room_isCanceled",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (bool)(arg1)->isCanceled((CardEffectStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCardChosen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  Card::HandlingMethod arg7 ;
  QList< int > *arg8 = 0 ;
  int result;
  
  SWIG_check_num_args("Room::askForCardChosen",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCardChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForCardChosen",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCardChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForCardChosen",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForCardChosen",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Room::askForCardChosen",7,"Card::HandlingMethod");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Room::askForCardChosen",8,"QList< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCardChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (Card::HandlingMethod)(int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForCardChosen",8,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (int)(arg1)->askForCardChosen(arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(QList< int > const &)*arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCardChosen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  Card::HandlingMethod arg7 ;
  int result;
  
  SWIG_check_num_args("Room::askForCardChosen",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCardChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForCardChosen",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCardChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForCardChosen",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForCardChosen",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Room::askForCardChosen",7,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCardChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (Card::HandlingMethod)(int)lua_tonumber(L, 7);
  result = (int)(arg1)->askForCardChosen(arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCardChosen__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  int result;
  
  SWIG_check_num_args("Room::askForCardChosen",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCardChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForCardChosen",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCardChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForCardChosen",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForCardChosen",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCardChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (int)(arg1)->askForCardChosen(arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCardChosen__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Room::askForCardChosen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCardChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForCardChosen",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCardChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForCardChosen",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCardChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardChosen",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)(arg1)->askForCardChosen(arg2,arg3,(char const *)arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCardChosen(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForCardChosen__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForCardChosen__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForCardChosen__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_Room_askForCardChosen__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForCardChosen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForCardChosen(ServerPlayer *,ServerPlayer *,char const *,char const *,bool,Card::HandlingMethod,QList< int > const &)\n"
    "    Room::askForCardChosen(ServerPlayer *,ServerPlayer *,char const *,char const *,bool,Card::HandlingMethod)\n"
    "    Room::askForCardChosen(ServerPlayer *,ServerPlayer *,char const *,char const *,bool)\n"
    "    Room::askForCardChosen(ServerPlayer *,ServerPlayer *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::askForCard",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  arg6 = (char *)lua_tostring(L, 6);
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5,(char const *)arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  Card::HandlingMethod arg6 ;
  ServerPlayer *arg7 = (ServerPlayer *) 0 ;
  bool arg8 ;
  char *arg9 = (char *) 0 ;
  bool arg10 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForCard",6,"Card::HandlingMethod");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Room::askForCard",7,"ServerPlayer *");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Room::askForCard",8,"bool");
  if(!SWIG_lua_isnilstring(L,9)) SWIG_fail_arg("Room::askForCard",9,"char const *");
  if(!lua_isboolean(L,10)) SWIG_fail_arg("Room::askForCard",10,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",7,SWIGTYPE_p_ServerPlayer);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  arg9 = (char *)lua_tostring(L, 9);
  arg10 = (lua_toboolean(L, 10)!=0);
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5,arg6,arg7,arg8,(char const *)arg9,arg10);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  Card::HandlingMethod arg6 ;
  ServerPlayer *arg7 = (ServerPlayer *) 0 ;
  bool arg8 ;
  char *arg9 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForCard",6,"Card::HandlingMethod");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Room::askForCard",7,"ServerPlayer *");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Room::askForCard",8,"bool");
  if(!SWIG_lua_isnilstring(L,9)) SWIG_fail_arg("Room::askForCard",9,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",7,SWIGTYPE_p_ServerPlayer);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  arg9 = (char *)lua_tostring(L, 9);
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5,arg6,arg7,arg8,(char const *)arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  Card::HandlingMethod arg6 ;
  ServerPlayer *arg7 = (ServerPlayer *) 0 ;
  bool arg8 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForCard",6,"Card::HandlingMethod");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Room::askForCard",7,"ServerPlayer *");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Room::askForCard",8,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",7,SWIGTYPE_p_ServerPlayer);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  Card::HandlingMethod arg6 ;
  ServerPlayer *arg7 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForCard",6,"Card::HandlingMethod");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Room::askForCard",7,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",7,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  Card::HandlingMethod arg6 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForCard",6,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QVariant *arg5 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Room::askForCard",5,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForCard",5,SWIGTYPE_p_QVariant);
  }
  
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4,(QVariant const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCard",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (Card *)(arg1)->askForCard(arg2,(char const *)arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCard(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForCard__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Room_askForCard__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForCard__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForCard__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_Room_askForCard__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Room_askForCard__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = SWIG_lua_isnilstring(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_Room_askForCard__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = SWIG_lua_isnilstring(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isboolean(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_Room_askForCard__SWIG_1(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &,char const *)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &,Card::HandlingMethod,ServerPlayer *,bool,char const *,bool)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &,Card::HandlingMethod,ServerPlayer *,bool,char const *)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &,Card::HandlingMethod,ServerPlayer *,bool)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &,Card::HandlingMethod,ServerPlayer *)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &,Card::HandlingMethod)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *,QVariant const &)\n"
    "    Room::askForCard(ServerPlayer *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForUseCard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  Card::HandlingMethod arg6 ;
  bool arg7 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseCard",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForUseCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseCard",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForUseCard",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForUseCard",6,"Card::HandlingMethod");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForUseCard",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Card *)(arg1)->askForUseCard(arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseCard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  Card::HandlingMethod arg6 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseCard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForUseCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseCard",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForUseCard",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Room::askForUseCard",6,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (Card::HandlingMethod)(int)lua_tonumber(L, 6);
  result = (Card *)(arg1)->askForUseCard(arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseCard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseCard",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForUseCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseCard",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Room::askForUseCard",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (Card *)(arg1)->askForUseCard(arg2,(char const *)arg3,(char const *)arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseCard__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseCard",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseCard",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForUseCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseCard",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseCard",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseCard",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (Card *)(arg1)->askForUseCard(arg2,(char const *)arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseCard(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForUseCard__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForUseCard__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForUseCard__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForUseCard__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForUseCard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForUseCard(ServerPlayer *,char const *,char const *,int,Card::HandlingMethod,bool)\n"
    "    Room::askForUseCard(ServerPlayer *,char const *,char const *,int,Card::HandlingMethod)\n"
    "    Room::askForUseCard(ServerPlayer *,char const *,char const *,int)\n"
    "    Room::askForUseCard(ServerPlayer *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForUseSlashTo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForUseSlashTo",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForUseSlashTo",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForUseSlashTo",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForUseSlashTo",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForUseSlashTo",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForUseSlashTo",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  QList< ServerPlayer * > *argp3 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"QList< ServerPlayer * >");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForUseSlashTo",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForUseSlashTo",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForUseSlashTo",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  QList< ServerPlayer * > *argp3 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"QList< ServerPlayer * >");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForUseSlashTo",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForUseSlashTo",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  QList< ServerPlayer * > *argp3 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"QList< ServerPlayer * >");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForUseSlashTo",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > arg3 ;
  char *arg4 = (char *) 0 ;
  QList< ServerPlayer * > *argp3 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForUseSlashTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForUseSlashTo",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForUseSlashTo",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForUseSlashTo",3,"QList< ServerPlayer * >");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForUseSlashTo",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForUseSlashTo",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg3 = *argp3;
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (Card *)(arg1)->askForUseSlashTo(arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForUseSlashTo(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForUseSlashTo__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForUseSlashTo__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForUseSlashTo__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForUseSlashTo__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForUseSlashTo__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForUseSlashTo__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForUseSlashTo__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForUseSlashTo__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForUseSlashTo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForUseSlashTo(ServerPlayer *,ServerPlayer *,char const *,bool,bool,bool)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,ServerPlayer *,char const *,bool,bool)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,ServerPlayer *,char const *,bool)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,ServerPlayer *,char const *)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,QList< ServerPlayer * >,char const *,bool,bool,bool)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,QList< ServerPlayer * >,char const *,bool,bool)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,QList< ServerPlayer * >,char const *,bool)\n"
    "    Room::askForUseSlashTo(ServerPlayer *,QList< ServerPlayer * >,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForAG(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Room::askForAG",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForAG",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForAG",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForAG",3,"QList< int > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Room::askForAG",4,"bool");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForAG",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForAG",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForAG",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForAG",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)(arg1)->askForAG(arg2,(QList< int > const &)*arg3,arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForCardShow(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForCardShow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForCardShow",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForCardShow",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForCardShow",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForCardShow",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForCardShow",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardShow",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForCardShow",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (Card *)(arg1)->askForCardShow(arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  int arg8 ;
  QList< ServerPlayer * > arg9 ;
  CardMoveReason arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  QList< ServerPlayer * > *argp9 ;
  CardMoveReason *argp10 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForYiji",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Room::askForYiji",8,"int");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("Room::askForYiji",9,"QList< ServerPlayer * >");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("Room::askForYiji",10,"CardMoveReason");
  if(!SWIG_lua_isnilstring(L,11)) SWIG_fail_arg("Room::askForYiji",11,"char const *");
  if(!lua_isboolean(L,12)) SWIG_fail_arg("Room::askForYiji",12,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForYiji",9,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_askForYiji",10,SWIGTYPE_p_CardMoveReason);
  }
  arg10 = *argp10;
  
  arg11 = (char *)lua_tostring(L, 11);
  arg12 = (lua_toboolean(L, 12)!=0);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char const *)arg11,arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  int arg8 ;
  QList< ServerPlayer * > arg9 ;
  CardMoveReason arg10 ;
  char *arg11 = (char *) 0 ;
  QList< ServerPlayer * > *argp9 ;
  CardMoveReason *argp10 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForYiji",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Room::askForYiji",8,"int");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("Room::askForYiji",9,"QList< ServerPlayer * >");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("Room::askForYiji",10,"CardMoveReason");
  if(!SWIG_lua_isnilstring(L,11)) SWIG_fail_arg("Room::askForYiji",11,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForYiji",9,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_askForYiji",10,SWIGTYPE_p_CardMoveReason);
  }
  arg10 = *argp10;
  
  arg11 = (char *)lua_tostring(L, 11);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char const *)arg11);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  int arg8 ;
  QList< ServerPlayer * > arg9 ;
  CardMoveReason arg10 ;
  QList< ServerPlayer * > *argp9 ;
  CardMoveReason *argp10 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForYiji",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Room::askForYiji",8,"int");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("Room::askForYiji",9,"QList< ServerPlayer * >");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("Room::askForYiji",10,"CardMoveReason");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForYiji",9,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_CardMoveReason,0))){
    SWIG_fail_ptr("Room_askForYiji",10,SWIGTYPE_p_CardMoveReason);
  }
  arg10 = *argp10;
  
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  int arg8 ;
  QList< ServerPlayer * > arg9 ;
  QList< ServerPlayer * > *argp9 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForYiji",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Room::askForYiji",8,"int");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("Room::askForYiji",9,"QList< ServerPlayer * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForYiji",9,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  arg9 = *argp9;
  
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  int arg8 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForYiji",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Room::askForYiji",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (int)lua_tonumber(L, 8);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForYiji",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForYiji",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForYiji",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForYiji",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->askForYiji(arg2,*arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< int > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Room::askForYiji",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForYiji",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForYiji",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForYiji",3,"QList< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForYiji",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForYiji",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("Room_askForYiji",3,SWIGTYPE_p_QListT_int_t);
  }
  
  result = (bool)(arg1)->askForYiji(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForYiji(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Room_askForYiji__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForYiji__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForYiji__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForYiji__SWIG_6(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForYiji__SWIG_5(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Room_askForYiji__SWIG_4(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_Room_askForYiji__SWIG_3(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        return _wrap_Room_askForYiji__SWIG_2(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          _v = SWIG_lua_isnilstring(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_Room_askForYiji__SWIG_1(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_CardMoveReason, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          _v = SWIG_lua_isnilstring(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isboolean(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_Room_askForYiji__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForYiji'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool,bool,int,QList< ServerPlayer * >,CardMoveReason,char const *,bool)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool,bool,int,QList< ServerPlayer * >,CardMoveReason,char const *)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool,bool,int,QList< ServerPlayer * >,CardMoveReason)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool,bool,int,QList< ServerPlayer * >)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool,bool,int)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool,bool)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool,bool)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *,bool)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &,char const *)\n"
    "    Room::askForYiji(ServerPlayer *,QList< int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForPindian(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  char *arg5 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForPindian",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForPindian",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForPindian",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForPindian",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Room::askForPindian",4,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForPindian",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForPindian",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPindian",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPindian",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPindian",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (char *)lua_tostring(L, 5);
  result = (Card *)(arg1)->askForPindian(arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForPindianRace(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  char *arg4 = (char *) 0 ;
  QList< Card const * > result;
  
  SWIG_check_num_args("Room::askForPindianRace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForPindianRace",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForPindianRace",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForPindianRace",3,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForPindianRace",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForPindianRace",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPindianRace",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPindianRace",3,SWIGTYPE_p_ServerPlayer);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (arg1)->askForPindianRace(arg2,arg3,(char const *)arg4);
  {
    QList< Card const * > * resultptr = new QList< Card const * >((const QList< Card const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_Card_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForPlayerChosen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::askForPlayerChosen",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForPlayerChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForPlayerChosen",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForPlayerChosen",3,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForPlayerChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForPlayerChosen",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForPlayerChosen",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Room::askForPlayerChosen",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen(arg2,(QList< ServerPlayer * > const &)*arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForPlayerChosen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::askForPlayerChosen",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForPlayerChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForPlayerChosen",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForPlayerChosen",3,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForPlayerChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForPlayerChosen",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Room::askForPlayerChosen",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen(arg2,(QList< ServerPlayer * > const &)*arg3,(char const *)arg4,(char const *)arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForPlayerChosen__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::askForPlayerChosen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForPlayerChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForPlayerChosen",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForPlayerChosen",3,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForPlayerChosen",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Room::askForPlayerChosen",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen(arg2,(QList< ServerPlayer * > const &)*arg3,(char const *)arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForPlayerChosen__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::askForPlayerChosen",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForPlayerChosen",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForPlayerChosen",2,"ServerPlayer *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Room::askForPlayerChosen",3,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForPlayerChosen",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("Room_askForPlayerChosen",3,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen(arg2,(QList< ServerPlayer * > const &)*arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForPlayerChosen(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForPlayerChosen__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForPlayerChosen__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForPlayerChosen__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QListT_ServerPlayer_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Room_askForPlayerChosen__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForPlayerChosen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForPlayerChosen(ServerPlayer *,QList< ServerPlayer * > const &,char const *,char const *,bool,bool)\n"
    "    Room::askForPlayerChosen(ServerPlayer *,QList< ServerPlayer * > const &,char const *,char const *,bool)\n"
    "    Room::askForPlayerChosen(ServerPlayer *,QList< ServerPlayer * > const &,char const *,char const *)\n"
    "    Room::askForPlayerChosen(ServerPlayer *,QList< ServerPlayer * > const &,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForGeneral__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  QVariant *arg7 = 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForGeneral",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGeneral",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGeneral",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForGeneral",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForGeneral",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForGeneral",5,"bool");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::askForGeneral",6,"char const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Room::askForGeneral",7,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGeneral",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGeneral",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (char *)lua_tostring(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("Room_askForGeneral",7,SWIGTYPE_p_QVariant);
  }
  
  result = (arg1)->askForGeneral(arg2,(char const *)arg3,(char const *)arg4,arg5,(char const *)arg6,(QVariant const &)*arg7);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGeneral__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForGeneral",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGeneral",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGeneral",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForGeneral",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForGeneral",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForGeneral",5,"bool");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Room::askForGeneral",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGeneral",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGeneral",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (char *)lua_tostring(L, 6);
  result = (arg1)->askForGeneral(arg2,(char const *)arg3,(char const *)arg4,arg5,(char const *)arg6);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGeneral__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  QString result;
  
  SWIG_check_num_args("Room::askForGeneral",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGeneral",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGeneral",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForGeneral",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForGeneral",4,"char const *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Room::askForGeneral",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGeneral",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGeneral",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (arg1)->askForGeneral(arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGeneral__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForGeneral",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGeneral",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGeneral",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForGeneral",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Room::askForGeneral",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGeneral",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGeneral",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (arg1)->askForGeneral(arg2,(char const *)arg3,(char const *)arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGeneral__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  QString result;
  
  SWIG_check_num_args("Room::askForGeneral",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForGeneral",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForGeneral",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::askForGeneral",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForGeneral",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForGeneral",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (arg1)->askForGeneral(arg2,(char const *)arg3);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_askForGeneral(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_askForGeneral__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_askForGeneral__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Room_askForGeneral__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_Room_askForGeneral__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_Room_askForGeneral__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_askForGeneral'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::askForGeneral(ServerPlayer *,char const *,char const *,bool,char const *,QVariant const &)\n"
    "    Room::askForGeneral(ServerPlayer *,char const *,char const *,bool,char const *)\n"
    "    Room::askForGeneral(ServerPlayer *,char const *,char const *,bool)\n"
    "    Room::askForGeneral(ServerPlayer *,char const *,char const *)\n"
    "    Room::askForGeneral(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_askForSinglePeach(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::askForSinglePeach",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::askForSinglePeach",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::askForSinglePeach",2,"ServerPlayer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Room::askForSinglePeach",3,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_askForSinglePeach",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForSinglePeach",2,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_askForSinglePeach",3,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)(arg1)->askForSinglePeach(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_addPlayerHistory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Room::addPlayerHistory",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::addPlayerHistory",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::addPlayerHistory",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::addPlayerHistory",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Room::addPlayerHistory",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_addPlayerHistory",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_addPlayerHistory",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->addPlayerHistory(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_addPlayerHistory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Room::addPlayerHistory",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::addPlayerHistory",1,"Room *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::addPlayerHistory",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Room::addPlayerHistory",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_addPlayerHistory",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_addPlayerHistory",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->addPlayerHistory(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_addPlayerHistory(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Room_addPlayerHistory__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Room_addPlayerHistory__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Room_addPlayerHistory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Room::addPlayerHistory(ServerPlayer *,char const *,int)\n"
    "    Room::addPlayerHistory(ServerPlayer *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Room_getCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("Room::getCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::getCard",1,"Room const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::getCard",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_getCard",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Card *)((Room const *)arg1)->getCard(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_resetCard(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Room::resetCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::resetCard",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::resetCard",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_resetCard",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->resetCard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_updateCardsOnLose(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Room::updateCardsOnLose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::updateCardsOnLose",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::updateCardsOnLose",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_updateCardsOnLose",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("Room_updateCardsOnLose",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  (arg1)->updateCardsOnLose((CardsMoveStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_updateCardsOnGet(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  CardsMoveStruct *arg2 = 0 ;
  
  SWIG_check_num_args("Room::updateCardsOnGet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::updateCardsOnGet",1,"Room *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Room::updateCardsOnGet",2,"CardsMoveStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_updateCardsOnGet",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardsMoveStruct,0))){
    SWIG_fail_ptr("Room_updateCardsOnGet",2,SWIGTYPE_p_CardsMoveStruct);
  }
  
  (arg1)->updateCardsOnGet((CardsMoveStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_nextPlayer(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("Room::nextPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::nextPlayer",1,"Room const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Room::nextPlayer",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_nextPlayer",1,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Room_nextPlayer",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (ServerPlayer *)Room_nextPlayer((Room const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_writeToConsole(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Room::writeToConsole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::writeToConsole",1,"Room *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Room::writeToConsole",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_writeToConsole",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  Room_writeToConsole(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Room_throwEvent(lua_State* L) {
  int SWIG_arg = 0;
  Room *arg1 = (Room *) 0 ;
  TriggerEvent arg2 ;
  
  SWIG_check_num_args("Room::throwEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Room::throwEvent",1,"Room *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Room::throwEvent",2,"TriggerEvent const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("Room_throwEvent",1,SWIGTYPE_p_Room);
  }
  
  arg2 = (TriggerEvent const)(int)lua_tonumber(L, 2);
  Room_throwEvent(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Room(void *obj) {
Room *arg1 = (Room *) obj;
delete arg1;
}
static swig_lua_method swig_Room_methods[] = {
    {"isFull", _wrap_Room_isFull}, 
    {"isFinished", _wrap_Room_isFinished}, 
    {"canPause", _wrap_Room_canPause}, 
    {"tryPause", _wrap_Room_tryPause}, 
    {"getMode", _wrap_Room_getMode}, 
    {"getThread", _wrap_Room_getThread}, 
    {"getCurrent", _wrap_Room_getCurrent}, 
    {"setCurrent", _wrap_Room_setCurrent}, 
    {"alivePlayerCount", _wrap_Room_alivePlayerCount}, 
    {"getOtherPlayers", _wrap_Room_getOtherPlayers}, 
    {"getPlayers", _wrap_Room_getPlayers}, 
    {"getAllPlayers", _wrap_Room_getAllPlayers}, 
    {"getAlivePlayers", _wrap_Room_getAlivePlayers}, 
    {"output", _wrap_Room_output}, 
    {"outputEventStack", _wrap_Room_outputEventStack}, 
    {"enterDying", _wrap_Room_enterDying}, 
    {"getCurrentDyingPlayer", _wrap_Room_getCurrentDyingPlayer}, 
    {"killPlayer", _wrap_Room_killPlayer}, 
    {"revivePlayer", _wrap_Room_revivePlayer}, 
    {"aliveRoles", _wrap_Room_aliveRoles}, 
    {"gameOver", _wrap_Room_gameOver}, 
    {"slashEffect", _wrap_Room_slashEffect}, 
    {"slashResult", _wrap_Room_slashResult}, 
    {"attachSkillToPlayer", _wrap_Room_attachSkillToPlayer}, 
    {"detachSkillFromPlayer", _wrap_Room_detachSkillFromPlayer}, 
    {"handleAcquireDetachSkills", _wrap_Room_handleAcquireDetachSkills}, 
    {"setPlayerFlag", _wrap_Room_setPlayerFlag}, 
    {"setPlayerProperty", _wrap_Room_setPlayerProperty}, 
    {"setPlayerMark", _wrap_Room_setPlayerMark}, 
    {"addPlayerMark", _wrap_Room_addPlayerMark}, 
    {"removePlayerMark", _wrap_Room_removePlayerMark}, 
    {"setPlayerCardLimitation", _wrap_Room_setPlayerCardLimitation}, 
    {"removePlayerCardLimitation", _wrap_Room_removePlayerCardLimitation}, 
    {"clearPlayerCardLimitation", _wrap_Room_clearPlayerCardLimitation}, 
    {"setPlayerDisableShow", _wrap_Room_setPlayerDisableShow}, 
    {"removePlayerDisableShow", _wrap_Room_removePlayerDisableShow}, 
    {"setCardFlag", _wrap_Room_setCardFlag}, 
    {"clearCardFlag", _wrap_Room_clearCardFlag}, 
    {"useCard", _wrap_Room_useCard}, 
    {"damage", _wrap_Room_damage}, 
    {"sendDamageLog", _wrap_Room_sendDamageLog}, 
    {"loseHp", _wrap_Room_loseHp}, 
    {"loseMaxHp", _wrap_Room_loseMaxHp}, 
    {"applyDamage", _wrap_Room_applyDamage}, 
    {"recover", _wrap_Room_recover}, 
    {"cardEffect", _wrap_Room_cardEffect}, 
    {"isJinkEffected", _wrap_Room_isJinkEffected}, 
    {"judge", _wrap_Room_judge}, 
    {"sendJudgeResult", _wrap_Room_sendJudgeResult}, 
    {"getNCards", _wrap_Room_getNCards}, 
    {"getLord", _wrap_Room_getLord}, 
    {"askForGuanxing", _wrap_Room_askForGuanxing}, 
    {"doGongxin", _wrap_Room_doGongxin}, 
    {"drawCard", _wrap_Room_drawCard}, 
    {"fillAG", _wrap_Room_fillAG}, 
    {"takeAG", _wrap_Room_takeAG}, 
    {"clearAG", _wrap_Room_clearAG}, 
    {"provide", _wrap_Room_provide}, 
    {"getLieges", _wrap_Room_getLieges}, 
    {"sendLog", _wrap_Room_sendLog}, 
    {"showCard", _wrap_Room_showCard}, 
    {"showAllCards", _wrap_Room_showAllCards}, 
    {"retrial", _wrap_Room_retrial}, 
    {"doNotify", _wrap_Room_doNotify}, 
    {"doBroadcastNotify", _wrap_Room_doBroadcastNotify}, 
    {"notifyMoveCards", _wrap_Room_notifyMoveCards}, 
    {"notifyProperty", _wrap_Room_notifyProperty}, 
    {"notifyUpdateCard", _wrap_Room_notifyUpdateCard}, 
    {"broadcastUpdateCard", _wrap_Room_broadcastUpdateCard}, 
    {"notifyResetCard", _wrap_Room_notifyResetCard}, 
    {"broadcastResetCard", _wrap_Room_broadcastResetCard}, 
    {"broadcastProperty", _wrap_Room_broadcastProperty}, 
    {"notifySkillInvoked", _wrap_Room_notifySkillInvoked}, 
    {"broadcastSkillInvoke", _wrap_Room_broadcastSkillInvoke}, 
    {"doLightbox", _wrap_Room_doLightbox}, 
    {"doSuperLightbox", _wrap_Room_doSuperLightbox}, 
    {"doAnimate", _wrap_Room_doAnimate}, 
    {"preparePlayers", _wrap_Room_preparePlayers}, 
    {"changePlayerGeneral", _wrap_Room_changePlayerGeneral}, 
    {"changePlayerGeneral2", _wrap_Room_changePlayerGeneral2}, 
    {"filterCards", _wrap_Room_filterCards}, 
    {"acquireSkill", _wrap_Room_acquireSkill}, 
    {"adjustSeats", _wrap_Room_adjustSeats}, 
    {"swapPile", _wrap_Room_swapPile}, 
    {"getDiscardPile", _wrap_Room_getDiscardPile}, 
    {"getDrawPile", _wrap_Room_getDrawPile}, 
    {"getCardFromPile", _wrap_Room_getCardFromPile}, 
    {"findPlayer", _wrap_Room_findPlayer}, 
    {"findPlayersBySkillName", _wrap_Room_findPlayersBySkillName}, 
    {"findPlayerBySkillName", _wrap_Room_findPlayerBySkillName}, 
    {"installEquip", _wrap_Room_installEquip}, 
    {"resetAI", _wrap_Room_resetAI}, 
    {"swapSeat", _wrap_Room_swapSeat}, 
    {"setFixedDistance", _wrap_Room_setFixedDistance}, 
    {"getFront", _wrap_Room_getFront}, 
    {"signup", _wrap_Room_signup}, 
    {"getOwner", _wrap_Room_getOwner}, 
    {"updateStateItem", _wrap_Room_updateStateItem}, 
    {"reconnect", _wrap_Room_reconnect}, 
    {"marshal", _wrap_Room_marshal}, 
    {"sortByActionOrder", _wrap_Room_sortByActionOrder}, 
    {"setTag", _wrap_Room_setTag}, 
    {"getTag", _wrap_Room_getTag}, 
    {"removeTag", _wrap_Room_removeTag}, 
    {"setEmotion", _wrap_Room_setEmotion}, 
    {"getCardPlace", _wrap_Room_getCardPlace}, 
    {"getCardIdsOnTable", _wrap_Room_getCardIdsOnTable}, 
    {"getCardOwner", _wrap_Room_getCardOwner}, 
    {"setCardMapping", _wrap_Room_setCardMapping}, 
    {"drawCards", _wrap_Room_drawCards}, 
    {"obtainCard", _wrap_Room_obtainCard}, 
    {"throwCard", _wrap_Room_throwCard}, 
    {"moveCardTo", _wrap_Room_moveCardTo}, 
    {"moveCardsAtomic", _wrap_Room_moveCardsAtomic}, 
    {"moveCardsToEndOfDrawpile", _wrap_Room_moveCardsToEndOfDrawpile}, 
    {"moveCards", _wrap_Room_moveCards}, 
    {"activate", _wrap_Room_activate}, 
    {"askForLuckCard", _wrap_Room_askForLuckCard}, 
    {"askForSuit", _wrap_Room_askForSuit}, 
    {"askForKingdom", _wrap_Room_askForKingdom}, 
    {"askForSkillInvoke", _wrap_Room_askForSkillInvoke}, 
    {"askForChoice", _wrap_Room_askForChoice}, 
    {"askForDiscard", _wrap_Room_askForDiscard}, 
    {"askForExchange", _wrap_Room_askForExchange}, 
    {"askForNullification", _wrap_Room_askForNullification}, 
    {"isCanceled", _wrap_Room_isCanceled}, 
    {"askForCardChosen", _wrap_Room_askForCardChosen}, 
    {"askForCard", _wrap_Room_askForCard}, 
    {"askForUseCard", _wrap_Room_askForUseCard}, 
    {"askForUseSlashTo", _wrap_Room_askForUseSlashTo}, 
    {"askForAG", _wrap_Room_askForAG}, 
    {"askForCardShow", _wrap_Room_askForCardShow}, 
    {"askForYiji", _wrap_Room_askForYiji}, 
    {"askForPindian", _wrap_Room_askForPindian}, 
    {"askForPindianRace", _wrap_Room_askForPindianRace}, 
    {"askForPlayerChosen", _wrap_Room_askForPlayerChosen}, 
    {"askForGeneral", _wrap_Room_askForGeneral}, 
    {"askForSinglePeach", _wrap_Room_askForSinglePeach}, 
    {"addPlayerHistory", _wrap_Room_addPlayerHistory}, 
    {"getCard", _wrap_Room_getCard}, 
    {"resetCard", _wrap_Room_resetCard}, 
    {"updateCardsOnLose", _wrap_Room_updateCardsOnLose}, 
    {"updateCardsOnGet", _wrap_Room_updateCardsOnGet}, 
    {"nextPlayer", _wrap_Room_nextPlayer}, 
    {"writeToConsole", _wrap_Room_writeToConsole}, 
    {"throwEvent", _wrap_Room_throwEvent}, 
    {0,0}
};
static swig_lua_attribute swig_Room_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Room_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Room_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Room_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("GuanxingUpOnly", Room::GuanxingUpOnly)},
    {SWIG_LUA_CONSTTAB_INT("GuanxingBothSides", Room::GuanxingBothSides)},
    {SWIG_LUA_CONSTTAB_INT("GuanxingDownOnly", Room::GuanxingDownOnly)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Room_bases[] = {0,0};
static const char *swig_Room_base_names[] = {"QThread *",0};
static swig_lua_class _wrap_class_Room = { "Room", &SWIGTYPE_p_Room,_wrap_new_Room, swig_delete_Room, swig_Room_methods, swig_Room_attributes, { "Room", swig_Room_cls_methods, swig_Room_cls_attributes, swig_Room_cls_constants }, swig_Room_bases, swig_Room_base_names };

static int _wrap_BasicCard_getType(lua_State* L) {
  int SWIG_arg = 0;
  BasicCard *arg1 = (BasicCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("BasicCard::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BasicCard::getType",1,"BasicCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BasicCard,0))){
    SWIG_fail_ptr("BasicCard_getType",1,SWIGTYPE_p_BasicCard);
  }
  
  result = ((BasicCard const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicCard_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  BasicCard *arg1 = (BasicCard *) 0 ;
  Card::CardType result;
  
  SWIG_check_num_args("BasicCard::getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BasicCard::getTypeId",1,"BasicCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BasicCard,0))){
    SWIG_fail_ptr("BasicCard_getTypeId",1,SWIGTYPE_p_BasicCard);
  }
  
  result = (Card::CardType)((BasicCard const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicCard(void *obj) {
BasicCard *arg1 = (BasicCard *) obj;
delete arg1;
}
static swig_lua_method swig_BasicCard_methods[] = {
    {"getType", _wrap_BasicCard_getType}, 
    {"getTypeId", _wrap_BasicCard_getTypeId}, 
    {0,0}
};
static swig_lua_attribute swig_BasicCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BasicCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BasicCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BasicCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BasicCard_bases[] = {0,0};
static const char *swig_BasicCard_base_names[] = {"Card *",0};
static swig_lua_class _wrap_class_BasicCard = { "BasicCard", &SWIGTYPE_p_BasicCard,0, swig_delete_BasicCard, swig_BasicCard_methods, swig_BasicCard_attributes, { "BasicCard", swig_BasicCard_cls_methods, swig_BasicCard_cls_attributes, swig_BasicCard_cls_constants }, swig_BasicCard_bases, swig_BasicCard_base_names };

static int _wrap_TrickCard_setCancelable(lua_State* L) {
  int SWIG_arg = 0;
  TrickCard *arg1 = (TrickCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("TrickCard::setCancelable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrickCard::setCancelable",1,"TrickCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TrickCard::setCancelable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrickCard,0))){
    SWIG_fail_ptr("TrickCard_setCancelable",1,SWIGTYPE_p_TrickCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCancelable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrickCard_getType(lua_State* L) {
  int SWIG_arg = 0;
  TrickCard *arg1 = (TrickCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("TrickCard::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrickCard::getType",1,"TrickCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrickCard,0))){
    SWIG_fail_ptr("TrickCard_getType",1,SWIGTYPE_p_TrickCard);
  }
  
  result = ((TrickCard const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrickCard_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  TrickCard *arg1 = (TrickCard *) 0 ;
  Card::CardType result;
  
  SWIG_check_num_args("TrickCard::getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrickCard::getTypeId",1,"TrickCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrickCard,0))){
    SWIG_fail_ptr("TrickCard_getTypeId",1,SWIGTYPE_p_TrickCard);
  }
  
  result = (Card::CardType)((TrickCard const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrickCard_isCancelable(lua_State* L) {
  int SWIG_arg = 0;
  TrickCard *arg1 = (TrickCard *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TrickCard::isCancelable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrickCard::isCancelable",1,"TrickCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TrickCard::isCancelable",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrickCard,0))){
    SWIG_fail_ptr("TrickCard_isCancelable",1,SWIGTYPE_p_TrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("TrickCard_isCancelable",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (bool)((TrickCard const *)arg1)->isCancelable((CardEffectStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TrickCard(void *obj) {
TrickCard *arg1 = (TrickCard *) obj;
delete arg1;
}
static swig_lua_method swig_TrickCard_methods[] = {
    {"setCancelable", _wrap_TrickCard_setCancelable}, 
    {"getType", _wrap_TrickCard_getType}, 
    {"getTypeId", _wrap_TrickCard_getTypeId}, 
    {"isCancelable", _wrap_TrickCard_isCancelable}, 
    {0,0}
};
static swig_lua_attribute swig_TrickCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TrickCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TrickCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TrickCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TrickCard_bases[] = {0,0};
static const char *swig_TrickCard_base_names[] = {"Card *",0};
static swig_lua_class _wrap_class_TrickCard = { "TrickCard", &SWIGTYPE_p_TrickCard,0, swig_delete_TrickCard, swig_TrickCard_methods, swig_TrickCard_attributes, { "TrickCard", swig_TrickCard_cls_methods, swig_TrickCard_cls_attributes, swig_TrickCard_cls_constants }, swig_TrickCard_bases, swig_TrickCard_base_names };

static void swig_delete_DelayedTrick(void *obj) {
DelayedTrick *arg1 = (DelayedTrick *) obj;
delete arg1;
}
static swig_lua_method swig_DelayedTrick_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DelayedTrick_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DelayedTrick_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DelayedTrick_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DelayedTrick_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DelayedTrick_bases[] = {0,0};
static const char *swig_DelayedTrick_base_names[] = {"TrickCard *",0};
static swig_lua_class _wrap_class_DelayedTrick = { "DelayedTrick", &SWIGTYPE_p_DelayedTrick,0, swig_delete_DelayedTrick, swig_DelayedTrick_methods, swig_DelayedTrick_attributes, { "DelayedTrick", swig_DelayedTrick_cls_methods, swig_DelayedTrick_cls_attributes, swig_DelayedTrick_cls_constants }, swig_DelayedTrick_bases, swig_DelayedTrick_base_names };

static int _wrap_EquipCard_getType(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("EquipCard::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::getType",1,"EquipCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_getType",1,SWIGTYPE_p_EquipCard);
  }
  
  result = ((EquipCard const *)arg1)->getType();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  Card::CardType result;
  
  SWIG_check_num_args("EquipCard::getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::getTypeId",1,"EquipCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_getTypeId",1,SWIGTYPE_p_EquipCard);
  }
  
  result = (Card::CardType)((EquipCard const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_use(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg4 = 0 ;
  
  SWIG_check_num_args("EquipCard::use",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::use",1,"EquipCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EquipCard::use",2,"Room *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("EquipCard::use",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("EquipCard::use",4,"QList< ServerPlayer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_use",1,SWIGTYPE_p_EquipCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("EquipCard_use",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("EquipCard_use",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("EquipCard_use",4,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  ((EquipCard const *)arg1)->use(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_onInstall(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("EquipCard::onInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::onInstall",1,"EquipCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EquipCard::onInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_onInstall",1,SWIGTYPE_p_EquipCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("EquipCard_onInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((EquipCard const *)arg1)->onInstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_onUninstall(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("EquipCard::onUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::onUninstall",1,"EquipCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EquipCard::onUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_onUninstall",1,SWIGTYPE_p_EquipCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("EquipCard_onUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((EquipCard const *)arg1)->onUninstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_location(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  EquipCard::Location result;
  
  SWIG_check_num_args("EquipCard::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::location",1,"EquipCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_location",1,SWIGTYPE_p_EquipCard);
  }
  
  result = (EquipCard::Location)((EquipCard const *)arg1)->location();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_equipOnInstall(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("EquipCard::equipOnInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::equipOnInstall",1,"EquipCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EquipCard::equipOnInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_equipOnInstall",1,SWIGTYPE_p_EquipCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("EquipCard_equipOnInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  EquipCard_equipOnInstall((EquipCard const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EquipCard_equipOnUninstall(lua_State* L) {
  int SWIG_arg = 0;
  EquipCard *arg1 = (EquipCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("EquipCard::equipOnUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EquipCard::equipOnUninstall",1,"EquipCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EquipCard::equipOnUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EquipCard,0))){
    SWIG_fail_ptr("EquipCard_equipOnUninstall",1,SWIGTYPE_p_EquipCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("EquipCard_equipOnUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  EquipCard_equipOnUninstall((EquipCard const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EquipCard(void *obj) {
EquipCard *arg1 = (EquipCard *) obj;
delete arg1;
}
static swig_lua_method swig_EquipCard_methods[] = {
    {"getType", _wrap_EquipCard_getType}, 
    {"getTypeId", _wrap_EquipCard_getTypeId}, 
    {"use", _wrap_EquipCard_use}, 
    {"onInstall", _wrap_EquipCard_onInstall}, 
    {"onUninstall", _wrap_EquipCard_onUninstall}, 
    {"location", _wrap_EquipCard_location}, 
    {"equipOnInstall", _wrap_EquipCard_equipOnInstall}, 
    {"equipOnUninstall", _wrap_EquipCard_equipOnUninstall}, 
    {0,0}
};
static swig_lua_attribute swig_EquipCard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_EquipCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EquipCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_EquipCard_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("WeaponLocation", EquipCard::WeaponLocation)},
    {SWIG_LUA_CONSTTAB_INT("ArmorLocation", EquipCard::ArmorLocation)},
    {SWIG_LUA_CONSTTAB_INT("DefensiveHorseLocation", EquipCard::DefensiveHorseLocation)},
    {SWIG_LUA_CONSTTAB_INT("OffensiveHorseLocation", EquipCard::OffensiveHorseLocation)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_EquipCard_bases[] = {0,0};
static const char *swig_EquipCard_base_names[] = {"Card *",0};
static swig_lua_class _wrap_class_EquipCard = { "EquipCard", &SWIGTYPE_p_EquipCard,0, swig_delete_EquipCard, swig_EquipCard_methods, swig_EquipCard_attributes, { "EquipCard", swig_EquipCard_cls_methods, swig_EquipCard_cls_attributes, swig_EquipCard_cls_constants }, swig_EquipCard_bases, swig_EquipCard_base_names };

static int _wrap_new_Weapon(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  int arg3 ;
  Weapon *result = 0 ;
  
  SWIG_check_num_args("Weapon::Weapon",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Weapon::Weapon",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Weapon::Weapon",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Weapon::Weapon",3,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Weapon *)new Weapon(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Weapon,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Weapon_getRange(lua_State* L) {
  int SWIG_arg = 0;
  Weapon *arg1 = (Weapon *) 0 ;
  int result;
  
  SWIG_check_num_args("Weapon::getRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Weapon::getRange",1,"Weapon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Weapon,0))){
    SWIG_fail_ptr("Weapon_getRange",1,SWIGTYPE_p_Weapon);
  }
  
  result = (int)(arg1)->getRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Weapon_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  Weapon *arg1 = (Weapon *) 0 ;
  QString result;
  
  SWIG_check_num_args("Weapon::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Weapon::getSubtype",1,"Weapon const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Weapon,0))){
    SWIG_fail_ptr("Weapon_getSubtype",1,SWIGTYPE_p_Weapon);
  }
  
  result = ((Weapon const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Weapon_location(lua_State* L) {
  int SWIG_arg = 0;
  Weapon *arg1 = (Weapon *) 0 ;
  EquipCard::Location result;
  
  SWIG_check_num_args("Weapon::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Weapon::location",1,"Weapon const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Weapon,0))){
    SWIG_fail_ptr("Weapon_location",1,SWIGTYPE_p_Weapon);
  }
  
  result = (EquipCard::Location)((Weapon const *)arg1)->location();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Weapon_onInstall(lua_State* L) {
  int SWIG_arg = 0;
  Weapon *arg1 = (Weapon *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Weapon::onInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Weapon::onInstall",1,"Weapon const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Weapon::onInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Weapon,0))){
    SWIG_fail_ptr("Weapon_onInstall",1,SWIGTYPE_p_Weapon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Weapon_onInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((Weapon const *)arg1)->onInstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Weapon_onUninstall(lua_State* L) {
  int SWIG_arg = 0;
  Weapon *arg1 = (Weapon *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Weapon::onUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Weapon::onUninstall",1,"Weapon const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Weapon::onUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Weapon,0))){
    SWIG_fail_ptr("Weapon_onUninstall",1,SWIGTYPE_p_Weapon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Weapon_onUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((Weapon const *)arg1)->onUninstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Weapon(void *obj) {
Weapon *arg1 = (Weapon *) obj;
delete arg1;
}
static swig_lua_method swig_Weapon_methods[] = {
    {"getRange", _wrap_Weapon_getRange}, 
    {"getSubtype", _wrap_Weapon_getSubtype}, 
    {"location", _wrap_Weapon_location}, 
    {"onInstall", _wrap_Weapon_onInstall}, 
    {"onUninstall", _wrap_Weapon_onUninstall}, 
    {0,0}
};
static swig_lua_attribute swig_Weapon_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Weapon_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Weapon_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Weapon_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Weapon_bases[] = {0,0};
static const char *swig_Weapon_base_names[] = {"EquipCard *",0};
static swig_lua_class _wrap_class_Weapon = { "Weapon", &SWIGTYPE_p_Weapon,_wrap_new_Weapon, swig_delete_Weapon, swig_Weapon_methods, swig_Weapon_attributes, { "Weapon", swig_Weapon_cls_methods, swig_Weapon_cls_attributes, swig_Weapon_cls_constants }, swig_Weapon_bases, swig_Weapon_base_names };

static int _wrap_new_Armor(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  Armor *result = 0 ;
  
  SWIG_check_num_args("Armor::Armor",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Armor::Armor",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Armor::Armor",2,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (Armor *)new Armor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Armor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armor_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  Armor *arg1 = (Armor *) 0 ;
  QString result;
  
  SWIG_check_num_args("Armor::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Armor::getSubtype",1,"Armor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Armor,0))){
    SWIG_fail_ptr("Armor_getSubtype",1,SWIGTYPE_p_Armor);
  }
  
  result = ((Armor const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armor_location(lua_State* L) {
  int SWIG_arg = 0;
  Armor *arg1 = (Armor *) 0 ;
  EquipCard::Location result;
  
  SWIG_check_num_args("Armor::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Armor::location",1,"Armor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Armor,0))){
    SWIG_fail_ptr("Armor_location",1,SWIGTYPE_p_Armor);
  }
  
  result = (EquipCard::Location)((Armor const *)arg1)->location();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Armor(void *obj) {
Armor *arg1 = (Armor *) obj;
delete arg1;
}
static swig_lua_method swig_Armor_methods[] = {
    {"getSubtype", _wrap_Armor_getSubtype}, 
    {"location", _wrap_Armor_location}, 
    {0,0}
};
static swig_lua_attribute swig_Armor_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Armor_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Armor_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Armor_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Armor_bases[] = {0,0};
static const char *swig_Armor_base_names[] = {"EquipCard *",0};
static swig_lua_class _wrap_class_Armor = { "Armor", &SWIGTYPE_p_Armor,_wrap_new_Armor, swig_delete_Armor, swig_Armor_methods, swig_Armor_attributes, { "Armor", swig_Armor_cls_methods, swig_Armor_cls_attributes, swig_Armor_cls_constants }, swig_Armor_bases, swig_Armor_base_names };

static int _wrap_Horse_location(lua_State* L) {
  int SWIG_arg = 0;
  Horse *arg1 = (Horse *) 0 ;
  EquipCard::Location result;
  
  SWIG_check_num_args("Horse::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Horse::location",1,"Horse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Horse,0))){
    SWIG_fail_ptr("Horse_location",1,SWIGTYPE_p_Horse);
  }
  
  result = (EquipCard::Location)((Horse const *)arg1)->location();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Horse_onInstall(lua_State* L) {
  int SWIG_arg = 0;
  Horse *arg1 = (Horse *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Horse::onInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Horse::onInstall",1,"Horse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Horse::onInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Horse,0))){
    SWIG_fail_ptr("Horse_onInstall",1,SWIGTYPE_p_Horse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Horse_onInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((Horse const *)arg1)->onInstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Horse_onUninstall(lua_State* L) {
  int SWIG_arg = 0;
  Horse *arg1 = (Horse *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("Horse::onUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Horse::onUninstall",1,"Horse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Horse::onUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Horse,0))){
    SWIG_fail_ptr("Horse_onUninstall",1,SWIGTYPE_p_Horse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("Horse_onUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((Horse const *)arg1)->onUninstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Horse(void *obj) {
Horse *arg1 = (Horse *) obj;
delete arg1;
}
static swig_lua_method swig_Horse_methods[] = {
    {"location", _wrap_Horse_location}, 
    {"onInstall", _wrap_Horse_onInstall}, 
    {"onUninstall", _wrap_Horse_onUninstall}, 
    {0,0}
};
static swig_lua_attribute swig_Horse_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Horse_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Horse_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Horse_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Horse_bases[] = {0,0};
static const char *swig_Horse_base_names[] = {"EquipCard *",0};
static swig_lua_class _wrap_class_Horse = { "Horse", &SWIGTYPE_p_Horse,0, swig_delete_Horse, swig_Horse_methods, swig_Horse_attributes, { "Horse", swig_Horse_cls_methods, swig_Horse_cls_attributes, swig_Horse_cls_constants }, swig_Horse_bases, swig_Horse_base_names };

static int _wrap_new_OffensiveHorse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  int arg3 ;
  OffensiveHorse *result = 0 ;
  
  SWIG_check_num_args("OffensiveHorse::OffensiveHorse",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OffensiveHorse::OffensiveHorse",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OffensiveHorse::OffensiveHorse",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OffensiveHorse::OffensiveHorse",3,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (OffensiveHorse *)new OffensiveHorse(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OffensiveHorse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OffensiveHorse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  OffensiveHorse *result = 0 ;
  
  SWIG_check_num_args("OffensiveHorse::OffensiveHorse",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OffensiveHorse::OffensiveHorse",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OffensiveHorse::OffensiveHorse",2,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (OffensiveHorse *)new OffensiveHorse(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OffensiveHorse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OffensiveHorse(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OffensiveHorse__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_OffensiveHorse__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OffensiveHorse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OffensiveHorse::OffensiveHorse(Card::Suit,int,int)\n"
    "    OffensiveHorse::OffensiveHorse(Card::Suit,int)\n");
  lua_error(L);return 0;
}


static int _wrap_OffensiveHorse_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  OffensiveHorse *arg1 = (OffensiveHorse *) 0 ;
  QString result;
  
  SWIG_check_num_args("OffensiveHorse::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OffensiveHorse::getSubtype",1,"OffensiveHorse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OffensiveHorse,0))){
    SWIG_fail_ptr("OffensiveHorse_getSubtype",1,SWIGTYPE_p_OffensiveHorse);
  }
  
  result = ((OffensiveHorse const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OffensiveHorse(void *obj) {
OffensiveHorse *arg1 = (OffensiveHorse *) obj;
delete arg1;
}
static swig_lua_method swig_OffensiveHorse_methods[] = {
    {"getSubtype", _wrap_OffensiveHorse_getSubtype}, 
    {0,0}
};
static swig_lua_attribute swig_OffensiveHorse_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_OffensiveHorse_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OffensiveHorse_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_OffensiveHorse_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_OffensiveHorse_bases[] = {0,0};
static const char *swig_OffensiveHorse_base_names[] = {"Horse *",0};
static swig_lua_class _wrap_class_OffensiveHorse = { "OffensiveHorse", &SWIGTYPE_p_OffensiveHorse,_wrap_new_OffensiveHorse, swig_delete_OffensiveHorse, swig_OffensiveHorse_methods, swig_OffensiveHorse_attributes, { "OffensiveHorse", swig_OffensiveHorse_cls_methods, swig_OffensiveHorse_cls_attributes, swig_OffensiveHorse_cls_constants }, swig_OffensiveHorse_bases, swig_OffensiveHorse_base_names };

static int _wrap_new_DefensiveHorse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  int arg3 ;
  DefensiveHorse *result = 0 ;
  
  SWIG_check_num_args("DefensiveHorse::DefensiveHorse",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DefensiveHorse::DefensiveHorse",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DefensiveHorse::DefensiveHorse",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DefensiveHorse::DefensiveHorse",3,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (DefensiveHorse *)new DefensiveHorse(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DefensiveHorse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DefensiveHorse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  DefensiveHorse *result = 0 ;
  
  SWIG_check_num_args("DefensiveHorse::DefensiveHorse",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DefensiveHorse::DefensiveHorse",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DefensiveHorse::DefensiveHorse",2,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (DefensiveHorse *)new DefensiveHorse(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DefensiveHorse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DefensiveHorse(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DefensiveHorse__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DefensiveHorse__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DefensiveHorse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DefensiveHorse::DefensiveHorse(Card::Suit,int,int)\n"
    "    DefensiveHorse::DefensiveHorse(Card::Suit,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DefensiveHorse_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  DefensiveHorse *arg1 = (DefensiveHorse *) 0 ;
  QString result;
  
  SWIG_check_num_args("DefensiveHorse::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DefensiveHorse::getSubtype",1,"DefensiveHorse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DefensiveHorse,0))){
    SWIG_fail_ptr("DefensiveHorse_getSubtype",1,SWIGTYPE_p_DefensiveHorse);
  }
  
  result = ((DefensiveHorse const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefensiveHorse(void *obj) {
DefensiveHorse *arg1 = (DefensiveHorse *) obj;
delete arg1;
}
static swig_lua_method swig_DefensiveHorse_methods[] = {
    {"getSubtype", _wrap_DefensiveHorse_getSubtype}, 
    {0,0}
};
static swig_lua_attribute swig_DefensiveHorse_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DefensiveHorse_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefensiveHorse_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DefensiveHorse_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DefensiveHorse_bases[] = {0,0};
static const char *swig_DefensiveHorse_base_names[] = {"Horse *",0};
static swig_lua_class _wrap_class_DefensiveHorse = { "DefensiveHorse", &SWIGTYPE_p_DefensiveHorse,_wrap_new_DefensiveHorse, swig_delete_DefensiveHorse, swig_DefensiveHorse_methods, swig_DefensiveHorse_attributes, { "DefensiveHorse", swig_DefensiveHorse_cls_methods, swig_DefensiveHorse_cls_attributes, swig_DefensiveHorse_cls_constants }, swig_DefensiveHorse_bases, swig_DefensiveHorse_base_names };

static int _wrap_new_Treasure(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  Treasure *result = 0 ;
  
  SWIG_check_num_args("Treasure::Treasure",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Treasure::Treasure",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Treasure::Treasure",2,"int");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (Treasure *)new Treasure(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Treasure,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Treasure_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  Treasure *arg1 = (Treasure *) 0 ;
  QString result;
  
  SWIG_check_num_args("Treasure::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Treasure::getSubtype",1,"Treasure const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Treasure,0))){
    SWIG_fail_ptr("Treasure_getSubtype",1,SWIGTYPE_p_Treasure);
  }
  
  result = ((Treasure const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Treasure_location(lua_State* L) {
  int SWIG_arg = 0;
  Treasure *arg1 = (Treasure *) 0 ;
  EquipCard::Location result;
  
  SWIG_check_num_args("Treasure::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Treasure::location",1,"Treasure const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Treasure,0))){
    SWIG_fail_ptr("Treasure_location",1,SWIGTYPE_p_Treasure);
  }
  
  result = (EquipCard::Location)((Treasure const *)arg1)->location();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Treasure_getCommonEffectName(lua_State* L) {
  int SWIG_arg = 0;
  Treasure *arg1 = (Treasure *) 0 ;
  QString result;
  
  SWIG_check_num_args("Treasure::getCommonEffectName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Treasure::getCommonEffectName",1,"Treasure const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Treasure,0))){
    SWIG_fail_ptr("Treasure_getCommonEffectName",1,SWIGTYPE_p_Treasure);
  }
  
  result = ((Treasure const *)arg1)->getCommonEffectName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Treasure(void *obj) {
Treasure *arg1 = (Treasure *) obj;
delete arg1;
}
static swig_lua_method swig_Treasure_methods[] = {
    {"getSubtype", _wrap_Treasure_getSubtype}, 
    {"location", _wrap_Treasure_location}, 
    {"getCommonEffectName", _wrap_Treasure_getCommonEffectName}, 
    {0,0}
};
static swig_lua_attribute swig_Treasure_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Treasure_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Treasure_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Treasure_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Treasure_bases[] = {0,0};
static const char *swig_Treasure_base_names[] = {"EquipCard *",0};
static swig_lua_class _wrap_class_Treasure = { "Treasure", &SWIGTYPE_p_Treasure,_wrap_new_Treasure, swig_delete_Treasure, swig_Treasure_methods, swig_Treasure_attributes, { "Treasure", swig_Treasure_cls_methods, swig_Treasure_cls_attributes, swig_Treasure_cls_constants }, swig_Treasure_bases, swig_Treasure_base_names };

static int _wrap_Slash_getNature(lua_State* L) {
  int SWIG_arg = 0;
  Slash *arg1 = (Slash *) 0 ;
  DamageStruct::Nature result;
  
  SWIG_check_num_args("Slash::getNature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Slash::getNature",1,"Slash const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Slash,0))){
    SWIG_fail_ptr("Slash_getNature",1,SWIGTYPE_p_Slash);
  }
  
  result = (DamageStruct::Nature)((Slash const *)arg1)->getNature();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slash_setNature(lua_State* L) {
  int SWIG_arg = 0;
  Slash *arg1 = (Slash *) 0 ;
  DamageStruct::Nature arg2 ;
  
  SWIG_check_num_args("Slash::setNature",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Slash::setNature",1,"Slash *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Slash::setNature",2,"DamageStruct::Nature");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Slash,0))){
    SWIG_fail_ptr("Slash_setNature",1,SWIGTYPE_p_Slash);
  }
  
  arg2 = (DamageStruct::Nature)(int)lua_tonumber(L, 2);
  (arg1)->setNature(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slash_IsAvailable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Slash::IsAvailable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Slash::IsAvailable",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Slash::IsAvailable",2,"Card const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Slash::IsAvailable",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Slash_IsAvailable",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Slash_IsAvailable",2,SWIGTYPE_p_Card);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)Slash::IsAvailable((Player const *)arg1,(Card const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slash_IsAvailable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Slash::IsAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Slash::IsAvailable",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Slash::IsAvailable",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Slash_IsAvailable",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Slash_IsAvailable",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)Slash::IsAvailable((Player const *)arg1,(Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slash_IsAvailable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Slash::IsAvailable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Slash::IsAvailable",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Slash_IsAvailable",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)Slash::IsAvailable((Player const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slash_IsAvailable(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Slash_IsAvailable__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Slash_IsAvailable__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Slash_IsAvailable__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slash_IsAvailable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Slash::IsAvailable(Player const *,Card const *,bool)\n"
    "    Slash::IsAvailable(Player const *,Card const *)\n"
    "    Slash::IsAvailable(Player const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Slash_IsSpecificAssignee(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Slash::IsSpecificAssignee",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Slash::IsSpecificAssignee",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Slash::IsSpecificAssignee",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Slash::IsSpecificAssignee",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Slash_IsSpecificAssignee",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Slash_IsSpecificAssignee",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Slash_IsSpecificAssignee",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)Slash::IsSpecificAssignee((Player const *)arg1,(Player const *)arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Slash(void *obj) {
Slash *arg1 = (Slash *) obj;
delete arg1;
}
static swig_lua_method swig_Slash_methods[] = {
    {"getNature", _wrap_Slash_getNature}, 
    {"setNature", _wrap_Slash_setNature}, 
    {0,0}
};
static swig_lua_attribute swig_Slash_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Slash_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Slash_cls_methods[] = {
    {"IsAvailable", _wrap_Slash_IsAvailable}, 
    {"IsSpecificAssignee", _wrap_Slash_IsSpecificAssignee}, 
    {0,0}
};
static swig_lua_const_info swig_Slash_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Slash_bases[] = {0,0};
static const char *swig_Slash_base_names[] = {"BasicCard *",0};
static swig_lua_class _wrap_class_Slash = { "Slash", &SWIGTYPE_p_Slash,0, swig_delete_Slash, swig_Slash_methods, swig_Slash_attributes, { "Slash", swig_Slash_cls_methods, swig_Slash_cls_attributes, swig_Slash_cls_constants }, swig_Slash_bases, swig_Slash_base_names };

static int _wrap_Analeptic_IsAvailable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("Analeptic::IsAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analeptic::IsAvailable",1,"Player const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analeptic::IsAvailable",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Analeptic_IsAvailable",1,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("Analeptic_IsAvailable",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)Analeptic::IsAvailable((Player const *)arg1,(Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Analeptic_IsAvailable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Player *arg1 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("Analeptic::IsAvailable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analeptic::IsAvailable",1,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("Analeptic_IsAvailable",1,SWIGTYPE_p_Player);
  }
  
  result = (bool)Analeptic::IsAvailable((Player const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Analeptic_IsAvailable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Analeptic_IsAvailable__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Player, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Analeptic_IsAvailable__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Analeptic_IsAvailable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analeptic::IsAvailable(Player const *,Card const *)\n"
    "    Analeptic::IsAvailable(Player const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Analeptic(void *obj) {
Analeptic *arg1 = (Analeptic *) obj;
delete arg1;
}
static swig_lua_method swig_Analeptic_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Analeptic_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Analeptic_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Analeptic_cls_methods[] = {
    {"IsAvailable", _wrap_Analeptic_IsAvailable}, 
    {0,0}
};
static swig_lua_const_info swig_Analeptic_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Analeptic_bases[] = {0,0};
static const char *swig_Analeptic_base_names[] = {"BasicCard *",0};
static swig_lua_class _wrap_class_Analeptic = { "Analeptic", &SWIGTYPE_p_Analeptic,0, swig_delete_Analeptic, swig_Analeptic_methods, swig_Analeptic_attributes, { "Analeptic", swig_Analeptic_cls_methods, swig_Analeptic_cls_attributes, swig_Analeptic_cls_constants }, swig_Analeptic_bases, swig_Analeptic_base_names };

static int _wrap_new_LuaTriggerSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Skill::Frequency arg2 ;
  char *arg3 = (char *) 0 ;
  LuaTriggerSkill *result = 0 ;
  
  SWIG_check_num_args("LuaTriggerSkill::LuaTriggerSkill",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaTriggerSkill::LuaTriggerSkill",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::LuaTriggerSkill",2,"Skill::Frequency");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaTriggerSkill::LuaTriggerSkill",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (Skill::Frequency)(int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (LuaTriggerSkill *)new LuaTriggerSkill((char const *)arg1,arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTriggerSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_addEvent(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::addEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::addEvent",1,"LuaTriggerSkill *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::addEvent",2,"TriggerEvent");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_addEvent",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  (arg1)->addEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_setViewAsSkill(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  ViewAsSkill *arg2 = (ViewAsSkill *) 0 ;
  
  SWIG_check_num_args("LuaTriggerSkill::setViewAsSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::setViewAsSkill",1,"LuaTriggerSkill *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTriggerSkill::setViewAsSkill",2,"ViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_setViewAsSkill",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_setViewAsSkill",2,SWIGTYPE_p_ViewAsSkill);
  }
  
  (arg1)->setViewAsSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_setGlobal(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::setGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::setGlobal",1,"LuaTriggerSkill *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaTriggerSkill::setGlobal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_setGlobal",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setGlobal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_setCanPreshow(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::setCanPreshow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::setCanPreshow",1,"LuaTriggerSkill *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaTriggerSkill::setCanPreshow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_setCanPreshow",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCanPreshow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaTriggerSkill::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::getPriority",1,"LuaTriggerSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_getPriority",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  result = (int)((LuaTriggerSkill const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_triggerable(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  QMap< ServerPlayer *,QStringList > result;
  
  SWIG_check_num_args("LuaTriggerSkill::triggerable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::triggerable",1,"LuaTriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::triggerable",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTriggerSkill::triggerable",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaTriggerSkill::triggerable",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaTriggerSkill::triggerable",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_triggerable",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTriggerSkill_triggerable",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_triggerable",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaTriggerSkill_triggerable",5,SWIGTYPE_p_QVariant);
  }
  
  result = ((LuaTriggerSkill const *)arg1)->triggerable(arg2,arg3,arg4,*arg5);
  {
    QMap< ServerPlayer *,QStringList > * resultptr = new QMap< ServerPlayer *,QStringList >((const QMap< ServerPlayer *,QStringList > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QMapT_ServerPlayer_p_QStringList_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_cost__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer *arg6 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTriggerSkill::cost",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::cost",1,"LuaTriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::cost",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTriggerSkill::cost",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaTriggerSkill::cost",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaTriggerSkill::cost",5,"QVariant &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("LuaTriggerSkill::cost",6,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",6,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((LuaTriggerSkill const *)arg1)->cost(arg2,arg3,arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_cost__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTriggerSkill::cost",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::cost",1,"LuaTriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::cost",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTriggerSkill::cost",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaTriggerSkill::cost",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaTriggerSkill::cost",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaTriggerSkill_cost",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((LuaTriggerSkill const *)arg1)->cost(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_cost(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LuaTriggerSkill_cost__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_LuaTriggerSkill_cost__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaTriggerSkill_cost'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaTriggerSkill::cost(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *) const\n"
    "    LuaTriggerSkill::cost(TriggerEvent,Room *,ServerPlayer *,QVariant &) const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaTriggerSkill_effect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer *arg6 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTriggerSkill::effect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::effect",1,"LuaTriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::effect",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTriggerSkill::effect",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaTriggerSkill::effect",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaTriggerSkill::effect",5,"QVariant &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("LuaTriggerSkill::effect",6,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",6,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((LuaTriggerSkill const *)arg1)->effect(arg2,arg3,arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_effect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTriggerSkill::effect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::effect",1,"LuaTriggerSkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::effect",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTriggerSkill::effect",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaTriggerSkill::effect",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaTriggerSkill::effect",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaTriggerSkill_effect",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((LuaTriggerSkill const *)arg1)->effect(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_effect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LuaTriggerSkill_effect__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTriggerSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_LuaTriggerSkill_effect__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaTriggerSkill_effect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaTriggerSkill::effect(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *) const\n"
    "    LuaTriggerSkill::effect(TriggerEvent,Room *,ServerPlayer *,QVariant &) const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaTriggerSkill_can_trigger_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::can_trigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::can_trigger",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_can_trigger_set",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->can_trigger = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_can_trigger_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTriggerSkill::can_trigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::can_trigger",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_can_trigger_get",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  result =  ((arg1)->can_trigger);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_on_cost_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::on_cost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::on_cost",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_on_cost_set",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_cost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_on_cost_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTriggerSkill::on_cost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::on_cost",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_on_cost_get",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  result =  ((arg1)->on_cost);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_on_effect_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::on_effect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::on_effect",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_on_effect_set",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_effect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_on_effect_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTriggerSkill::on_effect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::on_effect",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_on_effect_get",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  result =  ((arg1)->on_effect);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_priority_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::priority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::priority",1,"LuaTriggerSkill *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTriggerSkill::priority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_priority_set",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->priority = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_priority_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaTriggerSkill::priority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::priority",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_priority_get",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  result = (int) ((arg1)->priority);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_can_preshow_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaTriggerSkill::can_preshow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::can_preshow",1,"LuaTriggerSkill *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaTriggerSkill::can_preshow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_can_preshow_set",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->can_preshow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTriggerSkill_can_preshow_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTriggerSkill *arg1 = (LuaTriggerSkill *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTriggerSkill::can_preshow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTriggerSkill::can_preshow",1,"LuaTriggerSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTriggerSkill,0))){
    SWIG_fail_ptr("LuaTriggerSkill_can_preshow_get",1,SWIGTYPE_p_LuaTriggerSkill);
  }
  
  result = (bool) ((arg1)->can_preshow);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaTriggerSkill(void *obj) {
LuaTriggerSkill *arg1 = (LuaTriggerSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaTriggerSkill_methods[] = {
    {"addEvent", _wrap_LuaTriggerSkill_addEvent}, 
    {"setViewAsSkill", _wrap_LuaTriggerSkill_setViewAsSkill}, 
    {"setGlobal", _wrap_LuaTriggerSkill_setGlobal}, 
    {"setCanPreshow", _wrap_LuaTriggerSkill_setCanPreshow}, 
    {"getPriority", _wrap_LuaTriggerSkill_getPriority}, 
    {"triggerable", _wrap_LuaTriggerSkill_triggerable}, 
    {"cost", _wrap_LuaTriggerSkill_cost}, 
    {"effect", _wrap_LuaTriggerSkill_effect}, 
    {0,0}
};
static swig_lua_attribute swig_LuaTriggerSkill_attributes[] = {
    { "can_trigger", _wrap_LuaTriggerSkill_can_trigger_get, _wrap_LuaTriggerSkill_can_trigger_set},
    { "on_cost", _wrap_LuaTriggerSkill_on_cost_get, _wrap_LuaTriggerSkill_on_cost_set},
    { "on_effect", _wrap_LuaTriggerSkill_on_effect_get, _wrap_LuaTriggerSkill_on_effect_set},
    { "priority", _wrap_LuaTriggerSkill_priority_get, _wrap_LuaTriggerSkill_priority_set},
    { "can_preshow", _wrap_LuaTriggerSkill_can_preshow_get, _wrap_LuaTriggerSkill_can_preshow_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaTriggerSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaTriggerSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaTriggerSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaTriggerSkill_bases[] = {0,0};
static const char *swig_LuaTriggerSkill_base_names[] = {"TriggerSkill *",0};
static swig_lua_class _wrap_class_LuaTriggerSkill = { "LuaTriggerSkill", &SWIGTYPE_p_LuaTriggerSkill,_wrap_new_LuaTriggerSkill, swig_delete_LuaTriggerSkill, swig_LuaTriggerSkill_methods, swig_LuaTriggerSkill_attributes, { "LuaTriggerSkill", swig_LuaTriggerSkill_cls_methods, swig_LuaTriggerSkill_cls_attributes, swig_LuaTriggerSkill_cls_constants }, swig_LuaTriggerSkill_bases, swig_LuaTriggerSkill_base_names };

static int _wrap_new_BattleArraySkill(lua_State* L) {
  int SWIG_arg = 0;
  QString *arg1 = 0 ;
  HegemonyMode::ArrayType arg2 ;
  BattleArraySkill *result = 0 ;
  
  SWIG_check_num_args("BattleArraySkill::BattleArraySkill",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BattleArraySkill::BattleArraySkill",1,"QString const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BattleArraySkill::BattleArraySkill",2,"HegemonyMode::ArrayType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("new_BattleArraySkill",1,SWIGTYPE_p_QString);
  }
  
  arg2 = (HegemonyMode::ArrayType const)(int)lua_tonumber(L, 2);
  result = (BattleArraySkill *)new BattleArraySkill((QString const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BattleArraySkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BattleArraySkill_summonFriends(lua_State* L) {
  int SWIG_arg = 0;
  BattleArraySkill *arg1 = (BattleArraySkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("BattleArraySkill::summonFriends",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BattleArraySkill::summonFriends",1,"BattleArraySkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BattleArraySkill::summonFriends",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BattleArraySkill,0))){
    SWIG_fail_ptr("BattleArraySkill_summonFriends",1,SWIGTYPE_p_BattleArraySkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("BattleArraySkill_summonFriends",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((BattleArraySkill const *)arg1)->summonFriends(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BattleArraySkill_getArrayType(lua_State* L) {
  int SWIG_arg = 0;
  BattleArraySkill *arg1 = (BattleArraySkill *) 0 ;
  HegemonyMode::ArrayType result;
  
  SWIG_check_num_args("BattleArraySkill::getArrayType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BattleArraySkill::getArrayType",1,"BattleArraySkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BattleArraySkill,0))){
    SWIG_fail_ptr("BattleArraySkill_getArrayType",1,SWIGTYPE_p_BattleArraySkill);
  }
  
  result = (HegemonyMode::ArrayType)((BattleArraySkill const *)arg1)->getArrayType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BattleArraySkill(void *obj) {
BattleArraySkill *arg1 = (BattleArraySkill *) obj;
delete arg1;
}
static swig_lua_method swig_BattleArraySkill_methods[] = {
    {"summonFriends", _wrap_BattleArraySkill_summonFriends}, 
    {"getArrayType", _wrap_BattleArraySkill_getArrayType}, 
    {0,0}
};
static swig_lua_attribute swig_BattleArraySkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BattleArraySkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BattleArraySkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BattleArraySkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BattleArraySkill_bases[] = {0,0};
static const char *swig_BattleArraySkill_base_names[] = {"TriggerSkill *",0};
static swig_lua_class _wrap_class_BattleArraySkill = { "BattleArraySkill", &SWIGTYPE_p_BattleArraySkill,_wrap_new_BattleArraySkill, swig_delete_BattleArraySkill, swig_BattleArraySkill_methods, swig_BattleArraySkill_attributes, { "BattleArraySkill", swig_BattleArraySkill_cls_methods, swig_BattleArraySkill_cls_attributes, swig_BattleArraySkill_cls_constants }, swig_BattleArraySkill_bases, swig_BattleArraySkill_base_names };

static int _wrap_new_LuaBattleArraySkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Skill::Frequency arg2 ;
  char *arg3 = (char *) 0 ;
  HegemonyMode::ArrayType arg4 ;
  LuaBattleArraySkill *result = 0 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::LuaBattleArraySkill",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaBattleArraySkill::LuaBattleArraySkill",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::LuaBattleArraySkill",2,"Skill::Frequency");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaBattleArraySkill::LuaBattleArraySkill",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LuaBattleArraySkill::LuaBattleArraySkill",4,"HegemonyMode::ArrayType");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (Skill::Frequency)(int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (HegemonyMode::ArrayType)(int)lua_tonumber(L, 4);
  result = (LuaBattleArraySkill *)new LuaBattleArraySkill((char const *)arg1,arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaBattleArraySkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_addEvent(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  TriggerEvent arg2 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::addEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::addEvent",1,"LuaBattleArraySkill *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::addEvent",2,"TriggerEvent");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_addEvent",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  (arg1)->addEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_setViewAsSkill(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  ViewAsSkill *arg2 = (ViewAsSkill *) 0 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::setViewAsSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::setViewAsSkill",1,"LuaBattleArraySkill *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaBattleArraySkill::setViewAsSkill",2,"ViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_setViewAsSkill",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_setViewAsSkill",2,SWIGTYPE_p_ViewAsSkill);
  }
  
  (arg1)->setViewAsSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaBattleArraySkill::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::getPriority",1,"LuaBattleArraySkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_getPriority",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  result = (int)((LuaBattleArraySkill const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_triggerable(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  QMap< ServerPlayer *,QStringList > result;
  
  SWIG_check_num_args("LuaBattleArraySkill::triggerable",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::triggerable",1,"LuaBattleArraySkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::triggerable",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBattleArraySkill::triggerable",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaBattleArraySkill::triggerable",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaBattleArraySkill::triggerable",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_triggerable",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_triggerable",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_triggerable",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_triggerable",5,SWIGTYPE_p_QVariant);
  }
  
  result = ((LuaBattleArraySkill const *)arg1)->triggerable(arg2,arg3,arg4,*arg5);
  {
    QMap< ServerPlayer *,QStringList > * resultptr = new QMap< ServerPlayer *,QStringList >((const QMap< ServerPlayer *,QStringList > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QMapT_ServerPlayer_p_QStringList_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_cost__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer *arg6 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBattleArraySkill::cost",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::cost",1,"LuaBattleArraySkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::cost",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBattleArraySkill::cost",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaBattleArraySkill::cost",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaBattleArraySkill::cost",5,"QVariant &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("LuaBattleArraySkill::cost",6,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",6,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((LuaBattleArraySkill const *)arg1)->cost(arg2,arg3,arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_cost__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBattleArraySkill::cost",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::cost",1,"LuaBattleArraySkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::cost",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBattleArraySkill::cost",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaBattleArraySkill::cost",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaBattleArraySkill::cost",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_cost",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((LuaBattleArraySkill const *)arg1)->cost(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_cost(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBattleArraySkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LuaBattleArraySkill_cost__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBattleArraySkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_LuaBattleArraySkill_cost__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaBattleArraySkill_cost'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaBattleArraySkill::cost(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *) const\n"
    "    LuaBattleArraySkill::cost(TriggerEvent,Room *,ServerPlayer *,QVariant &) const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBattleArraySkill_effect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  ServerPlayer *arg6 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBattleArraySkill::effect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::effect",1,"LuaBattleArraySkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::effect",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBattleArraySkill::effect",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaBattleArraySkill::effect",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaBattleArraySkill::effect",5,"QVariant &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("LuaBattleArraySkill::effect",6,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",5,SWIGTYPE_p_QVariant);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",6,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((LuaBattleArraySkill const *)arg1)->effect(arg2,arg3,arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_effect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  TriggerEvent arg2 ;
  Room *arg3 = (Room *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  QVariant *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBattleArraySkill::effect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::effect",1,"LuaBattleArraySkill const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::effect",2,"TriggerEvent");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBattleArraySkill::effect",3,"Room *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaBattleArraySkill::effect",4,"ServerPlayer *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("LuaBattleArraySkill::effect",5,"QVariant &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (TriggerEvent)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",3,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",4,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_effect",5,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)((LuaBattleArraySkill const *)arg1)->effect(arg2,arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_effect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBattleArraySkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LuaBattleArraySkill_effect__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBattleArraySkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Room, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QVariant, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_LuaBattleArraySkill_effect__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaBattleArraySkill_effect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaBattleArraySkill::effect(TriggerEvent,Room *,ServerPlayer *,QVariant &,ServerPlayer *) const\n"
    "    LuaBattleArraySkill::effect(TriggerEvent,Room *,ServerPlayer *,QVariant &) const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBattleArraySkill_can_trigger_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::can_trigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::can_trigger",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_can_trigger_set",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->can_trigger = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_can_trigger_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBattleArraySkill::can_trigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::can_trigger",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_can_trigger_get",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  result =  ((arg1)->can_trigger);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_on_cost_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::on_cost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::on_cost",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_on_cost_set",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_cost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_on_cost_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBattleArraySkill::on_cost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::on_cost",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_on_cost_get",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  result =  ((arg1)->on_cost);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_on_effect_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::on_effect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::on_effect",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_on_effect_set",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_effect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_on_effect_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBattleArraySkill::on_effect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::on_effect",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_on_effect_get",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  result =  ((arg1)->on_effect);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_priority_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaBattleArraySkill::priority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::priority",1,"LuaBattleArraySkill *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBattleArraySkill::priority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_priority_set",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->priority = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBattleArraySkill_priority_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaBattleArraySkill::priority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBattleArraySkill::priority",1,"LuaBattleArraySkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBattleArraySkill,0))){
    SWIG_fail_ptr("LuaBattleArraySkill_priority_get",1,SWIGTYPE_p_LuaBattleArraySkill);
  }
  
  result = (int) ((arg1)->priority);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaBattleArraySkill(void *obj) {
LuaBattleArraySkill *arg1 = (LuaBattleArraySkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaBattleArraySkill_methods[] = {
    {"addEvent", _wrap_LuaBattleArraySkill_addEvent}, 
    {"setViewAsSkill", _wrap_LuaBattleArraySkill_setViewAsSkill}, 
    {"getPriority", _wrap_LuaBattleArraySkill_getPriority}, 
    {"triggerable", _wrap_LuaBattleArraySkill_triggerable}, 
    {"cost", _wrap_LuaBattleArraySkill_cost}, 
    {"effect", _wrap_LuaBattleArraySkill_effect}, 
    {0,0}
};
static swig_lua_attribute swig_LuaBattleArraySkill_attributes[] = {
    { "can_trigger", _wrap_LuaBattleArraySkill_can_trigger_get, _wrap_LuaBattleArraySkill_can_trigger_set},
    { "on_cost", _wrap_LuaBattleArraySkill_on_cost_get, _wrap_LuaBattleArraySkill_on_cost_set},
    { "on_effect", _wrap_LuaBattleArraySkill_on_effect_get, _wrap_LuaBattleArraySkill_on_effect_set},
    { "priority", _wrap_LuaBattleArraySkill_priority_get, _wrap_LuaBattleArraySkill_priority_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaBattleArraySkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaBattleArraySkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaBattleArraySkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaBattleArraySkill_bases[] = {0,0};
static const char *swig_LuaBattleArraySkill_base_names[] = {"BattleArraySkill *",0};
static swig_lua_class _wrap_class_LuaBattleArraySkill = { "LuaBattleArraySkill", &SWIGTYPE_p_LuaBattleArraySkill,_wrap_new_LuaBattleArraySkill, swig_delete_LuaBattleArraySkill, swig_LuaBattleArraySkill_methods, swig_LuaBattleArraySkill_attributes, { "LuaBattleArraySkill", swig_LuaBattleArraySkill_cls_methods, swig_LuaBattleArraySkill_cls_attributes, swig_LuaBattleArraySkill_cls_constants }, swig_LuaBattleArraySkill_bases, swig_LuaBattleArraySkill_base_names };

static int _wrap_DistanceSkill_getCorrect(lua_State* L) {
  int SWIG_arg = 0;
  DistanceSkill *arg1 = (DistanceSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Player *arg3 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("DistanceSkill::getCorrect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DistanceSkill::getCorrect",1,"DistanceSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DistanceSkill::getCorrect",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DistanceSkill::getCorrect",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DistanceSkill,0))){
    SWIG_fail_ptr("DistanceSkill_getCorrect",1,SWIGTYPE_p_DistanceSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("DistanceSkill_getCorrect",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("DistanceSkill_getCorrect",3,SWIGTYPE_p_Player);
  }
  
  result = (int)((DistanceSkill const *)arg1)->getCorrect((Player const *)arg2,(Player const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DistanceSkill(void *obj) {
DistanceSkill *arg1 = (DistanceSkill *) obj;
delete arg1;
}
static swig_lua_method swig_DistanceSkill_methods[] = {
    {"getCorrect", _wrap_DistanceSkill_getCorrect}, 
    {0,0}
};
static swig_lua_attribute swig_DistanceSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DistanceSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DistanceSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DistanceSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DistanceSkill_bases[] = {0,0};
static const char *swig_DistanceSkill_base_names[] = {"Skill *",0};
static swig_lua_class _wrap_class_DistanceSkill = { "DistanceSkill", &SWIGTYPE_p_DistanceSkill,0, swig_delete_DistanceSkill, swig_DistanceSkill_methods, swig_DistanceSkill_attributes, { "DistanceSkill", swig_DistanceSkill_cls_methods, swig_DistanceSkill_cls_attributes, swig_DistanceSkill_cls_constants }, swig_DistanceSkill_bases, swig_DistanceSkill_base_names };

static int _wrap_new_MaxCardsSkill(lua_State* L) {
  int SWIG_arg = 0;
  QString *arg1 = 0 ;
  MaxCardsSkill *result = 0 ;
  
  SWIG_check_num_args("MaxCardsSkill::MaxCardsSkill",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MaxCardsSkill::MaxCardsSkill",1,"QString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("new_MaxCardsSkill",1,SWIGTYPE_p_QString);
  }
  
  result = (MaxCardsSkill *)new MaxCardsSkill((QString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MaxCardsSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxCardsSkill_getExtra__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MaxCardsSkill *arg1 = (MaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  MaxCardsType::MaxCardsCount arg3 ;
  int result;
  
  SWIG_check_num_args("MaxCardsSkill::getExtra",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MaxCardsSkill::getExtra",1,"MaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MaxCardsSkill::getExtra",2,"ServerPlayer const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MaxCardsSkill::getExtra",3,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MaxCardsSkill,0))){
    SWIG_fail_ptr("MaxCardsSkill_getExtra",1,SWIGTYPE_p_MaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("MaxCardsSkill_getExtra",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 3);
  result = (int)((MaxCardsSkill const *)arg1)->getExtra((ServerPlayer const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxCardsSkill_getExtra__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MaxCardsSkill *arg1 = (MaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("MaxCardsSkill::getExtra",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MaxCardsSkill::getExtra",1,"MaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MaxCardsSkill::getExtra",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MaxCardsSkill,0))){
    SWIG_fail_ptr("MaxCardsSkill_getExtra",1,SWIGTYPE_p_MaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("MaxCardsSkill_getExtra",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((MaxCardsSkill const *)arg1)->getExtra((ServerPlayer const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxCardsSkill_getExtra(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MaxCardsSkill_getExtra__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MaxCardsSkill_getExtra__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MaxCardsSkill_getExtra'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MaxCardsSkill::getExtra(ServerPlayer const *,MaxCardsType::MaxCardsCount) const\n"
    "    MaxCardsSkill::getExtra(ServerPlayer const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_MaxCardsSkill_getFixed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MaxCardsSkill *arg1 = (MaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  MaxCardsType::MaxCardsCount arg3 ;
  int result;
  
  SWIG_check_num_args("MaxCardsSkill::getFixed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MaxCardsSkill::getFixed",1,"MaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MaxCardsSkill::getFixed",2,"ServerPlayer const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MaxCardsSkill::getFixed",3,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MaxCardsSkill,0))){
    SWIG_fail_ptr("MaxCardsSkill_getFixed",1,SWIGTYPE_p_MaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("MaxCardsSkill_getFixed",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 3);
  result = (int)((MaxCardsSkill const *)arg1)->getFixed((ServerPlayer const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxCardsSkill_getFixed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MaxCardsSkill *arg1 = (MaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("MaxCardsSkill::getFixed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MaxCardsSkill::getFixed",1,"MaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MaxCardsSkill::getFixed",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MaxCardsSkill,0))){
    SWIG_fail_ptr("MaxCardsSkill_getFixed",1,SWIGTYPE_p_MaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("MaxCardsSkill_getFixed",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((MaxCardsSkill const *)arg1)->getFixed((ServerPlayer const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxCardsSkill_getFixed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MaxCardsSkill_getFixed__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MaxCardsSkill_getFixed__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MaxCardsSkill_getFixed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MaxCardsSkill::getFixed(ServerPlayer const *,MaxCardsType::MaxCardsCount) const\n"
    "    MaxCardsSkill::getFixed(ServerPlayer const *) const\n");
  lua_error(L);return 0;
}


static void swig_delete_MaxCardsSkill(void *obj) {
MaxCardsSkill *arg1 = (MaxCardsSkill *) obj;
delete arg1;
}
static swig_lua_method swig_MaxCardsSkill_methods[] = {
    {"getExtra", _wrap_MaxCardsSkill_getExtra}, 
    {"getFixed", _wrap_MaxCardsSkill_getFixed}, 
    {0,0}
};
static swig_lua_attribute swig_MaxCardsSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MaxCardsSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaxCardsSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MaxCardsSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MaxCardsSkill_bases[] = {0,0};
static const char *swig_MaxCardsSkill_base_names[] = {"Skill *",0};
static swig_lua_class _wrap_class_MaxCardsSkill = { "MaxCardsSkill", &SWIGTYPE_p_MaxCardsSkill,_wrap_new_MaxCardsSkill, swig_delete_MaxCardsSkill, swig_MaxCardsSkill_methods, swig_MaxCardsSkill_attributes, { "MaxCardsSkill", swig_MaxCardsSkill_cls_methods, swig_MaxCardsSkill_cls_attributes, swig_MaxCardsSkill_cls_constants }, swig_MaxCardsSkill_bases, swig_MaxCardsSkill_base_names };

static int _wrap_new_TargetModSkill(lua_State* L) {
  int SWIG_arg = 0;
  QString *arg1 = 0 ;
  TargetModSkill *result = 0 ;
  
  SWIG_check_num_args("TargetModSkill::TargetModSkill",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TargetModSkill::TargetModSkill",1,"QString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("new_TargetModSkill",1,SWIGTYPE_p_QString);
  }
  
  result = (TargetModSkill *)new TargetModSkill((QString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TargetModSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TargetModSkill_getPattern(lua_State* L) {
  int SWIG_arg = 0;
  TargetModSkill *arg1 = (TargetModSkill *) 0 ;
  QString result;
  
  SWIG_check_num_args("TargetModSkill::getPattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TargetModSkill::getPattern",1,"TargetModSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TargetModSkill,0))){
    SWIG_fail_ptr("TargetModSkill_getPattern",1,SWIGTYPE_p_TargetModSkill);
  }
  
  result = ((TargetModSkill const *)arg1)->getPattern();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TargetModSkill_getResidueNum(lua_State* L) {
  int SWIG_arg = 0;
  TargetModSkill *arg1 = (TargetModSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("TargetModSkill::getResidueNum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TargetModSkill::getResidueNum",1,"TargetModSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TargetModSkill::getResidueNum",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TargetModSkill::getResidueNum",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TargetModSkill,0))){
    SWIG_fail_ptr("TargetModSkill_getResidueNum",1,SWIGTYPE_p_TargetModSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("TargetModSkill_getResidueNum",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("TargetModSkill_getResidueNum",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((TargetModSkill const *)arg1)->getResidueNum((Player const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TargetModSkill_getDistanceLimit(lua_State* L) {
  int SWIG_arg = 0;
  TargetModSkill *arg1 = (TargetModSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("TargetModSkill::getDistanceLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TargetModSkill::getDistanceLimit",1,"TargetModSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TargetModSkill::getDistanceLimit",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TargetModSkill::getDistanceLimit",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TargetModSkill,0))){
    SWIG_fail_ptr("TargetModSkill_getDistanceLimit",1,SWIGTYPE_p_TargetModSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("TargetModSkill_getDistanceLimit",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("TargetModSkill_getDistanceLimit",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((TargetModSkill const *)arg1)->getDistanceLimit((Player const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TargetModSkill_getExtraTargetNum(lua_State* L) {
  int SWIG_arg = 0;
  TargetModSkill *arg1 = (TargetModSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("TargetModSkill::getExtraTargetNum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TargetModSkill::getExtraTargetNum",1,"TargetModSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TargetModSkill::getExtraTargetNum",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TargetModSkill::getExtraTargetNum",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TargetModSkill,0))){
    SWIG_fail_ptr("TargetModSkill_getExtraTargetNum",1,SWIGTYPE_p_TargetModSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("TargetModSkill_getExtraTargetNum",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("TargetModSkill_getExtraTargetNum",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((TargetModSkill const *)arg1)->getExtraTargetNum((Player const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TargetModSkill(void *obj) {
TargetModSkill *arg1 = (TargetModSkill *) obj;
delete arg1;
}
static swig_lua_method swig_TargetModSkill_methods[] = {
    {"getPattern", _wrap_TargetModSkill_getPattern}, 
    {"getResidueNum", _wrap_TargetModSkill_getResidueNum}, 
    {"getDistanceLimit", _wrap_TargetModSkill_getDistanceLimit}, 
    {"getExtraTargetNum", _wrap_TargetModSkill_getExtraTargetNum}, 
    {0,0}
};
static swig_lua_attribute swig_TargetModSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TargetModSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TargetModSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TargetModSkill_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Residue", TargetModSkill::Residue)},
    {SWIG_LUA_CONSTTAB_INT("DistanceLimit", TargetModSkill::DistanceLimit)},
    {SWIG_LUA_CONSTTAB_INT("ExtraTarget", TargetModSkill::ExtraTarget)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TargetModSkill_bases[] = {0,0};
static const char *swig_TargetModSkill_base_names[] = {"Skill *",0};
static swig_lua_class _wrap_class_TargetModSkill = { "TargetModSkill", &SWIGTYPE_p_TargetModSkill,_wrap_new_TargetModSkill, swig_delete_TargetModSkill, swig_TargetModSkill_methods, swig_TargetModSkill_attributes, { "TargetModSkill", swig_TargetModSkill_cls_methods, swig_TargetModSkill_cls_attributes, swig_TargetModSkill_cls_constants }, swig_TargetModSkill_bases, swig_TargetModSkill_base_names };

static int _wrap_ViewAsSkill_viewFilter(lua_State* L) {
  int SWIG_arg = 0;
  ViewAsSkill *arg1 = (ViewAsSkill *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("ViewAsSkill::viewFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ViewAsSkill::viewFilter",1,"ViewAsSkill const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ViewAsSkill::viewFilter",2,"QList< Card const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ViewAsSkill::viewFilter",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("ViewAsSkill_viewFilter",1,SWIGTYPE_p_ViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("ViewAsSkill_viewFilter",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("ViewAsSkill_viewFilter",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)((ViewAsSkill const *)arg1)->viewFilter((QList< Card const * > const &)*arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewAsSkill_viewAs(lua_State* L) {
  int SWIG_arg = 0;
  ViewAsSkill *arg1 = (ViewAsSkill *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("ViewAsSkill::viewAs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ViewAsSkill::viewAs",1,"ViewAsSkill const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ViewAsSkill::viewAs",2,"QList< Card const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("ViewAsSkill_viewAs",1,SWIGTYPE_p_ViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("ViewAsSkill_viewAs",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (Card *)((ViewAsSkill const *)arg1)->viewAs((QList< Card const * > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewAsSkill_isEnabledAtPlay(lua_State* L) {
  int SWIG_arg = 0;
  ViewAsSkill *arg1 = (ViewAsSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("ViewAsSkill::isEnabledAtPlay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ViewAsSkill::isEnabledAtPlay",1,"ViewAsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ViewAsSkill::isEnabledAtPlay",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("ViewAsSkill_isEnabledAtPlay",1,SWIGTYPE_p_ViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("ViewAsSkill_isEnabledAtPlay",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((ViewAsSkill const *)arg1)->isEnabledAtPlay((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewAsSkill_isEnabledAtResponse(lua_State* L) {
  int SWIG_arg = 0;
  ViewAsSkill *arg1 = (ViewAsSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ViewAsSkill::isEnabledAtResponse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ViewAsSkill::isEnabledAtResponse",1,"ViewAsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ViewAsSkill::isEnabledAtResponse",2,"Player const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ViewAsSkill::isEnabledAtResponse",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("ViewAsSkill_isEnabledAtResponse",1,SWIGTYPE_p_ViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("ViewAsSkill_isEnabledAtResponse",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)((ViewAsSkill const *)arg1)->isEnabledAtResponse((Player const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewAsSkill_isResponseOrUse(lua_State* L) {
  int SWIG_arg = 0;
  ViewAsSkill *arg1 = (ViewAsSkill *) 0 ;
  bool result;
  
  SWIG_check_num_args("ViewAsSkill::isResponseOrUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ViewAsSkill::isResponseOrUse",1,"ViewAsSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("ViewAsSkill_isResponseOrUse",1,SWIGTYPE_p_ViewAsSkill);
  }
  
  result = (bool)((ViewAsSkill const *)arg1)->isResponseOrUse();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewAsSkill_getExpandPile(lua_State* L) {
  int SWIG_arg = 0;
  ViewAsSkill *arg1 = (ViewAsSkill *) 0 ;
  QString result;
  
  SWIG_check_num_args("ViewAsSkill::getExpandPile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ViewAsSkill::getExpandPile",1,"ViewAsSkill const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ViewAsSkill,0))){
    SWIG_fail_ptr("ViewAsSkill_getExpandPile",1,SWIGTYPE_p_ViewAsSkill);
  }
  
  result = ((ViewAsSkill const *)arg1)->getExpandPile();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ViewAsSkill(void *obj) {
ViewAsSkill *arg1 = (ViewAsSkill *) obj;
delete arg1;
}
static swig_lua_method swig_ViewAsSkill_methods[] = {
    {"viewFilter", _wrap_ViewAsSkill_viewFilter}, 
    {"viewAs", _wrap_ViewAsSkill_viewAs}, 
    {"isEnabledAtPlay", _wrap_ViewAsSkill_isEnabledAtPlay}, 
    {"isEnabledAtResponse", _wrap_ViewAsSkill_isEnabledAtResponse}, 
    {"isResponseOrUse", _wrap_ViewAsSkill_isResponseOrUse}, 
    {"getExpandPile", _wrap_ViewAsSkill_getExpandPile}, 
    {0,0}
};
static swig_lua_attribute swig_ViewAsSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ViewAsSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ViewAsSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ViewAsSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ViewAsSkill_bases[] = {0,0};
static const char *swig_ViewAsSkill_base_names[] = {"Skill *",0};
static swig_lua_class _wrap_class_ViewAsSkill = { "ViewAsSkill", &SWIGTYPE_p_ViewAsSkill,0, swig_delete_ViewAsSkill, swig_ViewAsSkill_methods, swig_ViewAsSkill_attributes, { "ViewAsSkill", swig_ViewAsSkill_cls_methods, swig_ViewAsSkill_cls_attributes, swig_ViewAsSkill_cls_constants }, swig_ViewAsSkill_bases, swig_ViewAsSkill_base_names };

static int _wrap_new_LuaViewAsSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  LuaViewAsSkill *result = 0 ;
  
  SWIG_check_num_args("LuaViewAsSkill::LuaViewAsSkill",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaViewAsSkill::LuaViewAsSkill",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaViewAsSkill::LuaViewAsSkill",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("LuaViewAsSkill::LuaViewAsSkill",3,"bool");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaViewAsSkill::LuaViewAsSkill",4,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (char *)lua_tostring(L, 4);
  result = (LuaViewAsSkill *)new LuaViewAsSkill((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaViewAsSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_viewFilter(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaViewAsSkill::viewFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::viewFilter",1,"LuaViewAsSkill const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaViewAsSkill::viewFilter",2,"QList< Card const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaViewAsSkill::viewFilter",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_viewFilter",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("LuaViewAsSkill_viewFilter",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("LuaViewAsSkill_viewFilter",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)((LuaViewAsSkill const *)arg1)->viewFilter((QList< Card const * > const &)*arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_viewAs(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("LuaViewAsSkill::viewAs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::viewAs",1,"LuaViewAsSkill const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaViewAsSkill::viewAs",2,"QList< Card const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_viewAs",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("LuaViewAsSkill_viewAs",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (Card *)((LuaViewAsSkill const *)arg1)->viewAs((QList< Card const * > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_view_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaViewAsSkill::view_filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::view_filter",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_view_filter_set",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->view_filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_view_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaViewAsSkill::view_filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::view_filter",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_view_filter_get",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  result =  ((arg1)->view_filter);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_view_as_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaViewAsSkill::view_as",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::view_as",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_view_as_set",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->view_as = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_view_as_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaViewAsSkill::view_as",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::view_as",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_view_as_get",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  result =  ((arg1)->view_as);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_enabled_at_play_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaViewAsSkill::enabled_at_play",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::enabled_at_play",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_enabled_at_play_set",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->enabled_at_play = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_enabled_at_play_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaViewAsSkill::enabled_at_play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::enabled_at_play",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_enabled_at_play_get",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  result =  ((arg1)->enabled_at_play);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_enabled_at_response_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaViewAsSkill::enabled_at_response",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::enabled_at_response",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_enabled_at_response_set",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->enabled_at_response = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_enabled_at_response_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaViewAsSkill::enabled_at_response",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::enabled_at_response",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_enabled_at_response_get",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  result =  ((arg1)->enabled_at_response);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_enabled_at_nullification_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaViewAsSkill::enabled_at_nullification",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::enabled_at_nullification",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_enabled_at_nullification_set",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->enabled_at_nullification = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaViewAsSkill_enabled_at_nullification_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaViewAsSkill *arg1 = (LuaViewAsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaViewAsSkill::enabled_at_nullification",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaViewAsSkill::enabled_at_nullification",1,"LuaViewAsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaViewAsSkill,0))){
    SWIG_fail_ptr("LuaViewAsSkill_enabled_at_nullification_get",1,SWIGTYPE_p_LuaViewAsSkill);
  }
  
  result =  ((arg1)->enabled_at_nullification);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaViewAsSkill(void *obj) {
LuaViewAsSkill *arg1 = (LuaViewAsSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaViewAsSkill_methods[] = {
    {"viewFilter", _wrap_LuaViewAsSkill_viewFilter}, 
    {"viewAs", _wrap_LuaViewAsSkill_viewAs}, 
    {0,0}
};
static swig_lua_attribute swig_LuaViewAsSkill_attributes[] = {
    { "view_filter", _wrap_LuaViewAsSkill_view_filter_get, _wrap_LuaViewAsSkill_view_filter_set},
    { "view_as", _wrap_LuaViewAsSkill_view_as_get, _wrap_LuaViewAsSkill_view_as_set},
    { "enabled_at_play", _wrap_LuaViewAsSkill_enabled_at_play_get, _wrap_LuaViewAsSkill_enabled_at_play_set},
    { "enabled_at_response", _wrap_LuaViewAsSkill_enabled_at_response_get, _wrap_LuaViewAsSkill_enabled_at_response_set},
    { "enabled_at_nullification", _wrap_LuaViewAsSkill_enabled_at_nullification_get, _wrap_LuaViewAsSkill_enabled_at_nullification_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaViewAsSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaViewAsSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaViewAsSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaViewAsSkill_bases[] = {0,0};
static const char *swig_LuaViewAsSkill_base_names[] = {"ViewAsSkill *",0};
static swig_lua_class _wrap_class_LuaViewAsSkill = { "LuaViewAsSkill", &SWIGTYPE_p_LuaViewAsSkill,_wrap_new_LuaViewAsSkill, swig_delete_LuaViewAsSkill, swig_LuaViewAsSkill_methods, swig_LuaViewAsSkill_attributes, { "LuaViewAsSkill", swig_LuaViewAsSkill_cls_methods, swig_LuaViewAsSkill_cls_attributes, swig_LuaViewAsSkill_cls_constants }, swig_LuaViewAsSkill_bases, swig_LuaViewAsSkill_base_names };

static int _wrap_OneCardViewAsSkill_viewFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OneCardViewAsSkill *arg1 = (OneCardViewAsSkill *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  Card *arg3 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("OneCardViewAsSkill::viewFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OneCardViewAsSkill::viewFilter",1,"OneCardViewAsSkill const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OneCardViewAsSkill::viewFilter",2,"QList< Card const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OneCardViewAsSkill::viewFilter",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OneCardViewAsSkill,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewFilter",1,SWIGTYPE_p_OneCardViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewFilter",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewFilter",3,SWIGTYPE_p_Card);
  }
  
  result = (bool)((OneCardViewAsSkill const *)arg1)->viewFilter((QList< Card const * > const &)*arg2,(Card const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneCardViewAsSkill_viewAs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OneCardViewAsSkill *arg1 = (OneCardViewAsSkill *) 0 ;
  QList< Card const * > *arg2 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("OneCardViewAsSkill::viewAs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OneCardViewAsSkill::viewAs",1,"OneCardViewAsSkill const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OneCardViewAsSkill::viewAs",2,"QList< Card const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OneCardViewAsSkill,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewAs",1,SWIGTYPE_p_OneCardViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Card_const_p_t,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewAs",2,SWIGTYPE_p_QListT_Card_const_p_t);
  }
  
  result = (Card *)((OneCardViewAsSkill const *)arg1)->viewAs((QList< Card const * > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneCardViewAsSkill_viewFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OneCardViewAsSkill *arg1 = (OneCardViewAsSkill *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("OneCardViewAsSkill::viewFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OneCardViewAsSkill::viewFilter",1,"OneCardViewAsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OneCardViewAsSkill::viewFilter",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OneCardViewAsSkill,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewFilter",1,SWIGTYPE_p_OneCardViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewFilter",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((OneCardViewAsSkill const *)arg1)->viewFilter((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneCardViewAsSkill_viewFilter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OneCardViewAsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OneCardViewAsSkill_viewFilter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OneCardViewAsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OneCardViewAsSkill_viewFilter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OneCardViewAsSkill_viewFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OneCardViewAsSkill::viewFilter(QList< Card const * > const &,Card const *) const\n"
    "    OneCardViewAsSkill::viewFilter(Card const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_OneCardViewAsSkill_viewAs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OneCardViewAsSkill *arg1 = (OneCardViewAsSkill *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("OneCardViewAsSkill::viewAs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OneCardViewAsSkill::viewAs",1,"OneCardViewAsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OneCardViewAsSkill::viewAs",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OneCardViewAsSkill,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewAs",1,SWIGTYPE_p_OneCardViewAsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("OneCardViewAsSkill_viewAs",2,SWIGTYPE_p_Card);
  }
  
  result = (Card *)((OneCardViewAsSkill const *)arg1)->viewAs((Card const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneCardViewAsSkill_viewAs(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OneCardViewAsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QListT_Card_const_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OneCardViewAsSkill_viewAs__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OneCardViewAsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Card, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OneCardViewAsSkill_viewAs__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OneCardViewAsSkill_viewAs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OneCardViewAsSkill::viewAs(QList< Card const * > const &) const\n"
    "    OneCardViewAsSkill::viewAs(Card const *) const\n");
  lua_error(L);return 0;
}


static void swig_delete_OneCardViewAsSkill(void *obj) {
OneCardViewAsSkill *arg1 = (OneCardViewAsSkill *) obj;
delete arg1;
}
static swig_lua_method swig_OneCardViewAsSkill_methods[] = {
    {"viewFilter", _wrap_OneCardViewAsSkill_viewFilter}, 
    {"viewAs", _wrap_OneCardViewAsSkill_viewAs}, 
    {0,0}
};
static swig_lua_attribute swig_OneCardViewAsSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_OneCardViewAsSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OneCardViewAsSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_OneCardViewAsSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_OneCardViewAsSkill_bases[] = {0,0};
static const char *swig_OneCardViewAsSkill_base_names[] = {"ViewAsSkill *",0};
static swig_lua_class _wrap_class_OneCardViewAsSkill = { "OneCardViewAsSkill", &SWIGTYPE_p_OneCardViewAsSkill,0, swig_delete_OneCardViewAsSkill, swig_OneCardViewAsSkill_methods, swig_OneCardViewAsSkill_attributes, { "OneCardViewAsSkill", swig_OneCardViewAsSkill_cls_methods, swig_OneCardViewAsSkill_cls_attributes, swig_OneCardViewAsSkill_cls_constants }, swig_OneCardViewAsSkill_bases, swig_OneCardViewAsSkill_base_names };

static void swig_delete_FilterSkill(void *obj) {
FilterSkill *arg1 = (FilterSkill *) obj;
delete arg1;
}
static swig_lua_method swig_FilterSkill_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_FilterSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_FilterSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilterSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_FilterSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_FilterSkill_bases[] = {0,0};
static const char *swig_FilterSkill_base_names[] = {"OneCardViewAsSkill *",0};
static swig_lua_class _wrap_class_FilterSkill = { "FilterSkill", &SWIGTYPE_p_FilterSkill,0, swig_delete_FilterSkill, swig_FilterSkill_methods, swig_FilterSkill_attributes, { "FilterSkill", swig_FilterSkill_cls_methods, swig_FilterSkill_cls_attributes, swig_FilterSkill_cls_constants }, swig_FilterSkill_bases, swig_FilterSkill_base_names };

static int _wrap_new_LuaFilterSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LuaFilterSkill *result = 0 ;
  
  SWIG_check_num_args("LuaFilterSkill::LuaFilterSkill",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaFilterSkill::LuaFilterSkill",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LuaFilterSkill *)new LuaFilterSkill((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaFilterSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaFilterSkill_viewFilter(lua_State* L) {
  int SWIG_arg = 0;
  LuaFilterSkill *arg1 = (LuaFilterSkill *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaFilterSkill::viewFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaFilterSkill::viewFilter",1,"LuaFilterSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaFilterSkill::viewFilter",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaFilterSkill,0))){
    SWIG_fail_ptr("LuaFilterSkill_viewFilter",1,SWIGTYPE_p_LuaFilterSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("LuaFilterSkill_viewFilter",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)((LuaFilterSkill const *)arg1)->viewFilter((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaFilterSkill_viewAs(lua_State* L) {
  int SWIG_arg = 0;
  LuaFilterSkill *arg1 = (LuaFilterSkill *) 0 ;
  Card *arg2 = (Card *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("LuaFilterSkill::viewAs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaFilterSkill::viewAs",1,"LuaFilterSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaFilterSkill::viewAs",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaFilterSkill,0))){
    SWIG_fail_ptr("LuaFilterSkill_viewAs",1,SWIGTYPE_p_LuaFilterSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("LuaFilterSkill_viewAs",2,SWIGTYPE_p_Card);
  }
  
  result = (Card *)((LuaFilterSkill const *)arg1)->viewAs((Card const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaFilterSkill_view_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaFilterSkill *arg1 = (LuaFilterSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaFilterSkill::view_filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaFilterSkill::view_filter",1,"LuaFilterSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaFilterSkill,0))){
    SWIG_fail_ptr("LuaFilterSkill_view_filter_set",1,SWIGTYPE_p_LuaFilterSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->view_filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaFilterSkill_view_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaFilterSkill *arg1 = (LuaFilterSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaFilterSkill::view_filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaFilterSkill::view_filter",1,"LuaFilterSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaFilterSkill,0))){
    SWIG_fail_ptr("LuaFilterSkill_view_filter_get",1,SWIGTYPE_p_LuaFilterSkill);
  }
  
  result =  ((arg1)->view_filter);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaFilterSkill_view_as_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaFilterSkill *arg1 = (LuaFilterSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaFilterSkill::view_as",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaFilterSkill::view_as",1,"LuaFilterSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaFilterSkill,0))){
    SWIG_fail_ptr("LuaFilterSkill_view_as_set",1,SWIGTYPE_p_LuaFilterSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->view_as = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaFilterSkill_view_as_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaFilterSkill *arg1 = (LuaFilterSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaFilterSkill::view_as",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaFilterSkill::view_as",1,"LuaFilterSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaFilterSkill,0))){
    SWIG_fail_ptr("LuaFilterSkill_view_as_get",1,SWIGTYPE_p_LuaFilterSkill);
  }
  
  result =  ((arg1)->view_as);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaFilterSkill(void *obj) {
LuaFilterSkill *arg1 = (LuaFilterSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaFilterSkill_methods[] = {
    {"viewFilter", _wrap_LuaFilterSkill_viewFilter}, 
    {"viewAs", _wrap_LuaFilterSkill_viewAs}, 
    {0,0}
};
static swig_lua_attribute swig_LuaFilterSkill_attributes[] = {
    { "view_filter", _wrap_LuaFilterSkill_view_filter_get, _wrap_LuaFilterSkill_view_filter_set},
    { "view_as", _wrap_LuaFilterSkill_view_as_get, _wrap_LuaFilterSkill_view_as_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaFilterSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaFilterSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaFilterSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaFilterSkill_bases[] = {0,0};
static const char *swig_LuaFilterSkill_base_names[] = {"FilterSkill *",0};
static swig_lua_class _wrap_class_LuaFilterSkill = { "LuaFilterSkill", &SWIGTYPE_p_LuaFilterSkill,_wrap_new_LuaFilterSkill, swig_delete_LuaFilterSkill, swig_LuaFilterSkill_methods, swig_LuaFilterSkill_attributes, { "LuaFilterSkill", swig_LuaFilterSkill_cls_methods, swig_LuaFilterSkill_cls_attributes, swig_LuaFilterSkill_cls_constants }, swig_LuaFilterSkill_bases, swig_LuaFilterSkill_base_names };

static int _wrap_new_LuaDistanceSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LuaDistanceSkill *result = 0 ;
  
  SWIG_check_num_args("LuaDistanceSkill::LuaDistanceSkill",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaDistanceSkill::LuaDistanceSkill",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LuaDistanceSkill *)new LuaDistanceSkill((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaDistanceSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaDistanceSkill_getCorrect(lua_State* L) {
  int SWIG_arg = 0;
  LuaDistanceSkill *arg1 = (LuaDistanceSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Player *arg3 = (Player *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaDistanceSkill::getCorrect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaDistanceSkill::getCorrect",1,"LuaDistanceSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaDistanceSkill::getCorrect",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaDistanceSkill::getCorrect",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaDistanceSkill,0))){
    SWIG_fail_ptr("LuaDistanceSkill_getCorrect",1,SWIGTYPE_p_LuaDistanceSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaDistanceSkill_getCorrect",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaDistanceSkill_getCorrect",3,SWIGTYPE_p_Player);
  }
  
  result = (int)((LuaDistanceSkill const *)arg1)->getCorrect((Player const *)arg2,(Player const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaDistanceSkill_correct_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaDistanceSkill *arg1 = (LuaDistanceSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaDistanceSkill::correct_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaDistanceSkill::correct_func",1,"LuaDistanceSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaDistanceSkill,0))){
    SWIG_fail_ptr("LuaDistanceSkill_correct_func_set",1,SWIGTYPE_p_LuaDistanceSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->correct_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaDistanceSkill_correct_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaDistanceSkill *arg1 = (LuaDistanceSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaDistanceSkill::correct_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaDistanceSkill::correct_func",1,"LuaDistanceSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaDistanceSkill,0))){
    SWIG_fail_ptr("LuaDistanceSkill_correct_func_get",1,SWIGTYPE_p_LuaDistanceSkill);
  }
  
  result =  ((arg1)->correct_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaDistanceSkill(void *obj) {
LuaDistanceSkill *arg1 = (LuaDistanceSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaDistanceSkill_methods[] = {
    {"getCorrect", _wrap_LuaDistanceSkill_getCorrect}, 
    {0,0}
};
static swig_lua_attribute swig_LuaDistanceSkill_attributes[] = {
    { "correct_func", _wrap_LuaDistanceSkill_correct_func_get, _wrap_LuaDistanceSkill_correct_func_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaDistanceSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaDistanceSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaDistanceSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaDistanceSkill_bases[] = {0,0};
static const char *swig_LuaDistanceSkill_base_names[] = {"DistanceSkill *",0};
static swig_lua_class _wrap_class_LuaDistanceSkill = { "LuaDistanceSkill", &SWIGTYPE_p_LuaDistanceSkill,_wrap_new_LuaDistanceSkill, swig_delete_LuaDistanceSkill, swig_LuaDistanceSkill_methods, swig_LuaDistanceSkill_attributes, { "LuaDistanceSkill", swig_LuaDistanceSkill_cls_methods, swig_LuaDistanceSkill_cls_attributes, swig_LuaDistanceSkill_cls_constants }, swig_LuaDistanceSkill_bases, swig_LuaDistanceSkill_base_names };

static int _wrap_new_LuaMaxCardsSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LuaMaxCardsSkill *result = 0 ;
  
  SWIG_check_num_args("LuaMaxCardsSkill::LuaMaxCardsSkill",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::LuaMaxCardsSkill",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LuaMaxCardsSkill *)new LuaMaxCardsSkill((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaMaxCardsSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_getExtra__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  MaxCardsType::MaxCardsCount arg3 ;
  int result;
  
  SWIG_check_num_args("LuaMaxCardsSkill::getExtra",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::getExtra",1,"LuaMaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaMaxCardsSkill::getExtra",2,"ServerPlayer const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaMaxCardsSkill::getExtra",3,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getExtra",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getExtra",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 3);
  result = (int)((LuaMaxCardsSkill const *)arg1)->getExtra((ServerPlayer const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_getExtra__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaMaxCardsSkill::getExtra",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::getExtra",1,"LuaMaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaMaxCardsSkill::getExtra",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getExtra",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getExtra",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((LuaMaxCardsSkill const *)arg1)->getExtra((ServerPlayer const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_getExtra(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaMaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaMaxCardsSkill_getExtra__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaMaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaMaxCardsSkill_getExtra__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaMaxCardsSkill_getExtra'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaMaxCardsSkill::getExtra(ServerPlayer const *,MaxCardsType::MaxCardsCount) const\n"
    "    LuaMaxCardsSkill::getExtra(ServerPlayer const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaMaxCardsSkill_getFixed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  MaxCardsType::MaxCardsCount arg3 ;
  int result;
  
  SWIG_check_num_args("LuaMaxCardsSkill::getFixed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::getFixed",1,"LuaMaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaMaxCardsSkill::getFixed",2,"ServerPlayer const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaMaxCardsSkill::getFixed",3,"MaxCardsType::MaxCardsCount");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getFixed",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getFixed",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (MaxCardsType::MaxCardsCount)(int)lua_tonumber(L, 3);
  result = (int)((LuaMaxCardsSkill const *)arg1)->getFixed((ServerPlayer const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_getFixed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaMaxCardsSkill::getFixed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::getFixed",1,"LuaMaxCardsSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaMaxCardsSkill::getFixed",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getFixed",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_getFixed",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (int)((LuaMaxCardsSkill const *)arg1)->getFixed((ServerPlayer const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_getFixed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaMaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaMaxCardsSkill_getFixed__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaMaxCardsSkill, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ServerPlayer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaMaxCardsSkill_getFixed__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaMaxCardsSkill_getFixed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaMaxCardsSkill::getFixed(ServerPlayer const *,MaxCardsType::MaxCardsCount) const\n"
    "    LuaMaxCardsSkill::getFixed(ServerPlayer const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaMaxCardsSkill_extra_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaMaxCardsSkill::extra_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::extra_func",1,"LuaMaxCardsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_extra_func_set",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->extra_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_extra_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaMaxCardsSkill::extra_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::extra_func",1,"LuaMaxCardsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_extra_func_get",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  result =  ((arg1)->extra_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_fixed_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaMaxCardsSkill::fixed_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::fixed_func",1,"LuaMaxCardsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_fixed_func_set",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->fixed_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaMaxCardsSkill_fixed_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaMaxCardsSkill::fixed_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaMaxCardsSkill::fixed_func",1,"LuaMaxCardsSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaMaxCardsSkill,0))){
    SWIG_fail_ptr("LuaMaxCardsSkill_fixed_func_get",1,SWIGTYPE_p_LuaMaxCardsSkill);
  }
  
  result =  ((arg1)->fixed_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaMaxCardsSkill(void *obj) {
LuaMaxCardsSkill *arg1 = (LuaMaxCardsSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaMaxCardsSkill_methods[] = {
    {"getExtra", _wrap_LuaMaxCardsSkill_getExtra}, 
    {"getFixed", _wrap_LuaMaxCardsSkill_getFixed}, 
    {0,0}
};
static swig_lua_attribute swig_LuaMaxCardsSkill_attributes[] = {
    { "extra_func", _wrap_LuaMaxCardsSkill_extra_func_get, _wrap_LuaMaxCardsSkill_extra_func_set},
    { "fixed_func", _wrap_LuaMaxCardsSkill_fixed_func_get, _wrap_LuaMaxCardsSkill_fixed_func_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaMaxCardsSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaMaxCardsSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaMaxCardsSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaMaxCardsSkill_bases[] = {0,0};
static const char *swig_LuaMaxCardsSkill_base_names[] = {"MaxCardsSkill *",0};
static swig_lua_class _wrap_class_LuaMaxCardsSkill = { "LuaMaxCardsSkill", &SWIGTYPE_p_LuaMaxCardsSkill,_wrap_new_LuaMaxCardsSkill, swig_delete_LuaMaxCardsSkill, swig_LuaMaxCardsSkill_methods, swig_LuaMaxCardsSkill_attributes, { "LuaMaxCardsSkill", swig_LuaMaxCardsSkill_cls_methods, swig_LuaMaxCardsSkill_cls_attributes, swig_LuaMaxCardsSkill_cls_constants }, swig_LuaMaxCardsSkill_bases, swig_LuaMaxCardsSkill_base_names };

static int _wrap_new_AttackRangeSkill(lua_State* L) {
  int SWIG_arg = 0;
  QString *arg1 = 0 ;
  AttackRangeSkill *result = 0 ;
  
  SWIG_check_num_args("AttackRangeSkill::AttackRangeSkill",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AttackRangeSkill::AttackRangeSkill",1,"QString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("new_AttackRangeSkill",1,SWIGTYPE_p_QString);
  }
  
  result = (AttackRangeSkill *)new AttackRangeSkill((QString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttackRangeSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttackRangeSkill_getExtra(lua_State* L) {
  int SWIG_arg = 0;
  AttackRangeSkill *arg1 = (AttackRangeSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("AttackRangeSkill::getExtra",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttackRangeSkill::getExtra",1,"AttackRangeSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AttackRangeSkill::getExtra",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("AttackRangeSkill::getExtra",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttackRangeSkill,0))){
    SWIG_fail_ptr("AttackRangeSkill_getExtra",1,SWIGTYPE_p_AttackRangeSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("AttackRangeSkill_getExtra",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((AttackRangeSkill const *)arg1)->getExtra((Player const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttackRangeSkill_getFixed(lua_State* L) {
  int SWIG_arg = 0;
  AttackRangeSkill *arg1 = (AttackRangeSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("AttackRangeSkill::getFixed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttackRangeSkill::getFixed",1,"AttackRangeSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AttackRangeSkill::getFixed",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("AttackRangeSkill::getFixed",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttackRangeSkill,0))){
    SWIG_fail_ptr("AttackRangeSkill_getFixed",1,SWIGTYPE_p_AttackRangeSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("AttackRangeSkill_getFixed",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((AttackRangeSkill const *)arg1)->getFixed((Player const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttackRangeSkill(void *obj) {
AttackRangeSkill *arg1 = (AttackRangeSkill *) obj;
delete arg1;
}
static swig_lua_method swig_AttackRangeSkill_methods[] = {
    {"getExtra", _wrap_AttackRangeSkill_getExtra}, 
    {"getFixed", _wrap_AttackRangeSkill_getFixed}, 
    {0,0}
};
static swig_lua_attribute swig_AttackRangeSkill_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AttackRangeSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttackRangeSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AttackRangeSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AttackRangeSkill_bases[] = {0,0};
static const char *swig_AttackRangeSkill_base_names[] = {"Skill *",0};
static swig_lua_class _wrap_class_AttackRangeSkill = { "AttackRangeSkill", &SWIGTYPE_p_AttackRangeSkill,_wrap_new_AttackRangeSkill, swig_delete_AttackRangeSkill, swig_AttackRangeSkill_methods, swig_AttackRangeSkill_attributes, { "AttackRangeSkill", swig_AttackRangeSkill_cls_methods, swig_AttackRangeSkill_cls_attributes, swig_AttackRangeSkill_cls_constants }, swig_AttackRangeSkill_bases, swig_AttackRangeSkill_base_names };

static int _wrap_new_LuaAttackRangeSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LuaAttackRangeSkill *result = 0 ;
  
  SWIG_check_num_args("LuaAttackRangeSkill::LuaAttackRangeSkill",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::LuaAttackRangeSkill",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LuaAttackRangeSkill *)new LuaAttackRangeSkill((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaAttackRangeSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAttackRangeSkill_getExtra(lua_State* L) {
  int SWIG_arg = 0;
  LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("LuaAttackRangeSkill::getExtra",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::getExtra",1,"LuaAttackRangeSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaAttackRangeSkill::getExtra",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("LuaAttackRangeSkill::getExtra",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAttackRangeSkill,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_getExtra",1,SWIGTYPE_p_LuaAttackRangeSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_getExtra",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((LuaAttackRangeSkill const *)arg1)->getExtra((Player const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAttackRangeSkill_getFixed(lua_State* L) {
  int SWIG_arg = 0;
  LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("LuaAttackRangeSkill::getFixed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::getFixed",1,"LuaAttackRangeSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaAttackRangeSkill::getFixed",2,"Player const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("LuaAttackRangeSkill::getFixed",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAttackRangeSkill,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_getFixed",1,SWIGTYPE_p_LuaAttackRangeSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_getFixed",2,SWIGTYPE_p_Player);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((LuaAttackRangeSkill const *)arg1)->getFixed((Player const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAttackRangeSkill_extra_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaAttackRangeSkill::extra_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::extra_func",1,"LuaAttackRangeSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAttackRangeSkill,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_extra_func_set",1,SWIGTYPE_p_LuaAttackRangeSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->extra_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAttackRangeSkill_extra_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaAttackRangeSkill::extra_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::extra_func",1,"LuaAttackRangeSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAttackRangeSkill,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_extra_func_get",1,SWIGTYPE_p_LuaAttackRangeSkill);
  }
  
  result =  ((arg1)->extra_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAttackRangeSkill_fixed_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaAttackRangeSkill::fixed_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::fixed_func",1,"LuaAttackRangeSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAttackRangeSkill,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_fixed_func_set",1,SWIGTYPE_p_LuaAttackRangeSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->fixed_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAttackRangeSkill_fixed_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaAttackRangeSkill::fixed_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAttackRangeSkill::fixed_func",1,"LuaAttackRangeSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAttackRangeSkill,0))){
    SWIG_fail_ptr("LuaAttackRangeSkill_fixed_func_get",1,SWIGTYPE_p_LuaAttackRangeSkill);
  }
  
  result =  ((arg1)->fixed_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaAttackRangeSkill(void *obj) {
LuaAttackRangeSkill *arg1 = (LuaAttackRangeSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaAttackRangeSkill_methods[] = {
    {"getExtra", _wrap_LuaAttackRangeSkill_getExtra}, 
    {"getFixed", _wrap_LuaAttackRangeSkill_getFixed}, 
    {0,0}
};
static swig_lua_attribute swig_LuaAttackRangeSkill_attributes[] = {
    { "extra_func", _wrap_LuaAttackRangeSkill_extra_func_get, _wrap_LuaAttackRangeSkill_extra_func_set},
    { "fixed_func", _wrap_LuaAttackRangeSkill_fixed_func_get, _wrap_LuaAttackRangeSkill_fixed_func_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaAttackRangeSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaAttackRangeSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaAttackRangeSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaAttackRangeSkill_bases[] = {0,0};
static const char *swig_LuaAttackRangeSkill_base_names[] = {"AttackRangeSkill *",0};
static swig_lua_class _wrap_class_LuaAttackRangeSkill = { "LuaAttackRangeSkill", &SWIGTYPE_p_LuaAttackRangeSkill,_wrap_new_LuaAttackRangeSkill, swig_delete_LuaAttackRangeSkill, swig_LuaAttackRangeSkill_methods, swig_LuaAttackRangeSkill_attributes, { "LuaAttackRangeSkill", swig_LuaAttackRangeSkill_cls_methods, swig_LuaAttackRangeSkill_cls_attributes, swig_LuaAttackRangeSkill_cls_constants }, swig_LuaAttackRangeSkill_bases, swig_LuaAttackRangeSkill_base_names };

static int _wrap_new_LuaTargetModSkill(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  LuaTargetModSkill *result = 0 ;
  
  SWIG_check_num_args("LuaTargetModSkill::LuaTargetModSkill",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaTargetModSkill::LuaTargetModSkill",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaTargetModSkill::LuaTargetModSkill",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (LuaTargetModSkill *)new LuaTargetModSkill((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTargetModSkill,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_getResidueNum(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaTargetModSkill::getResidueNum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::getResidueNum",1,"LuaTargetModSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTargetModSkill::getResidueNum",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTargetModSkill::getResidueNum",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getResidueNum",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getResidueNum",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getResidueNum",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((LuaTargetModSkill const *)arg1)->getResidueNum((Player const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_getDistanceLimit(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaTargetModSkill::getDistanceLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::getDistanceLimit",1,"LuaTargetModSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTargetModSkill::getDistanceLimit",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTargetModSkill::getDistanceLimit",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getDistanceLimit",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getDistanceLimit",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getDistanceLimit",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((LuaTargetModSkill const *)arg1)->getDistanceLimit((Player const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_getExtraTargetNum(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  Player *arg2 = (Player *) 0 ;
  Card *arg3 = (Card *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaTargetModSkill::getExtraTargetNum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::getExtraTargetNum",1,"LuaTargetModSkill const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTargetModSkill::getExtraTargetNum",2,"Player const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTargetModSkill::getExtraTargetNum",3,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getExtraTargetNum",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getExtraTargetNum",2,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("LuaTargetModSkill_getExtraTargetNum",3,SWIGTYPE_p_Card);
  }
  
  result = (int)((LuaTargetModSkill const *)arg1)->getExtraTargetNum((Player const *)arg2,(Card const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_residue_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTargetModSkill::residue_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::residue_func",1,"LuaTargetModSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_residue_func_set",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->residue_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_residue_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTargetModSkill::residue_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::residue_func",1,"LuaTargetModSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_residue_func_get",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  result =  ((arg1)->residue_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_distance_limit_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTargetModSkill::distance_limit_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::distance_limit_func",1,"LuaTargetModSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_distance_limit_func_set",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->distance_limit_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_distance_limit_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTargetModSkill::distance_limit_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::distance_limit_func",1,"LuaTargetModSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_distance_limit_func_get",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  result =  ((arg1)->distance_limit_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_extra_target_func_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTargetModSkill::extra_target_func",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::extra_target_func",1,"LuaTargetModSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_extra_target_func_set",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->extra_target_func = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTargetModSkill_extra_target_func_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTargetModSkill *arg1 = (LuaTargetModSkill *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTargetModSkill::extra_target_func",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTargetModSkill::extra_target_func",1,"LuaTargetModSkill *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTargetModSkill,0))){
    SWIG_fail_ptr("LuaTargetModSkill_extra_target_func_get",1,SWIGTYPE_p_LuaTargetModSkill);
  }
  
  result =  ((arg1)->extra_target_func);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaTargetModSkill(void *obj) {
LuaTargetModSkill *arg1 = (LuaTargetModSkill *) obj;
delete arg1;
}
static swig_lua_method swig_LuaTargetModSkill_methods[] = {
    {"getResidueNum", _wrap_LuaTargetModSkill_getResidueNum}, 
    {"getDistanceLimit", _wrap_LuaTargetModSkill_getDistanceLimit}, 
    {"getExtraTargetNum", _wrap_LuaTargetModSkill_getExtraTargetNum}, 
    {0,0}
};
static swig_lua_attribute swig_LuaTargetModSkill_attributes[] = {
    { "residue_func", _wrap_LuaTargetModSkill_residue_func_get, _wrap_LuaTargetModSkill_residue_func_set},
    { "distance_limit_func", _wrap_LuaTargetModSkill_distance_limit_func_get, _wrap_LuaTargetModSkill_distance_limit_func_set},
    { "extra_target_func", _wrap_LuaTargetModSkill_extra_target_func_get, _wrap_LuaTargetModSkill_extra_target_func_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaTargetModSkill_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaTargetModSkill_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaTargetModSkill_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaTargetModSkill_bases[] = {0,0};
static const char *swig_LuaTargetModSkill_base_names[] = {"TargetModSkill *",0};
static swig_lua_class _wrap_class_LuaTargetModSkill = { "LuaTargetModSkill", &SWIGTYPE_p_LuaTargetModSkill,_wrap_new_LuaTargetModSkill, swig_delete_LuaTargetModSkill, swig_LuaTargetModSkill_methods, swig_LuaTargetModSkill_attributes, { "LuaTargetModSkill", swig_LuaTargetModSkill_cls_methods, swig_LuaTargetModSkill_cls_attributes, swig_LuaTargetModSkill_cls_constants }, swig_LuaTargetModSkill_bases, swig_LuaTargetModSkill_base_names };

static int _wrap_new_LuaSkillCard(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  LuaSkillCard *result = 0 ;
  
  SWIG_check_num_args("LuaSkillCard::LuaSkillCard",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaSkillCard::LuaSkillCard",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaSkillCard::LuaSkillCard",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (LuaSkillCard *)new LuaSkillCard((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaSkillCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_setTargetFixed(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::setTargetFixed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::setTargetFixed",1,"LuaSkillCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaSkillCard::setTargetFixed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_setTargetFixed",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTargetFixed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_setWillThrow(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::setWillThrow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::setWillThrow",1,"LuaSkillCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaSkillCard::setWillThrow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_setWillThrow",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setWillThrow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_setCanRecast(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::setCanRecast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::setCanRecast",1,"LuaSkillCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaSkillCard::setCanRecast",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_setCanRecast",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCanRecast(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_setHandlingMethod(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  Card::HandlingMethod arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::setHandlingMethod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::setHandlingMethod",1,"LuaSkillCard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaSkillCard::setHandlingMethod",2,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_setHandlingMethod",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  arg2 = (Card::HandlingMethod)(int)lua_tonumber(L, 2);
  (arg1)->setHandlingMethod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_clone(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaSkillCard *result = 0 ;
  
  SWIG_check_num_args("LuaSkillCard::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::clone",1,"LuaSkillCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_clone",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result = (LuaSkillCard *)((LuaSkillCard const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaSkillCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::filter",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_filter_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::filter",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_filter_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->filter);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_feasible_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::feasible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::feasible",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_feasible_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->feasible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_feasible_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::feasible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::feasible",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_feasible_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->feasible);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_about_to_use_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::about_to_use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::about_to_use",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_about_to_use_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->about_to_use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_about_to_use_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::about_to_use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::about_to_use",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_about_to_use_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->about_to_use);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_use_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::on_use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_use",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_use_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_use_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::on_use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_use",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_use_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->on_use);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_effect_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::on_effect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_effect",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_effect_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_effect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_effect_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::on_effect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_effect",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_effect_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->on_effect);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_validate_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::on_validate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_validate",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_validate_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_validate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_validate_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::on_validate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_validate",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_validate_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->on_validate);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_validate_in_response_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::on_validate_in_response",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_validate_in_response",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_validate_in_response_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_validate_in_response = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_on_validate_in_response_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::on_validate_in_response",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::on_validate_in_response",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_on_validate_in_response_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->on_validate_in_response);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_extra_cost_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaSkillCard::extra_cost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::extra_cost",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_extra_cost_set",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->extra_cost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSkillCard_extra_cost_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaSkillCard *arg1 = (LuaSkillCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaSkillCard::extra_cost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSkillCard::extra_cost",1,"LuaSkillCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaSkillCard,0))){
    SWIG_fail_ptr("LuaSkillCard_extra_cost_get",1,SWIGTYPE_p_LuaSkillCard);
  }
  
  result =  ((arg1)->extra_cost);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaSkillCard(void *obj) {
LuaSkillCard *arg1 = (LuaSkillCard *) obj;
delete arg1;
}
static swig_lua_method swig_LuaSkillCard_methods[] = {
    {"setTargetFixed", _wrap_LuaSkillCard_setTargetFixed}, 
    {"setWillThrow", _wrap_LuaSkillCard_setWillThrow}, 
    {"setCanRecast", _wrap_LuaSkillCard_setCanRecast}, 
    {"setHandlingMethod", _wrap_LuaSkillCard_setHandlingMethod}, 
    {"clone", _wrap_LuaSkillCard_clone}, 
    {0,0}
};
static swig_lua_attribute swig_LuaSkillCard_attributes[] = {
    { "filter", _wrap_LuaSkillCard_filter_get, _wrap_LuaSkillCard_filter_set},
    { "feasible", _wrap_LuaSkillCard_feasible_get, _wrap_LuaSkillCard_feasible_set},
    { "about_to_use", _wrap_LuaSkillCard_about_to_use_get, _wrap_LuaSkillCard_about_to_use_set},
    { "on_use", _wrap_LuaSkillCard_on_use_get, _wrap_LuaSkillCard_on_use_set},
    { "on_effect", _wrap_LuaSkillCard_on_effect_get, _wrap_LuaSkillCard_on_effect_set},
    { "on_validate", _wrap_LuaSkillCard_on_validate_get, _wrap_LuaSkillCard_on_validate_set},
    { "on_validate_in_response", _wrap_LuaSkillCard_on_validate_in_response_get, _wrap_LuaSkillCard_on_validate_in_response_set},
    { "extra_cost", _wrap_LuaSkillCard_extra_cost_get, _wrap_LuaSkillCard_extra_cost_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaSkillCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaSkillCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaSkillCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaSkillCard_bases[] = {0,0};
static const char *swig_LuaSkillCard_base_names[] = {"SkillCard *",0};
static swig_lua_class _wrap_class_LuaSkillCard = { "LuaSkillCard", &SWIGTYPE_p_LuaSkillCard,_wrap_new_LuaSkillCard, swig_delete_LuaSkillCard, swig_LuaSkillCard_methods, swig_LuaSkillCard_attributes, { "LuaSkillCard", swig_LuaSkillCard_cls_methods, swig_LuaSkillCard_cls_attributes, swig_LuaSkillCard_cls_constants }, swig_LuaSkillCard_bases, swig_LuaSkillCard_base_names };

static int _wrap_new_LuaBasicCard(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  LuaBasicCard *result = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::LuaBasicCard",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LuaBasicCard::LuaBasicCard",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBasicCard::LuaBasicCard",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaBasicCard::LuaBasicCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaBasicCard::LuaBasicCard",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("LuaBasicCard::LuaBasicCard",5,"char const *");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (LuaBasicCard *)new LuaBasicCard(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaBasicCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_clone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  Card::Suit arg2 ;
  int arg3 ;
  LuaBasicCard *result = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::clone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::clone",1,"LuaBasicCard const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBasicCard::clone",2,"Card::Suit");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaBasicCard::clone",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_clone",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (LuaBasicCard *)((LuaBasicCard const *)arg1)->clone(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaBasicCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_clone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  Card::Suit arg2 ;
  LuaBasicCard *result = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::clone",1,"LuaBasicCard const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaBasicCard::clone",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_clone",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  result = (LuaBasicCard *)((LuaBasicCard const *)arg1)->clone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaBasicCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_clone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaBasicCard *result = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::clone",1,"LuaBasicCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_clone",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result = (LuaBasicCard *)((LuaBasicCard const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaBasicCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_clone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBasicCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LuaBasicCard_clone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBasicCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBasicCard_clone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaBasicCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaBasicCard_clone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaBasicCard_clone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaBasicCard::clone(Card::Suit,int) const\n"
    "    LuaBasicCard::clone(Card::Suit) const\n"
    "    LuaBasicCard::clone() const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBasicCard_setTargetFixed(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::setTargetFixed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::setTargetFixed",1,"LuaBasicCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaBasicCard::setTargetFixed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_setTargetFixed",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTargetFixed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_setCanRecast(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::setCanRecast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::setCanRecast",1,"LuaBasicCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaBasicCard::setCanRecast",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_setCanRecast",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCanRecast(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_onUse(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::onUse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::onUse",1,"LuaBasicCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaBasicCard::onUse",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LuaBasicCard::onUse",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_onUse",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBasicCard_onUse",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("LuaBasicCard_onUse",3,SWIGTYPE_p_CardUseStruct);
  }
  
  ((LuaBasicCard const *)arg1)->onUse(arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_onEffect(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::onEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::onEffect",1,"LuaBasicCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaBasicCard::onEffect",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_onEffect",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("LuaBasicCard_onEffect",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  ((LuaBasicCard const *)arg1)->onEffect((CardEffectStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_use(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg4 = 0 ;
  
  SWIG_check_num_args("LuaBasicCard::use",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::use",1,"LuaBasicCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaBasicCard::use",2,"Room *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBasicCard::use",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("LuaBasicCard::use",4,"QList< ServerPlayer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_use",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaBasicCard_use",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaBasicCard_use",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("LuaBasicCard_use",4,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  ((LuaBasicCard const *)arg1)->use(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_targetsFeasible(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBasicCard::targetsFeasible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::targetsFeasible",1,"LuaBasicCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaBasicCard::targetsFeasible",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBasicCard::targetsFeasible",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_targetsFeasible",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("LuaBasicCard_targetsFeasible",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaBasicCard_targetsFeasible",3,SWIGTYPE_p_Player);
  }
  
  result = (bool)((LuaBasicCard const *)arg1)->targetsFeasible((QList< Player const * > const &)*arg2,(Player const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_targetFilter(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  Player *arg4 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBasicCard::targetFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::targetFilter",1,"LuaBasicCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaBasicCard::targetFilter",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaBasicCard::targetFilter",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaBasicCard::targetFilter",4,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_targetFilter",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("LuaBasicCard_targetFilter",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaBasicCard_targetFilter",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaBasicCard_targetFilter",4,SWIGTYPE_p_Player);
  }
  
  result = (bool)((LuaBasicCard const *)arg1)->targetFilter((QList< Player const * > const &)*arg2,(Player const *)arg3,(Player const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_isAvailable(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBasicCard::isAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::isAvailable",1,"LuaBasicCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaBasicCard::isAvailable",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_isAvailable",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaBasicCard_isAvailable",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((LuaBasicCard const *)arg1)->isAvailable((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaBasicCard::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::getClassName",1,"LuaBasicCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_getClassName",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result = ((LuaBasicCard const *)arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaBasicCard::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::getSubtype",1,"LuaBasicCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_getSubtype",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result = ((LuaBasicCard const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaBasicCard::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::isKindOf",1,"LuaBasicCard const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaBasicCard::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_isKindOf",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((LuaBasicCard const *)arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::filter",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_filter_set",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBasicCard::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::filter",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_filter_get",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result =  ((arg1)->filter);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_feasible_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::feasible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::feasible",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_feasible_set",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->feasible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_feasible_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBasicCard::feasible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::feasible",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_feasible_get",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result =  ((arg1)->feasible);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_available_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::available",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::available",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_available_set",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->available = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_available_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBasicCard::available",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::available",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_available_get",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result =  ((arg1)->available);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_about_to_use_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::about_to_use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::about_to_use",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_about_to_use_set",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->about_to_use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_about_to_use_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBasicCard::about_to_use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::about_to_use",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_about_to_use_get",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result =  ((arg1)->about_to_use);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_on_use_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::on_use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::on_use",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_on_use_set",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_on_use_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBasicCard::on_use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::on_use",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_on_use_get",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result =  ((arg1)->on_use);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_on_effect_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaBasicCard::on_effect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::on_effect",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_on_effect_set",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_effect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBasicCard_on_effect_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaBasicCard *arg1 = (LuaBasicCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaBasicCard::on_effect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaBasicCard::on_effect",1,"LuaBasicCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaBasicCard,0))){
    SWIG_fail_ptr("LuaBasicCard_on_effect_get",1,SWIGTYPE_p_LuaBasicCard);
  }
  
  result =  ((arg1)->on_effect);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaBasicCard(void *obj) {
LuaBasicCard *arg1 = (LuaBasicCard *) obj;
delete arg1;
}
static swig_lua_method swig_LuaBasicCard_methods[] = {
    {"clone", _wrap_LuaBasicCard_clone}, 
    {"setTargetFixed", _wrap_LuaBasicCard_setTargetFixed}, 
    {"setCanRecast", _wrap_LuaBasicCard_setCanRecast}, 
    {"onUse", _wrap_LuaBasicCard_onUse}, 
    {"onEffect", _wrap_LuaBasicCard_onEffect}, 
    {"use", _wrap_LuaBasicCard_use}, 
    {"targetsFeasible", _wrap_LuaBasicCard_targetsFeasible}, 
    {"targetFilter", _wrap_LuaBasicCard_targetFilter}, 
    {"isAvailable", _wrap_LuaBasicCard_isAvailable}, 
    {"getClassName", _wrap_LuaBasicCard_getClassName}, 
    {"getSubtype", _wrap_LuaBasicCard_getSubtype}, 
    {"isKindOf", _wrap_LuaBasicCard_isKindOf}, 
    {0,0}
};
static swig_lua_attribute swig_LuaBasicCard_attributes[] = {
    { "filter", _wrap_LuaBasicCard_filter_get, _wrap_LuaBasicCard_filter_set},
    { "feasible", _wrap_LuaBasicCard_feasible_get, _wrap_LuaBasicCard_feasible_set},
    { "available", _wrap_LuaBasicCard_available_get, _wrap_LuaBasicCard_available_set},
    { "about_to_use", _wrap_LuaBasicCard_about_to_use_get, _wrap_LuaBasicCard_about_to_use_set},
    { "on_use", _wrap_LuaBasicCard_on_use_get, _wrap_LuaBasicCard_on_use_set},
    { "on_effect", _wrap_LuaBasicCard_on_effect_get, _wrap_LuaBasicCard_on_effect_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaBasicCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaBasicCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaBasicCard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaBasicCard_bases[] = {0,0};
static const char *swig_LuaBasicCard_base_names[] = {"BasicCard *",0};
static swig_lua_class _wrap_class_LuaBasicCard = { "LuaBasicCard", &SWIGTYPE_p_LuaBasicCard,_wrap_new_LuaBasicCard, swig_delete_LuaBasicCard, swig_LuaBasicCard_methods, swig_LuaBasicCard_attributes, { "LuaBasicCard", swig_LuaBasicCard_cls_methods, swig_LuaBasicCard_cls_attributes, swig_LuaBasicCard_cls_constants }, swig_LuaBasicCard_bases, swig_LuaBasicCard_base_names };

static int _wrap_new_LuaTrickCard(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  LuaTrickCard *result = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::LuaTrickCard",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LuaTrickCard::LuaTrickCard",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTrickCard::LuaTrickCard",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaTrickCard::LuaTrickCard",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaTrickCard::LuaTrickCard",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("LuaTrickCard::LuaTrickCard",5,"char const *");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (LuaTrickCard *)new LuaTrickCard(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTrickCard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_clone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  Card::Suit arg2 ;
  int arg3 ;
  LuaTrickCard *result = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::clone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::clone",1,"LuaTrickCard const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTrickCard::clone",2,"Card::Suit");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaTrickCard::clone",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_clone",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (LuaTrickCard *)((LuaTrickCard const *)arg1)->clone(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTrickCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_clone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  Card::Suit arg2 ;
  LuaTrickCard *result = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::clone",1,"LuaTrickCard const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTrickCard::clone",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_clone",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  result = (LuaTrickCard *)((LuaTrickCard const *)arg1)->clone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTrickCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_clone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaTrickCard *result = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::clone",1,"LuaTrickCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_clone",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result = (LuaTrickCard *)((LuaTrickCard const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTrickCard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_clone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTrickCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LuaTrickCard_clone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTrickCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaTrickCard_clone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTrickCard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaTrickCard_clone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaTrickCard_clone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaTrickCard::clone(Card::Suit,int) const\n"
    "    LuaTrickCard::clone(Card::Suit) const\n"
    "    LuaTrickCard::clone() const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaTrickCard_setTargetFixed(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::setTargetFixed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::setTargetFixed",1,"LuaTrickCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaTrickCard::setTargetFixed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_setTargetFixed",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTargetFixed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_setCanRecast(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::setCanRecast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::setCanRecast",1,"LuaTrickCard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaTrickCard::setCanRecast",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_setCanRecast",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCanRecast(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_onUse(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  CardUseStruct *arg3 = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::onUse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::onUse",1,"LuaTrickCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTrickCard::onUse",2,"Room *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LuaTrickCard::onUse",3,"CardUseStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_onUse",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTrickCard_onUse",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("LuaTrickCard_onUse",3,SWIGTYPE_p_CardUseStruct);
  }
  
  ((LuaTrickCard const *)arg1)->onUse(arg2,(CardUseStruct const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_onEffect(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::onEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::onEffect",1,"LuaTrickCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaTrickCard::onEffect",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_onEffect",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("LuaTrickCard_onEffect",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  ((LuaTrickCard const *)arg1)->onEffect((CardEffectStruct const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_use(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  Room *arg2 = (Room *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  QList< ServerPlayer * > *arg4 = 0 ;
  
  SWIG_check_num_args("LuaTrickCard::use",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::use",1,"LuaTrickCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTrickCard::use",2,"Room *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTrickCard::use",3,"ServerPlayer *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("LuaTrickCard::use",4,"QList< ServerPlayer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_use",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Room,0))){
    SWIG_fail_ptr("LuaTrickCard_use",2,SWIGTYPE_p_Room);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTrickCard_use",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("LuaTrickCard_use",4,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  ((LuaTrickCard const *)arg1)->use(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_onNullified(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaTrickCard::onNullified",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::onNullified",1,"LuaTrickCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTrickCard::onNullified",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_onNullified",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTrickCard_onNullified",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaTrickCard const *)arg1)->onNullified(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_isCancelable(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  CardEffectStruct *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTrickCard::isCancelable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::isCancelable",1,"LuaTrickCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaTrickCard::isCancelable",2,"CardEffectStruct const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_isCancelable",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardEffectStruct,0))){
    SWIG_fail_ptr("LuaTrickCard_isCancelable",2,SWIGTYPE_p_CardEffectStruct);
  }
  
  result = (bool)((LuaTrickCard const *)arg1)->isCancelable((CardEffectStruct const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_targetsFeasible(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTrickCard::targetsFeasible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::targetsFeasible",1,"LuaTrickCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaTrickCard::targetsFeasible",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTrickCard::targetsFeasible",3,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_targetsFeasible",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("LuaTrickCard_targetsFeasible",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTrickCard_targetsFeasible",3,SWIGTYPE_p_Player);
  }
  
  result = (bool)((LuaTrickCard const *)arg1)->targetsFeasible((QList< Player const * > const &)*arg2,(Player const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_targetFilter(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  QList< Player const * > *arg2 = 0 ;
  Player *arg3 = (Player *) 0 ;
  Player *arg4 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTrickCard::targetFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::targetFilter",1,"LuaTrickCard const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaTrickCard::targetFilter",2,"QList< Player const * > const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LuaTrickCard::targetFilter",3,"Player const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("LuaTrickCard::targetFilter",4,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_targetFilter",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_Player_const_p_t,0))){
    SWIG_fail_ptr("LuaTrickCard_targetFilter",2,SWIGTYPE_p_QListT_Player_const_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTrickCard_targetFilter",3,SWIGTYPE_p_Player);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTrickCard_targetFilter",4,SWIGTYPE_p_Player);
  }
  
  result = (bool)((LuaTrickCard const *)arg1)->targetFilter((QList< Player const * > const &)*arg2,(Player const *)arg3,(Player const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_isAvailable(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  Player *arg2 = (Player *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTrickCard::isAvailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::isAvailable",1,"LuaTrickCard const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTrickCard::isAvailable",2,"Player const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_isAvailable",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Player,0))){
    SWIG_fail_ptr("LuaTrickCard_isAvailable",2,SWIGTYPE_p_Player);
  }
  
  result = (bool)((LuaTrickCard const *)arg1)->isAvailable((Player const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaTrickCard::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::getClassName",1,"LuaTrickCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_getClassName",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result = ((LuaTrickCard const *)arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_setSubClass(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaTrickCard::SubClass arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::setSubClass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::setSubClass",1,"LuaTrickCard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTrickCard::setSubClass",2,"LuaTrickCard::SubClass");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_setSubClass",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  arg2 = (LuaTrickCard::SubClass)(int)lua_tonumber(L, 2);
  (arg1)->setSubClass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_getSubClass(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaTrickCard::SubClass result;
  
  SWIG_check_num_args("LuaTrickCard::getSubClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::getSubClass",1,"LuaTrickCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_getSubClass",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result = (LuaTrickCard::SubClass)((LuaTrickCard const *)arg1)->getSubClass();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_getSubtype(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaTrickCard::getSubtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::getSubtype",1,"LuaTrickCard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_getSubtype",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result = ((LuaTrickCard const *)arg1)->getSubtype();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTrickCard::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::isKindOf",1,"LuaTrickCard const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaTrickCard::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_isKindOf",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((LuaTrickCard const *)arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::filter",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_filter_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::filter",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_filter_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->filter);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_feasible_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::feasible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::feasible",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_feasible_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->feasible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_feasible_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::feasible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::feasible",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_feasible_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->feasible);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_available_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::available",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::available",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_available_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->available = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_available_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::available",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::available",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_available_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->available);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_is_cancelable_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::is_cancelable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::is_cancelable",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_is_cancelable_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->is_cancelable = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_is_cancelable_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::is_cancelable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::is_cancelable",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_is_cancelable_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->is_cancelable);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_about_to_use_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::about_to_use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::about_to_use",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_about_to_use_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->about_to_use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_about_to_use_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::about_to_use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::about_to_use",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_about_to_use_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->about_to_use);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_on_use_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::on_use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::on_use",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_on_use_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_on_use_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::on_use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::on_use",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_on_use_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->on_use);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_on_effect_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::on_effect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::on_effect",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_on_effect_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_effect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_on_effect_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::on_effect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::on_effect",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_on_effect_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->on_effect);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_on_nullified_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTrickCard::on_nullified",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::on_nullified",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_on_nullified_set",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_nullified = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTrickCard_on_nullified_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTrickCard *arg1 = (LuaTrickCard *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTrickCard::on_nullified",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTrickCard::on_nullified",1,"LuaTrickCard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTrickCard,0))){
    SWIG_fail_ptr("LuaTrickCard_on_nullified_get",1,SWIGTYPE_p_LuaTrickCard);
  }
  
  result =  ((arg1)->on_nullified);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaTrickCard(void *obj) {
LuaTrickCard *arg1 = (LuaTrickCard *) obj;
delete arg1;
}
static swig_lua_method swig_LuaTrickCard_methods[] = {
    {"clone", _wrap_LuaTrickCard_clone}, 
    {"setTargetFixed", _wrap_LuaTrickCard_setTargetFixed}, 
    {"setCanRecast", _wrap_LuaTrickCard_setCanRecast}, 
    {"onUse", _wrap_LuaTrickCard_onUse}, 
    {"onEffect", _wrap_LuaTrickCard_onEffect}, 
    {"use", _wrap_LuaTrickCard_use}, 
    {"onNullified", _wrap_LuaTrickCard_onNullified}, 
    {"isCancelable", _wrap_LuaTrickCard_isCancelable}, 
    {"targetsFeasible", _wrap_LuaTrickCard_targetsFeasible}, 
    {"targetFilter", _wrap_LuaTrickCard_targetFilter}, 
    {"isAvailable", _wrap_LuaTrickCard_isAvailable}, 
    {"getClassName", _wrap_LuaTrickCard_getClassName}, 
    {"setSubClass", _wrap_LuaTrickCard_setSubClass}, 
    {"getSubClass", _wrap_LuaTrickCard_getSubClass}, 
    {"getSubtype", _wrap_LuaTrickCard_getSubtype}, 
    {"isKindOf", _wrap_LuaTrickCard_isKindOf}, 
    {0,0}
};
static swig_lua_attribute swig_LuaTrickCard_attributes[] = {
    { "filter", _wrap_LuaTrickCard_filter_get, _wrap_LuaTrickCard_filter_set},
    { "feasible", _wrap_LuaTrickCard_feasible_get, _wrap_LuaTrickCard_feasible_set},
    { "available", _wrap_LuaTrickCard_available_get, _wrap_LuaTrickCard_available_set},
    { "is_cancelable", _wrap_LuaTrickCard_is_cancelable_get, _wrap_LuaTrickCard_is_cancelable_set},
    { "about_to_use", _wrap_LuaTrickCard_about_to_use_get, _wrap_LuaTrickCard_about_to_use_set},
    { "on_use", _wrap_LuaTrickCard_on_use_get, _wrap_LuaTrickCard_on_use_set},
    { "on_effect", _wrap_LuaTrickCard_on_effect_get, _wrap_LuaTrickCard_on_effect_set},
    { "on_nullified", _wrap_LuaTrickCard_on_nullified_get, _wrap_LuaTrickCard_on_nullified_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaTrickCard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaTrickCard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaTrickCard_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("TypeNormal", LuaTrickCard::TypeNormal)},
    {SWIG_LUA_CONSTTAB_INT("TypeSingleTargetTrick", LuaTrickCard::TypeSingleTargetTrick)},
    {SWIG_LUA_CONSTTAB_INT("TypeDelayedTrick", LuaTrickCard::TypeDelayedTrick)},
    {SWIG_LUA_CONSTTAB_INT("TypeAOE", LuaTrickCard::TypeAOE)},
    {SWIG_LUA_CONSTTAB_INT("TypeGlobalEffect", LuaTrickCard::TypeGlobalEffect)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaTrickCard_bases[] = {0,0};
static const char *swig_LuaTrickCard_base_names[] = {"TrickCard *",0};
static swig_lua_class _wrap_class_LuaTrickCard = { "LuaTrickCard", &SWIGTYPE_p_LuaTrickCard,_wrap_new_LuaTrickCard, swig_delete_LuaTrickCard, swig_LuaTrickCard_methods, swig_LuaTrickCard_attributes, { "LuaTrickCard", swig_LuaTrickCard_cls_methods, swig_LuaTrickCard_cls_attributes, swig_LuaTrickCard_cls_constants }, swig_LuaTrickCard_bases, swig_LuaTrickCard_base_names };

static int _wrap_new_LuaWeapon(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  LuaWeapon *result = 0 ;
  
  SWIG_check_num_args("LuaWeapon::LuaWeapon",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LuaWeapon::LuaWeapon",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWeapon::LuaWeapon",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaWeapon::LuaWeapon",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaWeapon::LuaWeapon",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("LuaWeapon::LuaWeapon",5,"char const *");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (LuaWeapon *)new LuaWeapon(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaWeapon,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_clone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  Card::Suit arg2 ;
  int arg3 ;
  LuaWeapon *result = 0 ;
  
  SWIG_check_num_args("LuaWeapon::clone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::clone",1,"LuaWeapon const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWeapon::clone",2,"Card::Suit");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaWeapon::clone",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_clone",1,SWIGTYPE_p_LuaWeapon);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (LuaWeapon *)((LuaWeapon const *)arg1)->clone(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaWeapon,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_clone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  Card::Suit arg2 ;
  LuaWeapon *result = 0 ;
  
  SWIG_check_num_args("LuaWeapon::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::clone",1,"LuaWeapon const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWeapon::clone",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_clone",1,SWIGTYPE_p_LuaWeapon);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  result = (LuaWeapon *)((LuaWeapon const *)arg1)->clone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaWeapon,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_clone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  LuaWeapon *result = 0 ;
  
  SWIG_check_num_args("LuaWeapon::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::clone",1,"LuaWeapon const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_clone",1,SWIGTYPE_p_LuaWeapon);
  }
  
  result = (LuaWeapon *)((LuaWeapon const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaWeapon,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_clone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWeapon, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LuaWeapon_clone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWeapon, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaWeapon_clone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWeapon, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaWeapon_clone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaWeapon_clone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaWeapon::clone(Card::Suit,int) const\n"
    "    LuaWeapon::clone(Card::Suit) const\n"
    "    LuaWeapon::clone() const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaWeapon_onInstall(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaWeapon::onInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::onInstall",1,"LuaWeapon const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaWeapon::onInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_onInstall",1,SWIGTYPE_p_LuaWeapon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaWeapon_onInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaWeapon const *)arg1)->onInstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_onUninstall(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaWeapon::onUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::onUninstall",1,"LuaWeapon const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaWeapon::onUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_onUninstall",1,SWIGTYPE_p_LuaWeapon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaWeapon_onUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaWeapon const *)arg1)->onUninstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaWeapon::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::getClassName",1,"LuaWeapon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_getClassName",1,SWIGTYPE_p_LuaWeapon);
  }
  
  result = (arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaWeapon::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::isKindOf",1,"LuaWeapon *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaWeapon::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_isKindOf",1,SWIGTYPE_p_LuaWeapon);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_on_install_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaWeapon::on_install",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::on_install",1,"LuaWeapon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_on_install_set",1,SWIGTYPE_p_LuaWeapon);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_install = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_on_install_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaWeapon::on_install",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::on_install",1,"LuaWeapon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_on_install_get",1,SWIGTYPE_p_LuaWeapon);
  }
  
  result =  ((arg1)->on_install);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_on_uninstall_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaWeapon::on_uninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::on_uninstall",1,"LuaWeapon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_on_uninstall_set",1,SWIGTYPE_p_LuaWeapon);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_uninstall = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWeapon_on_uninstall_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaWeapon *arg1 = (LuaWeapon *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaWeapon::on_uninstall",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWeapon::on_uninstall",1,"LuaWeapon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWeapon,0))){
    SWIG_fail_ptr("LuaWeapon_on_uninstall_get",1,SWIGTYPE_p_LuaWeapon);
  }
  
  result =  ((arg1)->on_uninstall);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaWeapon(void *obj) {
LuaWeapon *arg1 = (LuaWeapon *) obj;
delete arg1;
}
static swig_lua_method swig_LuaWeapon_methods[] = {
    {"clone", _wrap_LuaWeapon_clone}, 
    {"onInstall", _wrap_LuaWeapon_onInstall}, 
    {"onUninstall", _wrap_LuaWeapon_onUninstall}, 
    {"getClassName", _wrap_LuaWeapon_getClassName}, 
    {"isKindOf", _wrap_LuaWeapon_isKindOf}, 
    {0,0}
};
static swig_lua_attribute swig_LuaWeapon_attributes[] = {
    { "on_install", _wrap_LuaWeapon_on_install_get, _wrap_LuaWeapon_on_install_set},
    { "on_uninstall", _wrap_LuaWeapon_on_uninstall_get, _wrap_LuaWeapon_on_uninstall_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaWeapon_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaWeapon_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaWeapon_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaWeapon_bases[] = {0,0};
static const char *swig_LuaWeapon_base_names[] = {"Weapon *",0};
static swig_lua_class _wrap_class_LuaWeapon = { "LuaWeapon", &SWIGTYPE_p_LuaWeapon,_wrap_new_LuaWeapon, swig_delete_LuaWeapon, swig_LuaWeapon_methods, swig_LuaWeapon_attributes, { "LuaWeapon", swig_LuaWeapon_cls_methods, swig_LuaWeapon_cls_attributes, swig_LuaWeapon_cls_constants }, swig_LuaWeapon_bases, swig_LuaWeapon_base_names };

static int _wrap_new_LuaArmor(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  LuaArmor *result = 0 ;
  
  SWIG_check_num_args("LuaArmor::LuaArmor",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LuaArmor::LuaArmor",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaArmor::LuaArmor",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaArmor::LuaArmor",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaArmor::LuaArmor",4,"char const *");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (LuaArmor *)new LuaArmor(arg1,arg2,(char const *)arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaArmor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_clone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  Card::Suit arg2 ;
  int arg3 ;
  LuaArmor *result = 0 ;
  
  SWIG_check_num_args("LuaArmor::clone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::clone",1,"LuaArmor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaArmor::clone",2,"Card::Suit");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaArmor::clone",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_clone",1,SWIGTYPE_p_LuaArmor);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (LuaArmor *)((LuaArmor const *)arg1)->clone(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaArmor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_clone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  Card::Suit arg2 ;
  LuaArmor *result = 0 ;
  
  SWIG_check_num_args("LuaArmor::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::clone",1,"LuaArmor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaArmor::clone",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_clone",1,SWIGTYPE_p_LuaArmor);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  result = (LuaArmor *)((LuaArmor const *)arg1)->clone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaArmor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_clone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  LuaArmor *result = 0 ;
  
  SWIG_check_num_args("LuaArmor::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::clone",1,"LuaArmor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_clone",1,SWIGTYPE_p_LuaArmor);
  }
  
  result = (LuaArmor *)((LuaArmor const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaArmor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_clone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaArmor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LuaArmor_clone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaArmor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaArmor_clone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaArmor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaArmor_clone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaArmor_clone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaArmor::clone(Card::Suit,int) const\n"
    "    LuaArmor::clone(Card::Suit) const\n"
    "    LuaArmor::clone() const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaArmor_onInstall(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaArmor::onInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::onInstall",1,"LuaArmor const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaArmor::onInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_onInstall",1,SWIGTYPE_p_LuaArmor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaArmor_onInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaArmor const *)arg1)->onInstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_onUninstall(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaArmor::onUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::onUninstall",1,"LuaArmor const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaArmor::onUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_onUninstall",1,SWIGTYPE_p_LuaArmor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaArmor_onUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaArmor const *)arg1)->onUninstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaArmor::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::getClassName",1,"LuaArmor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_getClassName",1,SWIGTYPE_p_LuaArmor);
  }
  
  result = (arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaArmor::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::isKindOf",1,"LuaArmor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaArmor::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_isKindOf",1,SWIGTYPE_p_LuaArmor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_on_install_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaArmor::on_install",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::on_install",1,"LuaArmor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_on_install_set",1,SWIGTYPE_p_LuaArmor);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_install = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_on_install_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaArmor::on_install",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::on_install",1,"LuaArmor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_on_install_get",1,SWIGTYPE_p_LuaArmor);
  }
  
  result =  ((arg1)->on_install);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_on_uninstall_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaArmor::on_uninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::on_uninstall",1,"LuaArmor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_on_uninstall_set",1,SWIGTYPE_p_LuaArmor);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_uninstall = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaArmor_on_uninstall_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaArmor *arg1 = (LuaArmor *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaArmor::on_uninstall",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaArmor::on_uninstall",1,"LuaArmor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaArmor,0))){
    SWIG_fail_ptr("LuaArmor_on_uninstall_get",1,SWIGTYPE_p_LuaArmor);
  }
  
  result =  ((arg1)->on_uninstall);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaArmor(void *obj) {
LuaArmor *arg1 = (LuaArmor *) obj;
delete arg1;
}
static swig_lua_method swig_LuaArmor_methods[] = {
    {"clone", _wrap_LuaArmor_clone}, 
    {"onInstall", _wrap_LuaArmor_onInstall}, 
    {"onUninstall", _wrap_LuaArmor_onUninstall}, 
    {"getClassName", _wrap_LuaArmor_getClassName}, 
    {"isKindOf", _wrap_LuaArmor_isKindOf}, 
    {0,0}
};
static swig_lua_attribute swig_LuaArmor_attributes[] = {
    { "on_install", _wrap_LuaArmor_on_install_get, _wrap_LuaArmor_on_install_set},
    { "on_uninstall", _wrap_LuaArmor_on_uninstall_get, _wrap_LuaArmor_on_uninstall_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaArmor_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaArmor_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaArmor_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaArmor_bases[] = {0,0};
static const char *swig_LuaArmor_base_names[] = {"Armor *",0};
static swig_lua_class _wrap_class_LuaArmor = { "LuaArmor", &SWIGTYPE_p_LuaArmor,_wrap_new_LuaArmor, swig_delete_LuaArmor, swig_LuaArmor_methods, swig_LuaArmor_attributes, { "LuaArmor", swig_LuaArmor_cls_methods, swig_LuaArmor_cls_attributes, swig_LuaArmor_cls_constants }, swig_LuaArmor_bases, swig_LuaArmor_base_names };

static int _wrap_new_LuaTreasure(lua_State* L) {
  int SWIG_arg = 0;
  Card::Suit arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  LuaTreasure *result = 0 ;
  
  SWIG_check_num_args("LuaTreasure::LuaTreasure",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LuaTreasure::LuaTreasure",1,"Card::Suit");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTreasure::LuaTreasure",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaTreasure::LuaTreasure",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaTreasure::LuaTreasure",4,"char const *");
  arg1 = (Card::Suit)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (LuaTreasure *)new LuaTreasure(arg1,arg2,(char const *)arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTreasure,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_clone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  Card::Suit arg2 ;
  int arg3 ;
  LuaTreasure *result = 0 ;
  
  SWIG_check_num_args("LuaTreasure::clone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::clone",1,"LuaTreasure const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTreasure::clone",2,"Card::Suit");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaTreasure::clone",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_clone",1,SWIGTYPE_p_LuaTreasure);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (LuaTreasure *)((LuaTreasure const *)arg1)->clone(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTreasure,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_clone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  Card::Suit arg2 ;
  LuaTreasure *result = 0 ;
  
  SWIG_check_num_args("LuaTreasure::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::clone",1,"LuaTreasure const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTreasure::clone",2,"Card::Suit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_clone",1,SWIGTYPE_p_LuaTreasure);
  }
  
  arg2 = (Card::Suit)(int)lua_tonumber(L, 2);
  result = (LuaTreasure *)((LuaTreasure const *)arg1)->clone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTreasure,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_clone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  LuaTreasure *result = 0 ;
  
  SWIG_check_num_args("LuaTreasure::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::clone",1,"LuaTreasure const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_clone",1,SWIGTYPE_p_LuaTreasure);
  }
  
  result = (LuaTreasure *)((LuaTreasure const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaTreasure,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_clone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTreasure, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LuaTreasure_clone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTreasure, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaTreasure_clone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaTreasure, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaTreasure_clone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaTreasure_clone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaTreasure::clone(Card::Suit,int) const\n"
    "    LuaTreasure::clone(Card::Suit) const\n"
    "    LuaTreasure::clone() const\n");
  lua_error(L);return 0;
}


static int _wrap_LuaTreasure_onInstall(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaTreasure::onInstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::onInstall",1,"LuaTreasure const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTreasure::onInstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_onInstall",1,SWIGTYPE_p_LuaTreasure);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTreasure_onInstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaTreasure const *)arg1)->onInstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_onUninstall(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  
  SWIG_check_num_args("LuaTreasure::onUninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::onUninstall",1,"LuaTreasure const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaTreasure::onUninstall",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_onUninstall",1,SWIGTYPE_p_LuaTreasure);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaTreasure_onUninstall",2,SWIGTYPE_p_ServerPlayer);
  }
  
  ((LuaTreasure const *)arg1)->onUninstall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  QString result;
  
  SWIG_check_num_args("LuaTreasure::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::getClassName",1,"LuaTreasure *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_getClassName",1,SWIGTYPE_p_LuaTreasure);
  }
  
  result = (arg1)->getClassName();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_isKindOf(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaTreasure::isKindOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::isKindOf",1,"LuaTreasure *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaTreasure::isKindOf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_isKindOf",1,SWIGTYPE_p_LuaTreasure);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->isKindOf((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_on_install_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTreasure::on_install",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::on_install",1,"LuaTreasure *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_on_install_set",1,SWIGTYPE_p_LuaTreasure);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_install = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_on_install_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTreasure::on_install",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::on_install",1,"LuaTreasure *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_on_install_get",1,SWIGTYPE_p_LuaTreasure);
  }
  
  result =  ((arg1)->on_install);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_on_uninstall_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaTreasure::on_uninstall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::on_uninstall",1,"LuaTreasure *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_on_uninstall_set",1,SWIGTYPE_p_LuaTreasure);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->on_uninstall = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaTreasure_on_uninstall_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaTreasure *arg1 = (LuaTreasure *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaTreasure::on_uninstall",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaTreasure::on_uninstall",1,"LuaTreasure *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaTreasure,0))){
    SWIG_fail_ptr("LuaTreasure_on_uninstall_get",1,SWIGTYPE_p_LuaTreasure);
  }
  
  result =  ((arg1)->on_uninstall);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaTreasure(void *obj) {
LuaTreasure *arg1 = (LuaTreasure *) obj;
delete arg1;
}
static swig_lua_method swig_LuaTreasure_methods[] = {
    {"clone", _wrap_LuaTreasure_clone}, 
    {"onInstall", _wrap_LuaTreasure_onInstall}, 
    {"onUninstall", _wrap_LuaTreasure_onUninstall}, 
    {"getClassName", _wrap_LuaTreasure_getClassName}, 
    {"isKindOf", _wrap_LuaTreasure_isKindOf}, 
    {0,0}
};
static swig_lua_attribute swig_LuaTreasure_attributes[] = {
    { "on_install", _wrap_LuaTreasure_on_install_get, _wrap_LuaTreasure_on_install_set},
    { "on_uninstall", _wrap_LuaTreasure_on_uninstall_get, _wrap_LuaTreasure_on_uninstall_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaTreasure_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaTreasure_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaTreasure_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaTreasure_bases[] = {0,0};
static const char *swig_LuaTreasure_base_names[] = {"Treasure *",0};
static swig_lua_class _wrap_class_LuaTreasure = { "LuaTreasure", &SWIGTYPE_p_LuaTreasure,_wrap_new_LuaTreasure, swig_delete_LuaTreasure, swig_LuaTreasure_methods, swig_LuaTreasure_attributes, { "LuaTreasure", swig_LuaTreasure_cls_methods, swig_LuaTreasure_cls_attributes, swig_LuaTreasure_cls_constants }, swig_LuaTreasure_bases, swig_LuaTreasure_base_names };

static int _wrap_AI_relationTo(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  AI::Relation result;
  
  SWIG_check_num_args("AI::relationTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::relationTo",1,"AI const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::relationTo",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_relationTo",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_relationTo",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (AI::Relation)((AI const *)arg1)->relationTo((ServerPlayer const *)arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_isFriend(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("AI::isFriend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::isFriend",1,"AI const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::isFriend",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_isFriend",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_isFriend",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((AI const *)arg1)->isFriend((ServerPlayer const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_isEnemy(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("AI::isEnemy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::isEnemy",1,"AI const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::isEnemy",2,"ServerPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_isEnemy",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_isEnemy",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (bool)((AI const *)arg1)->isEnemy((ServerPlayer const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_getEnemies(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("AI::getEnemies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::getEnemies",1,"AI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_getEnemies",1,SWIGTYPE_p_AI);
  }
  
  result = ((AI const *)arg1)->getEnemies();
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_getFriends(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  QList< ServerPlayer * > result;
  
  SWIG_check_num_args("AI::getFriends",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::getFriends",1,"AI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_getFriends",1,SWIGTYPE_p_AI);
  }
  
  result = ((AI const *)arg1)->getFriends();
  {
    QList< ServerPlayer * > * resultptr = new QList< ServerPlayer * >((const QList< ServerPlayer * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_ServerPlayer_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_activate(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  CardUseStruct *arg2 = 0 ;
  
  SWIG_check_num_args("AI::activate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::activate",1,"AI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AI::activate",2,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_activate",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("AI_activate",2,SWIGTYPE_p_CardUseStruct);
  }
  
  (arg1)->activate(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForSuit(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  QString *arg2 = 0 ;
  Card::Suit result;
  
  SWIG_check_num_args("AI::askForSuit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForSuit",1,"AI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AI::askForSuit",2,"QString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForSuit",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("AI_askForSuit",2,SWIGTYPE_p_QString);
  }
  
  result = (Card::Suit)(arg1)->askForSuit((QString const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForKingdom(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  QString result;
  
  SWIG_check_num_args("AI::askForKingdom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForKingdom",1,"AI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForKingdom",1,SWIGTYPE_p_AI);
  }
  
  result = (arg1)->askForKingdom();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForSkillInvoke(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("AI::askForSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForSkillInvoke",1,"AI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("AI::askForSkillInvoke",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AI::askForSkillInvoke",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForSkillInvoke",1,SWIGTYPE_p_AI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("AI_askForSkillInvoke",3,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->askForSkillInvoke((char const *)arg2,(QVariant const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForChoice(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  QString result;
  
  SWIG_check_num_args("AI::askForChoice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForChoice",1,"AI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("AI::askForChoice",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForChoice",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("AI::askForChoice",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForChoice",1,SWIGTYPE_p_AI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("AI_askForChoice",4,SWIGTYPE_p_QVariant);
  }
  
  result = (arg1)->askForChoice((char const *)arg2,(char const *)arg3,(QVariant const &)*arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForDiscard(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  QList< int > result;
  
  SWIG_check_num_args("AI::askForDiscard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForDiscard",1,"AI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("AI::askForDiscard",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AI::askForDiscard",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AI::askForDiscard",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("AI::askForDiscard",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("AI::askForDiscard",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForDiscard",1,SWIGTYPE_p_AI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (arg1)->askForDiscard((char const *)arg2,arg3,arg4,arg5,arg6);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForNullification(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  bool arg5 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("AI::askForNullification",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForNullification",1,"AI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::askForNullification",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AI::askForNullification",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AI::askForNullification",4,"ServerPlayer *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("AI::askForNullification",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForNullification",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("AI_askForNullification",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_askForNullification",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_askForNullification",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Card *)(arg1)->askForNullification((Card const *)arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForCardChosen(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Card::HandlingMethod arg5 ;
  int result;
  
  SWIG_check_num_args("AI::askForCardChosen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForCardChosen",1,"AI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForCardChosen",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("AI::askForCardChosen",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AI::askForCardChosen",5,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForCardChosen",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (Card::HandlingMethod)(int)lua_tonumber(L, 5);
  result = (int)(arg1)->askForCardChosen(arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForCard(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("AI::askForCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForCard",1,"AI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("AI::askForCard",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForCard",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("AI::askForCard",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForCard",1,SWIGTYPE_p_AI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("AI_askForCard",4,SWIGTYPE_p_QVariant);
  }
  
  result = (Card *)(arg1)->askForCard((char const *)arg2,(char const *)arg3,(QVariant const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForUseCard(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Card::HandlingMethod arg4 ;
  QString result;
  
  SWIG_check_num_args("AI::askForUseCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForUseCard",1,"AI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("AI::askForUseCard",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForUseCard",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AI::askForUseCard",4,"Card::HandlingMethod const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForUseCard",1,SWIGTYPE_p_AI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (Card::HandlingMethod const)(int)lua_tonumber(L, 4);
  result = (arg1)->askForUseCard((char const *)arg2,(char const *)arg3,arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForAG(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  QList< int > *arg2 = 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("AI::askForAG",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForAG",1,"AI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AI::askForAG",2,"QList< int > const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("AI::askForAG",3,"bool");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("AI::askForAG",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForAG",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("AI_askForAG",2,SWIGTYPE_p_QListT_int_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->askForAG((QList< int > const &)*arg2,arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForCardShow(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("AI::askForCardShow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForCardShow",1,"AI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::askForCardShow",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForCardShow",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForCardShow",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_askForCardShow",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card *)(arg1)->askForCardShow(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForPindian(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("AI::askForPindian",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForPindian",1,"AI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::askForPindian",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForPindian",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForPindian",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_askForPindian",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card *)(arg1)->askForPindian(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForPlayerChosen(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("AI::askForPlayerChosen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForPlayerChosen",1,"AI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AI::askForPlayerChosen",2,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AI::askForPlayerChosen",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForPlayerChosen",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("AI_askForPlayerChosen",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen((QList< ServerPlayer * > const &)*arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AI_askForSinglePeach(lua_State* L) {
  int SWIG_arg = 0;
  AI *arg1 = (AI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("AI::askForSinglePeach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AI::askForSinglePeach",1,"AI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AI::askForSinglePeach",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AI,0))){
    SWIG_fail_ptr("AI_askForSinglePeach",1,SWIGTYPE_p_AI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("AI_askForSinglePeach",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)(arg1)->askForSinglePeach(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AI(void *obj) {
AI *arg1 = (AI *) obj;
delete arg1;
}
static swig_lua_method swig_AI_methods[] = {
    {"relationTo", _wrap_AI_relationTo}, 
    {"isFriend", _wrap_AI_isFriend}, 
    {"isEnemy", _wrap_AI_isEnemy}, 
    {"getEnemies", _wrap_AI_getEnemies}, 
    {"getFriends", _wrap_AI_getFriends}, 
    {"activate", _wrap_AI_activate}, 
    {"askForSuit", _wrap_AI_askForSuit}, 
    {"askForKingdom", _wrap_AI_askForKingdom}, 
    {"askForSkillInvoke", _wrap_AI_askForSkillInvoke}, 
    {"askForChoice", _wrap_AI_askForChoice}, 
    {"askForDiscard", _wrap_AI_askForDiscard}, 
    {"askForNullification", _wrap_AI_askForNullification}, 
    {"askForCardChosen", _wrap_AI_askForCardChosen}, 
    {"askForCard", _wrap_AI_askForCard}, 
    {"askForUseCard", _wrap_AI_askForUseCard}, 
    {"askForAG", _wrap_AI_askForAG}, 
    {"askForCardShow", _wrap_AI_askForCardShow}, 
    {"askForPindian", _wrap_AI_askForPindian}, 
    {"askForPlayerChosen", _wrap_AI_askForPlayerChosen}, 
    {"askForSinglePeach", _wrap_AI_askForSinglePeach}, 
    {0,0}
};
static swig_lua_attribute swig_AI_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AI_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AI_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AI_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Friend", AI::Friend)},
    {SWIG_LUA_CONSTTAB_INT("Enemy", AI::Enemy)},
    {SWIG_LUA_CONSTTAB_INT("Neutrality", AI::Neutrality)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AI_bases[] = {0,0};
static const char *swig_AI_base_names[] = {"QObject *",0};
static swig_lua_class _wrap_class_AI = { "AI", &SWIGTYPE_p_AI,0, swig_delete_AI, swig_AI_methods, swig_AI_attributes, { "AI", swig_AI_cls_methods, swig_AI_cls_attributes, swig_AI_cls_constants }, swig_AI_bases, swig_AI_base_names };

static int _wrap_new_TrustAI(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  TrustAI *result = 0 ;
  
  SWIG_check_num_args("TrustAI::TrustAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::TrustAI",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_TrustAI",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (TrustAI *)new TrustAI(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TrustAI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_activate(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  CardUseStruct *arg2 = 0 ;
  
  SWIG_check_num_args("TrustAI::activate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::activate",1,"TrustAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TrustAI::activate",2,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_activate",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("TrustAI_activate",2,SWIGTYPE_p_CardUseStruct);
  }
  
  (arg1)->activate(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForSuit(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  QString *arg2 = 0 ;
  Card::Suit result;
  
  SWIG_check_num_args("TrustAI::askForSuit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForSuit",1,"TrustAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TrustAI::askForSuit",2,"QString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForSuit",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("TrustAI_askForSuit",2,SWIGTYPE_p_QString);
  }
  
  result = (Card::Suit)(arg1)->askForSuit((QString const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForKingdom(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  QString result;
  
  SWIG_check_num_args("TrustAI::askForKingdom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForKingdom",1,"TrustAI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForKingdom",1,SWIGTYPE_p_TrustAI);
  }
  
  result = (arg1)->askForKingdom();
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForSkillInvoke(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("TrustAI::askForSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForSkillInvoke",1,"TrustAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TrustAI::askForSkillInvoke",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TrustAI::askForSkillInvoke",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForSkillInvoke",1,SWIGTYPE_p_TrustAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TrustAI_askForSkillInvoke",3,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->askForSkillInvoke((char const *)arg2,(QVariant const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForChoice(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  QString result;
  
  SWIG_check_num_args("TrustAI::askForChoice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForChoice",1,"TrustAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TrustAI::askForChoice",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForChoice",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TrustAI::askForChoice",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForChoice",1,SWIGTYPE_p_TrustAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TrustAI_askForChoice",4,SWIGTYPE_p_QVariant);
  }
  
  result = (arg1)->askForChoice((char const *)arg2,(char const *)arg3,(QVariant const &)*arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForDiscard(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  QList< int > result;
  
  SWIG_check_num_args("TrustAI::askForDiscard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForDiscard",1,"TrustAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TrustAI::askForDiscard",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TrustAI::askForDiscard",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TrustAI::askForDiscard",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("TrustAI::askForDiscard",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("TrustAI::askForDiscard",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForDiscard",1,SWIGTYPE_p_TrustAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (arg1)->askForDiscard((char const *)arg2,arg3,arg4,arg5,arg6);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForNullification(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  Card *arg2 = (Card *) 0 ;
  ServerPlayer *arg3 = (ServerPlayer *) 0 ;
  ServerPlayer *arg4 = (ServerPlayer *) 0 ;
  bool arg5 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("TrustAI::askForNullification",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForNullification",1,"TrustAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TrustAI::askForNullification",2,"Card const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TrustAI::askForNullification",3,"ServerPlayer *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TrustAI::askForNullification",4,"ServerPlayer *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("TrustAI::askForNullification",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForNullification",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("TrustAI_askForNullification",2,SWIGTYPE_p_Card);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TrustAI_askForNullification",3,SWIGTYPE_p_ServerPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TrustAI_askForNullification",4,SWIGTYPE_p_ServerPlayer);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Card *)(arg1)->askForNullification((Card const *)arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForCardChosen(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Card::HandlingMethod arg5 ;
  int result;
  
  SWIG_check_num_args("TrustAI::askForCardChosen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForCardChosen",1,"TrustAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TrustAI::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForCardChosen",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("TrustAI::askForCardChosen",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TrustAI::askForCardChosen",5,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForCardChosen",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TrustAI_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (Card::HandlingMethod)(int)lua_tonumber(L, 5);
  result = (int)(arg1)->askForCardChosen(arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForCard(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("TrustAI::askForCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForCard",1,"TrustAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TrustAI::askForCard",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForCard",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TrustAI::askForCard",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForCard",1,SWIGTYPE_p_TrustAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("TrustAI_askForCard",4,SWIGTYPE_p_QVariant);
  }
  
  result = (Card *)(arg1)->askForCard((char const *)arg2,(char const *)arg3,(QVariant const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForUseCard(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Card::HandlingMethod arg4 ;
  QString result;
  
  SWIG_check_num_args("TrustAI::askForUseCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForUseCard",1,"TrustAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TrustAI::askForUseCard",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForUseCard",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TrustAI::askForUseCard",4,"Card::HandlingMethod const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForUseCard",1,SWIGTYPE_p_TrustAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (Card::HandlingMethod const)(int)lua_tonumber(L, 4);
  result = (arg1)->askForUseCard((char const *)arg2,(char const *)arg3,arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForAG(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  QList< int > *arg2 = 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("TrustAI::askForAG",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForAG",1,"TrustAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TrustAI::askForAG",2,"QList< int > const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("TrustAI::askForAG",3,"bool");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("TrustAI::askForAG",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForAG",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("TrustAI_askForAG",2,SWIGTYPE_p_QListT_int_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->askForAG((QList< int > const &)*arg2,arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForCardShow(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("TrustAI::askForCardShow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForCardShow",1,"TrustAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TrustAI::askForCardShow",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForCardShow",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForCardShow",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TrustAI_askForCardShow",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card *)(arg1)->askForCardShow(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForPindian(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("TrustAI::askForPindian",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForPindian",1,"TrustAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TrustAI::askForPindian",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForPindian",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForPindian",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TrustAI_askForPindian",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card *)(arg1)->askForPindian(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForPlayerChosen(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("TrustAI::askForPlayerChosen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForPlayerChosen",1,"TrustAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TrustAI::askForPlayerChosen",2,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TrustAI::askForPlayerChosen",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForPlayerChosen",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("TrustAI_askForPlayerChosen",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen((QList< ServerPlayer * > const &)*arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_askForSinglePeach(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("TrustAI::askForSinglePeach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::askForSinglePeach",1,"TrustAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TrustAI::askForSinglePeach",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_askForSinglePeach",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("TrustAI_askForSinglePeach",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)(arg1)->askForSinglePeach(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TrustAI_useCard(lua_State* L) {
  int SWIG_arg = 0;
  TrustAI *arg1 = (TrustAI *) 0 ;
  Card *arg2 = (Card *) 0 ;
  bool result;
  
  SWIG_check_num_args("TrustAI::useCard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TrustAI::useCard",1,"TrustAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TrustAI::useCard",2,"Card const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TrustAI,0))){
    SWIG_fail_ptr("TrustAI_useCard",1,SWIGTYPE_p_TrustAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Card,0))){
    SWIG_fail_ptr("TrustAI_useCard",2,SWIGTYPE_p_Card);
  }
  
  result = (bool)(arg1)->useCard((Card const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TrustAI(void *obj) {
TrustAI *arg1 = (TrustAI *) obj;
delete arg1;
}
static swig_lua_method swig_TrustAI_methods[] = {
    {"activate", _wrap_TrustAI_activate}, 
    {"askForSuit", _wrap_TrustAI_askForSuit}, 
    {"askForKingdom", _wrap_TrustAI_askForKingdom}, 
    {"askForSkillInvoke", _wrap_TrustAI_askForSkillInvoke}, 
    {"askForChoice", _wrap_TrustAI_askForChoice}, 
    {"askForDiscard", _wrap_TrustAI_askForDiscard}, 
    {"askForNullification", _wrap_TrustAI_askForNullification}, 
    {"askForCardChosen", _wrap_TrustAI_askForCardChosen}, 
    {"askForCard", _wrap_TrustAI_askForCard}, 
    {"askForUseCard", _wrap_TrustAI_askForUseCard}, 
    {"askForAG", _wrap_TrustAI_askForAG}, 
    {"askForCardShow", _wrap_TrustAI_askForCardShow}, 
    {"askForPindian", _wrap_TrustAI_askForPindian}, 
    {"askForPlayerChosen", _wrap_TrustAI_askForPlayerChosen}, 
    {"askForSinglePeach", _wrap_TrustAI_askForSinglePeach}, 
    {"useCard", _wrap_TrustAI_useCard}, 
    {0,0}
};
static swig_lua_attribute swig_TrustAI_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TrustAI_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TrustAI_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TrustAI_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TrustAI_bases[] = {0,0};
static const char *swig_TrustAI_base_names[] = {"AI *",0};
static swig_lua_class _wrap_class_TrustAI = { "TrustAI", &SWIGTYPE_p_TrustAI,_wrap_new_TrustAI, swig_delete_TrustAI, swig_TrustAI_methods, swig_TrustAI_attributes, { "TrustAI", swig_TrustAI_cls_methods, swig_TrustAI_cls_attributes, swig_TrustAI_cls_constants }, swig_TrustAI_bases, swig_TrustAI_base_names };

static int _wrap_new_LuaAI(lua_State* L) {
  int SWIG_arg = 0;
  ServerPlayer *arg1 = (ServerPlayer *) 0 ;
  LuaAI *result = 0 ;
  
  SWIG_check_num_args("LuaAI::LuaAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::LuaAI",1,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("new_LuaAI",1,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (LuaAI *)new LuaAI(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaAI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForCardShow(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("LuaAI::askForCardShow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForCardShow",1,"LuaAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaAI::askForCardShow",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaAI::askForCardShow",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForCardShow",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaAI_askForCardShow",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card *)(arg1)->askForCardShow(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForSkillInvoke(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  char *arg2 = (char *) 0 ;
  QVariant *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaAI::askForSkillInvoke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForSkillInvoke",1,"LuaAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaAI::askForSkillInvoke",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LuaAI::askForSkillInvoke",3,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForSkillInvoke",1,SWIGTYPE_p_LuaAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaAI_askForSkillInvoke",3,SWIGTYPE_p_QVariant);
  }
  
  result = (bool)(arg1)->askForSkillInvoke((char const *)arg2,(QVariant const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_activate(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  CardUseStruct *arg2 = 0 ;
  
  SWIG_check_num_args("LuaAI::activate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::activate",1,"LuaAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaAI::activate",2,"CardUseStruct &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_activate",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CardUseStruct,0))){
    SWIG_fail_ptr("LuaAI_activate",2,SWIGTYPE_p_CardUseStruct);
  }
  
  (arg1)->activate(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForDiscard(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  QList< int > result;
  
  SWIG_check_num_args("LuaAI::askForDiscard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForDiscard",1,"LuaAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaAI::askForDiscard",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaAI::askForDiscard",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LuaAI::askForDiscard",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("LuaAI::askForDiscard",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("LuaAI::askForDiscard",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForDiscard",1,SWIGTYPE_p_LuaAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (arg1)->askForDiscard((char const *)arg2,arg3,arg4,arg5,arg6);
  {
    QList< int > * resultptr = new QList< int >((const QList< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_QListT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForChoice(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  QString result;
  
  SWIG_check_num_args("LuaAI::askForChoice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForChoice",1,"LuaAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaAI::askForChoice",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaAI::askForChoice",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("LuaAI::askForChoice",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForChoice",1,SWIGTYPE_p_LuaAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaAI_askForChoice",4,SWIGTYPE_p_QVariant);
  }
  
  result = (arg1)->askForChoice((char const *)arg2,(char const *)arg3,(QVariant const &)*arg4);
  lua_pushstring(L, (&result)->toUtf8()); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForCardChosen(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Card::HandlingMethod arg5 ;
  int result;
  
  SWIG_check_num_args("LuaAI::askForCardChosen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForCardChosen",1,"LuaAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaAI::askForCardChosen",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaAI::askForCardChosen",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaAI::askForCardChosen",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("LuaAI::askForCardChosen",5,"Card::HandlingMethod");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForCardChosen",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaAI_askForCardChosen",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (Card::HandlingMethod)(int)lua_tonumber(L, 5);
  result = (int)(arg1)->askForCardChosen(arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForPlayerChosen(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  QList< ServerPlayer * > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ServerPlayer *result = 0 ;
  
  SWIG_check_num_args("LuaAI::askForPlayerChosen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForPlayerChosen",1,"LuaAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaAI::askForPlayerChosen",2,"QList< ServerPlayer * > const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaAI::askForPlayerChosen",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForPlayerChosen",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_ServerPlayer_p_t,0))){
    SWIG_fail_ptr("LuaAI_askForPlayerChosen",2,SWIGTYPE_p_QListT_ServerPlayer_p_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (ServerPlayer *)(arg1)->askForPlayerChosen((QList< ServerPlayer * > const &)*arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForCard(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QVariant *arg4 = 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("LuaAI::askForCard",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForCard",1,"LuaAI *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaAI::askForCard",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaAI::askForCard",3,"char const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("LuaAI::askForCard",4,"QVariant const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForCard",1,SWIGTYPE_p_LuaAI);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_QVariant,0))){
    SWIG_fail_ptr("LuaAI_askForCard",4,SWIGTYPE_p_QVariant);
  }
  
  result = (Card *)(arg1)->askForCard((char const *)arg2,(char const *)arg3,(QVariant const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForAG(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  QList< int > *arg2 = 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("LuaAI::askForAG",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForAG",1,"LuaAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaAI::askForAG",2,"QList< int > const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("LuaAI::askForAG",3,"bool");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("LuaAI::askForAG",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForAG",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QListT_int_t,0))){
    SWIG_fail_ptr("LuaAI_askForAG",2,SWIGTYPE_p_QListT_int_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->askForAG((QList< int > const &)*arg2,arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForSinglePeach(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("LuaAI::askForSinglePeach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForSinglePeach",1,"LuaAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaAI::askForSinglePeach",2,"ServerPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForSinglePeach",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaAI_askForSinglePeach",2,SWIGTYPE_p_ServerPlayer);
  }
  
  result = (Card *)(arg1)->askForSinglePeach(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForPindian(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  ServerPlayer *arg2 = (ServerPlayer *) 0 ;
  char *arg3 = (char *) 0 ;
  Card *result = 0 ;
  
  SWIG_check_num_args("LuaAI::askForPindian",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForPindian",1,"LuaAI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LuaAI::askForPindian",2,"ServerPlayer *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("LuaAI::askForPindian",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForPindian",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ServerPlayer,0))){
    SWIG_fail_ptr("LuaAI_askForPindian",2,SWIGTYPE_p_ServerPlayer);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (Card *)(arg1)->askForPindian(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Card,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_askForSuit(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  QString *arg2 = 0 ;
  Card::Suit result;
  
  SWIG_check_num_args("LuaAI::askForSuit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::askForSuit",1,"LuaAI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaAI::askForSuit",2,"QString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_askForSuit",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QString,0))){
    SWIG_fail_ptr("LuaAI_askForSuit",2,SWIGTYPE_p_QString);
  }
  
  result = (Card::Suit)(arg1)->askForSuit((QString const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_callback_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  LuaFunction arg2 ;
  
  SWIG_check_num_args("LuaAI::callback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::callback",1,"LuaAI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_callback_set",1,SWIGTYPE_p_LuaAI);
  }
  
  
  if (lua_isfunction(L, 2)) {
    lua_pushvalue(L, 2);
    arg2 = luaL_ref(L, LUA_REGISTRYINDEX);
  } else {
    arg2 = 0;
  }
  
  if (arg1) (arg1)->callback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaAI_callback_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaAI *arg1 = (LuaAI *) 0 ;
  LuaFunction result;
  
  SWIG_check_num_args("LuaAI::callback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaAI::callback",1,"LuaAI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaAI,0))){
    SWIG_fail_ptr("LuaAI_callback_get",1,SWIGTYPE_p_LuaAI);
  }
  
  result =  ((arg1)->callback);
  
  lua_rawgeti(L, LUA_REGISTRYINDEX, result);
  SWIG_arg ++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaAI(void *obj) {
LuaAI *arg1 = (LuaAI *) obj;
delete arg1;
}
static swig_lua_method swig_LuaAI_methods[] = {
    {"askForCardShow", _wrap_LuaAI_askForCardShow}, 
    {"askForSkillInvoke", _wrap_LuaAI_askForSkillInvoke}, 
    {"activate", _wrap_LuaAI_activate}, 
    {"askForDiscard", _wrap_LuaAI_askForDiscard}, 
    {"askForChoice", _wrap_LuaAI_askForChoice}, 
    {"askForCardChosen", _wrap_LuaAI_askForCardChosen}, 
    {"askForPlayerChosen", _wrap_LuaAI_askForPlayerChosen}, 
    {"askForCard", _wrap_LuaAI_askForCard}, 
    {"askForAG", _wrap_LuaAI_askForAG}, 
    {"askForSinglePeach", _wrap_LuaAI_askForSinglePeach}, 
    {"askForPindian", _wrap_LuaAI_askForPindian}, 
    {"askForSuit", _wrap_LuaAI_askForSuit}, 
    {0,0}
};
static swig_lua_attribute swig_LuaAI_attributes[] = {
    { "callback", _wrap_LuaAI_callback_get, _wrap_LuaAI_callback_set},
    {0,0,0}
};
static swig_lua_attribute swig_LuaAI_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaAI_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaAI_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaAI_bases[] = {0,0};
static const char *swig_LuaAI_base_names[] = {"TrustAI *",0};
static swig_lua_class _wrap_class_LuaAI = { "LuaAI", &SWIGTYPE_p_LuaAI,_wrap_new_LuaAI, swig_delete_LuaAI, swig_LuaAI_methods, swig_LuaAI_attributes, { "LuaAI", swig_LuaAI_cls_methods, swig_LuaAI_cls_attributes, swig_LuaAI_cls_constants }, swig_LuaAI_bases, swig_LuaAI_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "GetFileNames",GetFileNames},
    { "Print",Print},
    { "AddTranslationEntry",AddTranslationEntry},
    { "GetConfig",GetConfig},
    { "SetConfig",SetConfig},
    { "GetProperty",GetProperty},
    { "Alert",Alert},
    { "GetMappedRole", _wrap_GetMappedRole},
    { "GetMappedKingdom", _wrap_GetMappedKingdom},
    { "ServerPlayer_CompareByActionOrder", _wrap_ServerPlayer_CompareByActionOrder},
    { "Card_CompareByNumber", _wrap_Card_CompareByNumber},
    { "Card_CompareBySuit", _wrap_Card_CompareBySuit},
    { "Card_CompareByType", _wrap_Card_CompareByType},
    { "Card_Clone", _wrap_Card_Clone},
    { "Card_Suit2String", _wrap_Card_Suit2String},
    { "Card_Parse", _wrap_Card_Parse},
    { "Slash_IsAvailable",_wrap_Slash_IsAvailable},
    { "Slash_IsSpecificAssignee", _wrap_Slash_IsSpecificAssignee},
    { "Analeptic_IsAvailable",_wrap_Analeptic_IsAvailable},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "Self", _wrap_Self_get, _wrap_Self_set },
    { "Card_AllSuits", _wrap_Card_AllSuits_get, SWIG_Lua_set_immutable },
    { "Card_S_UNKNOWN_CARD_ID", _wrap_Card_S_UNKNOWN_CARD_ID_get, SWIG_Lua_set_immutable },
    { "Sanguosha", _wrap_Sanguosha_get, _wrap_Sanguosha_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("Siege", HegemonyMode::Siege)},
    {SWIG_LUA_CONSTTAB_INT("Formation", HegemonyMode::Formation)},
    {SWIG_LUA_CONSTTAB_INT("Max", MaxCardsType::Max)},
    {SWIG_LUA_CONSTTAB_INT("Normal", MaxCardsType::Normal)},
    {SWIG_LUA_CONSTTAB_INT("Min", MaxCardsType::Min)},
    {SWIG_LUA_CONSTTAB_INT("General_Sexless", General::Sexless)},
    {SWIG_LUA_CONSTTAB_INT("General_Male", General::Male)},
    {SWIG_LUA_CONSTTAB_INT("General_Female", General::Female)},
    {SWIG_LUA_CONSTTAB_INT("General_Neuter", General::Neuter)},
    {SWIG_LUA_CONSTTAB_INT("Player_RoundStart", Player::RoundStart)},
    {SWIG_LUA_CONSTTAB_INT("Player_Start", Player::Start)},
    {SWIG_LUA_CONSTTAB_INT("Player_Judge", Player::Judge)},
    {SWIG_LUA_CONSTTAB_INT("Player_Draw", Player::Draw)},
    {SWIG_LUA_CONSTTAB_INT("Player_Play", Player::Play)},
    {SWIG_LUA_CONSTTAB_INT("Player_Discard", Player::Discard)},
    {SWIG_LUA_CONSTTAB_INT("Player_Finish", Player::Finish)},
    {SWIG_LUA_CONSTTAB_INT("Player_NotActive", Player::NotActive)},
    {SWIG_LUA_CONSTTAB_INT("Player_PhaseNone", Player::PhaseNone)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceHand", Player::PlaceHand)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceEquip", Player::PlaceEquip)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceDelayedTrick", Player::PlaceDelayedTrick)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceJudge", Player::PlaceJudge)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceSpecial", Player::PlaceSpecial)},
    {SWIG_LUA_CONSTTAB_INT("Player_DiscardPile", Player::DiscardPile)},
    {SWIG_LUA_CONSTTAB_INT("Player_DrawPile", Player::DrawPile)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceTable", Player::PlaceTable)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceUnknown", Player::PlaceUnknown)},
    {SWIG_LUA_CONSTTAB_INT("Player_PlaceWuGu", Player::PlaceWuGu)},
    {SWIG_LUA_CONSTTAB_INT("Player_DrawPileBottom", Player::DrawPileBottom)},
    {SWIG_LUA_CONSTTAB_INT("Player_Lord", Player::Lord)},
    {SWIG_LUA_CONSTTAB_INT("Player_Loyalist", Player::Loyalist)},
    {SWIG_LUA_CONSTTAB_INT("Player_Rebel", Player::Rebel)},
    {SWIG_LUA_CONSTTAB_INT("Player_Renegade", Player::Renegade)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_UNKNOWN", CardMoveReason::S_REASON_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_USE", CardMoveReason::S_REASON_USE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_RESPONSE", CardMoveReason::S_REASON_RESPONSE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_DISCARD", CardMoveReason::S_REASON_DISCARD)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_RECAST", CardMoveReason::S_REASON_RECAST)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_PINDIAN", CardMoveReason::S_REASON_PINDIAN)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_DRAW", CardMoveReason::S_REASON_DRAW)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_GOTCARD", CardMoveReason::S_REASON_GOTCARD)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_SHOW", CardMoveReason::S_REASON_SHOW)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_TRANSFER", CardMoveReason::S_REASON_TRANSFER)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_PUT", CardMoveReason::S_REASON_PUT)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_LETUSE", CardMoveReason::S_REASON_LETUSE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_RETRIAL", CardMoveReason::S_REASON_RETRIAL)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_RULEDISCARD", CardMoveReason::S_REASON_RULEDISCARD)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_THROW", CardMoveReason::S_REASON_THROW)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_DISMANTLE", CardMoveReason::S_REASON_DISMANTLE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_GIVE", CardMoveReason::S_REASON_GIVE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_EXTRACTION", CardMoveReason::S_REASON_EXTRACTION)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_GOTBACK", CardMoveReason::S_REASON_GOTBACK)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_RECYCLE", CardMoveReason::S_REASON_RECYCLE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_ROB", CardMoveReason::S_REASON_ROB)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_PREVIEWGIVE", CardMoveReason::S_REASON_PREVIEWGIVE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_TURNOVER", CardMoveReason::S_REASON_TURNOVER)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_JUDGE", CardMoveReason::S_REASON_JUDGE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_PREVIEW", CardMoveReason::S_REASON_PREVIEW)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_DEMONSTRATE", CardMoveReason::S_REASON_DEMONSTRATE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_SWAP", CardMoveReason::S_REASON_SWAP)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_OVERRIDE", CardMoveReason::S_REASON_OVERRIDE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_EXCHANGE_FROM_PILE", CardMoveReason::S_REASON_EXCHANGE_FROM_PILE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_NATURAL_ENTER", CardMoveReason::S_REASON_NATURAL_ENTER)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_REMOVE_FROM_PILE", CardMoveReason::S_REASON_REMOVE_FROM_PILE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_JUDGEDONE", CardMoveReason::S_REASON_JUDGEDONE)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_REASON_CHANGE_EQUIP", CardMoveReason::S_REASON_CHANGE_EQUIP)},
    {SWIG_LUA_CONSTTAB_INT("CardMoveReason_S_MASK_BASIC_REASON", CardMoveReason::S_MASK_BASIC_REASON)},
    {SWIG_LUA_CONSTTAB_INT("DamageStruct_Normal", DamageStruct::Normal)},
    {SWIG_LUA_CONSTTAB_INT("DamageStruct_Fire", DamageStruct::Fire)},
    {SWIG_LUA_CONSTTAB_INT("DamageStruct_Thunder", DamageStruct::Thunder)},
    {SWIG_LUA_CONSTTAB_INT("CardUseStruct_CARD_USE_REASON_UNKNOWN", CardUseStruct::CARD_USE_REASON_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("CardUseStruct_CARD_USE_REASON_PLAY", CardUseStruct::CARD_USE_REASON_PLAY)},
    {SWIG_LUA_CONSTTAB_INT("CardUseStruct_CARD_USE_REASON_RESPONSE", CardUseStruct::CARD_USE_REASON_RESPONSE)},
    {SWIG_LUA_CONSTTAB_INT("CardUseStruct_CARD_USE_REASON_RESPONSE_USE", CardUseStruct::CARD_USE_REASON_RESPONSE_USE)},
    {SWIG_LUA_CONSTTAB_INT("NonTrigger", NonTrigger)},
    {SWIG_LUA_CONSTTAB_INT("GameStart", GameStart)},
    {SWIG_LUA_CONSTTAB_INT("TurnStart", TurnStart)},
    {SWIG_LUA_CONSTTAB_INT("EventPhaseStart", EventPhaseStart)},
    {SWIG_LUA_CONSTTAB_INT("EventPhaseProceeding", EventPhaseProceeding)},
    {SWIG_LUA_CONSTTAB_INT("EventPhaseEnd", EventPhaseEnd)},
    {SWIG_LUA_CONSTTAB_INT("EventPhaseChanging", EventPhaseChanging)},
    {SWIG_LUA_CONSTTAB_INT("EventPhaseSkipping", EventPhaseSkipping)},
    {SWIG_LUA_CONSTTAB_INT("ConfirmPlayerNum", ConfirmPlayerNum)},
    {SWIG_LUA_CONSTTAB_INT("DrawNCards", DrawNCards)},
    {SWIG_LUA_CONSTTAB_INT("AfterDrawNCards", AfterDrawNCards)},
    {SWIG_LUA_CONSTTAB_INT("PreHpRecover", PreHpRecover)},
    {SWIG_LUA_CONSTTAB_INT("HpRecover", HpRecover)},
    {SWIG_LUA_CONSTTAB_INT("PreHpLost", PreHpLost)},
    {SWIG_LUA_CONSTTAB_INT("HpChanged", HpChanged)},
    {SWIG_LUA_CONSTTAB_INT("MaxHpChanged", MaxHpChanged)},
    {SWIG_LUA_CONSTTAB_INT("PostHpReduced", PostHpReduced)},
    {SWIG_LUA_CONSTTAB_INT("EventLoseSkill", EventLoseSkill)},
    {SWIG_LUA_CONSTTAB_INT("EventAcquireSkill", EventAcquireSkill)},
    {SWIG_LUA_CONSTTAB_INT("StartJudge", StartJudge)},
    {SWIG_LUA_CONSTTAB_INT("AskForRetrial", AskForRetrial)},
    {SWIG_LUA_CONSTTAB_INT("FinishRetrial", FinishRetrial)},
    {SWIG_LUA_CONSTTAB_INT("FinishJudge", FinishJudge)},
    {SWIG_LUA_CONSTTAB_INT("PindianVerifying", PindianVerifying)},
    {SWIG_LUA_CONSTTAB_INT("Pindian", Pindian)},
    {SWIG_LUA_CONSTTAB_INT("TurnedOver", TurnedOver)},
    {SWIG_LUA_CONSTTAB_INT("ChainStateChanged", ChainStateChanged)},
    {SWIG_LUA_CONSTTAB_INT("RemoveStateChanged", RemoveStateChanged)},
    {SWIG_LUA_CONSTTAB_INT("ConfirmDamage", ConfirmDamage)},
    {SWIG_LUA_CONSTTAB_INT("Predamage", Predamage)},
    {SWIG_LUA_CONSTTAB_INT("DamageForseen", DamageForseen)},
    {SWIG_LUA_CONSTTAB_INT("DamageCaused", DamageCaused)},
    {SWIG_LUA_CONSTTAB_INT("DamageInflicted", DamageInflicted)},
    {SWIG_LUA_CONSTTAB_INT("PreDamageDone", PreDamageDone)},
    {SWIG_LUA_CONSTTAB_INT("DamageDone", DamageDone)},
    {SWIG_LUA_CONSTTAB_INT("Damage", Damage)},
    {SWIG_LUA_CONSTTAB_INT("Damaged", Damaged)},
    {SWIG_LUA_CONSTTAB_INT("DamageComplete", DamageComplete)},
    {SWIG_LUA_CONSTTAB_INT("Dying", Dying)},
    {SWIG_LUA_CONSTTAB_INT("QuitDying", QuitDying)},
    {SWIG_LUA_CONSTTAB_INT("AskForPeaches", AskForPeaches)},
    {SWIG_LUA_CONSTTAB_INT("AskForPeachesDone", AskForPeachesDone)},
    {SWIG_LUA_CONSTTAB_INT("Death", Death)},
    {SWIG_LUA_CONSTTAB_INT("BuryVictim", BuryVictim)},
    {SWIG_LUA_CONSTTAB_INT("BeforeGameOverJudge", BeforeGameOverJudge)},
    {SWIG_LUA_CONSTTAB_INT("GameOverJudge", GameOverJudge)},
    {SWIG_LUA_CONSTTAB_INT("GameFinished", GameFinished)},
    {SWIG_LUA_CONSTTAB_INT("SlashEffected", SlashEffected)},
    {SWIG_LUA_CONSTTAB_INT("SlashProceed", SlashProceed)},
    {SWIG_LUA_CONSTTAB_INT("SlashHit", SlashHit)},
    {SWIG_LUA_CONSTTAB_INT("SlashMissed", SlashMissed)},
    {SWIG_LUA_CONSTTAB_INT("JinkEffect", JinkEffect)},
    {SWIG_LUA_CONSTTAB_INT("CardAsked", CardAsked)},
    {SWIG_LUA_CONSTTAB_INT("CardResponded", CardResponded)},
    {SWIG_LUA_CONSTTAB_INT("BeforeCardsMove", BeforeCardsMove)},
    {SWIG_LUA_CONSTTAB_INT("CardsMoveOneTime", CardsMoveOneTime)},
    {SWIG_LUA_CONSTTAB_INT("PreCardUsed", PreCardUsed)},
    {SWIG_LUA_CONSTTAB_INT("CardUsed", CardUsed)},
    {SWIG_LUA_CONSTTAB_INT("TargetChoosing", TargetChoosing)},
    {SWIG_LUA_CONSTTAB_INT("TargetConfirming", TargetConfirming)},
    {SWIG_LUA_CONSTTAB_INT("TargetChosen", TargetChosen)},
    {SWIG_LUA_CONSTTAB_INT("TargetConfirmed", TargetConfirmed)},
    {SWIG_LUA_CONSTTAB_INT("CardEffect", CardEffect)},
    {SWIG_LUA_CONSTTAB_INT("CardEffected", CardEffected)},
    {SWIG_LUA_CONSTTAB_INT("PostCardEffected", PostCardEffected)},
    {SWIG_LUA_CONSTTAB_INT("CardFinished", CardFinished)},
    {SWIG_LUA_CONSTTAB_INT("TrickCardCanceling", TrickCardCanceling)},
    {SWIG_LUA_CONSTTAB_INT("ChoiceMade", ChoiceMade)},
    {SWIG_LUA_CONSTTAB_INT("StageChange", StageChange)},
    {SWIG_LUA_CONSTTAB_INT("FetchDrawPileCard", FetchDrawPileCard)},
    {SWIG_LUA_CONSTTAB_INT("TurnBroken", TurnBroken)},
    {SWIG_LUA_CONSTTAB_INT("GeneralShown", GeneralShown)},
    {SWIG_LUA_CONSTTAB_INT("GeneralHidden", GeneralHidden)},
    {SWIG_LUA_CONSTTAB_INT("GeneralRemoved", GeneralRemoved)},
    {SWIG_LUA_CONSTTAB_INT("NumOfEvents", NumOfEvents)},
    {SWIG_LUA_CONSTTAB_INT("Card_Spade", Card::Spade)},
    {SWIG_LUA_CONSTTAB_INT("Card_Club", Card::Club)},
    {SWIG_LUA_CONSTTAB_INT("Card_Heart", Card::Heart)},
    {SWIG_LUA_CONSTTAB_INT("Card_Diamond", Card::Diamond)},
    {SWIG_LUA_CONSTTAB_INT("Card_NoSuitBlack", Card::NoSuitBlack)},
    {SWIG_LUA_CONSTTAB_INT("Card_NoSuitRed", Card::NoSuitRed)},
    {SWIG_LUA_CONSTTAB_INT("Card_NoSuit", Card::NoSuit)},
    {SWIG_LUA_CONSTTAB_INT("Card_SuitToBeDecided", Card::SuitToBeDecided)},
    {SWIG_LUA_CONSTTAB_INT("Card_Red", Card::Red)},
    {SWIG_LUA_CONSTTAB_INT("Card_Black", Card::Black)},
    {SWIG_LUA_CONSTTAB_INT("Card_Colorless", Card::Colorless)},
    {SWIG_LUA_CONSTTAB_INT("Card_MethodNone", Card::MethodNone)},
    {SWIG_LUA_CONSTTAB_INT("Card_MethodUse", Card::MethodUse)},
    {SWIG_LUA_CONSTTAB_INT("Card_MethodResponse", Card::MethodResponse)},
    {SWIG_LUA_CONSTTAB_INT("Card_MethodDiscard", Card::MethodDiscard)},
    {SWIG_LUA_CONSTTAB_INT("Card_MethodRecast", Card::MethodRecast)},
    {SWIG_LUA_CONSTTAB_INT("Card_MethodPindian", Card::MethodPindian)},
    {SWIG_LUA_CONSTTAB_INT("Card_TypeSkill", Card::TypeSkill)},
    {SWIG_LUA_CONSTTAB_INT("Card_TypeBasic", Card::TypeBasic)},
    {SWIG_LUA_CONSTTAB_INT("Card_TypeTrick", Card::TypeTrick)},
    {SWIG_LUA_CONSTTAB_INT("Card_TypeEquip", Card::TypeEquip)},
    {SWIG_LUA_CONSTTAB_INT("Package_GeneralPack", Package::GeneralPack)},
    {SWIG_LUA_CONSTTAB_INT("Package_CardPack", Package::CardPack)},
    {SWIG_LUA_CONSTTAB_INT("Package_MixedPack", Package::MixedPack)},
    {SWIG_LUA_CONSTTAB_INT("Package_SpecialPack", Package::SpecialPack)},
    {SWIG_LUA_CONSTTAB_INT("Skill_Frequent", Skill::Frequent)},
    {SWIG_LUA_CONSTTAB_INT("Skill_NotFrequent", Skill::NotFrequent)},
    {SWIG_LUA_CONSTTAB_INT("Skill_Compulsory", Skill::Compulsory)},
    {SWIG_LUA_CONSTTAB_INT("Skill_Limited", Skill::Limited)},
    {SWIG_LUA_CONSTTAB_INT("Skill_Wake", Skill::Wake)},
    {SWIG_LUA_CONSTTAB_INT("Room_GuanxingUpOnly", Room::GuanxingUpOnly)},
    {SWIG_LUA_CONSTTAB_INT("Room_GuanxingBothSides", Room::GuanxingBothSides)},
    {SWIG_LUA_CONSTTAB_INT("Room_GuanxingDownOnly", Room::GuanxingDownOnly)},
    {SWIG_LUA_CONSTTAB_INT("EquipCard_WeaponLocation", EquipCard::WeaponLocation)},
    {SWIG_LUA_CONSTTAB_INT("EquipCard_ArmorLocation", EquipCard::ArmorLocation)},
    {SWIG_LUA_CONSTTAB_INT("EquipCard_DefensiveHorseLocation", EquipCard::DefensiveHorseLocation)},
    {SWIG_LUA_CONSTTAB_INT("EquipCard_OffensiveHorseLocation", EquipCard::OffensiveHorseLocation)},
    {SWIG_LUA_CONSTTAB_INT("TargetModSkill_Residue", TargetModSkill::Residue)},
    {SWIG_LUA_CONSTTAB_INT("TargetModSkill_DistanceLimit", TargetModSkill::DistanceLimit)},
    {SWIG_LUA_CONSTTAB_INT("TargetModSkill_ExtraTarget", TargetModSkill::ExtraTarget)},
    {SWIG_LUA_CONSTTAB_INT("LuaTrickCard_TypeNormal", LuaTrickCard::TypeNormal)},
    {SWIG_LUA_CONSTTAB_INT("LuaTrickCard_TypeSingleTargetTrick", LuaTrickCard::TypeSingleTargetTrick)},
    {SWIG_LUA_CONSTTAB_INT("LuaTrickCard_TypeDelayedTrick", LuaTrickCard::TypeDelayedTrick)},
    {SWIG_LUA_CONSTTAB_INT("LuaTrickCard_TypeAOE", LuaTrickCard::TypeAOE)},
    {SWIG_LUA_CONSTTAB_INT("LuaTrickCard_TypeGlobalEffect", LuaTrickCard::TypeGlobalEffect)},
    {SWIG_LUA_CONSTTAB_INT("AI_Friend", AI::Friend)},
    {SWIG_LUA_CONSTTAB_INT("AI_Enemy", AI::Enemy)},
    {SWIG_LUA_CONSTTAB_INT("AI_Neutrality", AI::Neutrality)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_LuaTargetModSkillTo_p_TargetModSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TargetModSkill *)  ((LuaTargetModSkill *) x));
}
static void *_p_LuaTriggerSkillTo_p_TriggerSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TriggerSkill *)  ((LuaTriggerSkill *) x));
}
static void *_p_BattleArraySkillTo_p_TriggerSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TriggerSkill *)  ((BattleArraySkill *) x));
}
static void *_p_LuaBattleArraySkillTo_p_TriggerSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TriggerSkill *) (BattleArraySkill *) ((LuaBattleArraySkill *) x));
}
static void *_p_LuaFilterSkillTo_p_FilterSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterSkill *)  ((LuaFilterSkill *) x));
}
static void *_p_LuaTreasureTo_p_Treasure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Treasure *)  ((LuaTreasure *) x));
}
static void *_p_LuaBattleArraySkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (TriggerSkill *)(BattleArraySkill *) ((LuaBattleArraySkill *) x));
}
static void *_p_BattleArraySkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (TriggerSkill *) ((BattleArraySkill *) x));
}
static void *_p_LuaMaxCardsSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (MaxCardsSkill *) ((LuaMaxCardsSkill *) x));
}
static void *_p_MaxCardsSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *)  ((MaxCardsSkill *) x));
}
static void *_p_LuaFilterSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (ViewAsSkill *)(OneCardViewAsSkill *)(FilterSkill *) ((LuaFilterSkill *) x));
}
static void *_p_FilterSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (ViewAsSkill *)(OneCardViewAsSkill *) ((FilterSkill *) x));
}
static void *_p_LuaTriggerSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (TriggerSkill *) ((LuaTriggerSkill *) x));
}
static void *_p_TriggerSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *)  ((TriggerSkill *) x));
}
static void *_p_OneCardViewAsSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (ViewAsSkill *) ((OneCardViewAsSkill *) x));
}
static void *_p_LuaViewAsSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (ViewAsSkill *) ((LuaViewAsSkill *) x));
}
static void *_p_ViewAsSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *)  ((ViewAsSkill *) x));
}
static void *_p_TargetModSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *)  ((TargetModSkill *) x));
}
static void *_p_LuaTargetModSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (TargetModSkill *) ((LuaTargetModSkill *) x));
}
static void *_p_LuaDistanceSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (DistanceSkill *) ((LuaDistanceSkill *) x));
}
static void *_p_DistanceSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *)  ((DistanceSkill *) x));
}
static void *_p_AttackRangeSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *)  ((AttackRangeSkill *) x));
}
static void *_p_LuaAttackRangeSkillTo_p_Skill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Skill *) (AttackRangeSkill *) ((LuaAttackRangeSkill *) x));
}
static void *_p_DummyCardTo_p_SkillCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SkillCard *)  ((DummyCard *) x));
}
static void *_p_ArraySummonCardTo_p_SkillCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SkillCard *)  ((ArraySummonCard *) x));
}
static void *_p_LuaSkillCardTo_p_SkillCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SkillCard *)  ((LuaSkillCard *) x));
}
static void *_p_TrustAITo_p_AI(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AI *)  ((TrustAI *) x));
}
static void *_p_LuaAITo_p_AI(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AI *) (TrustAI *) ((LuaAI *) x));
}
static void *_p_PackageTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((Package *) x));
}
static void *_p_AnalepticTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(BasicCard *) ((Analeptic *) x));
}
static void *_p_ViewAsSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *) ((ViewAsSkill *) x));
}
static void *_p_LuaViewAsSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(ViewAsSkill *) ((LuaViewAsSkill *) x));
}
static void *_p_OneCardViewAsSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(ViewAsSkill *) ((OneCardViewAsSkill *) x));
}
static void *_p_LuaArmorTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *)(Armor *) ((LuaArmor *) x));
}
static void *_p_AITo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((AI *) x));
}
static void *_p_EquipCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *) ((EquipCard *) x));
}
static void *_p_LuaAITo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (AI *)(TrustAI *) ((LuaAI *) x));
}
static void *_p_SkillCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *) ((SkillCard *) x));
}
static void *_p_LuaSkillCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(SkillCard *) ((LuaSkillCard *) x));
}
static void *_p_LuaBattleArraySkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(TriggerSkill *)(BattleArraySkill *) ((LuaBattleArraySkill *) x));
}
static void *_p_BattleArraySkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(TriggerSkill *) ((BattleArraySkill *) x));
}
static void *_p_TreasureTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *) ((Treasure *) x));
}
static void *_p_MaxCardsSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *) ((MaxCardsSkill *) x));
}
static void *_p_LuaMaxCardsSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(MaxCardsSkill *) ((LuaMaxCardsSkill *) x));
}
static void *_p_LuaTreasureTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *)(Treasure *) ((LuaTreasure *) x));
}
static void *_p_DelayedTrickTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(TrickCard *) ((DelayedTrick *) x));
}
static void *_p_HorseTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *) ((Horse *) x));
}
static void *_p_GeneralTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((General *) x));
}
static void *_p_DummyCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(SkillCard *) ((DummyCard *) x));
}
static void *_p_DefensiveHorseTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *)(Horse *) ((DefensiveHorse *) x));
}
static void *_p_OffensiveHorseTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *)(Horse *) ((OffensiveHorse *) x));
}
static void *_p_TrustAITo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (AI *) ((TrustAI *) x));
}
static void *_p_WeaponTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *) ((Weapon *) x));
}
static void *_p_PlayerTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((Player *) x));
}
static void *_p_ServerPlayerTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Player *) ((ServerPlayer *) x));
}
static void *_p_ClientPlayerTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Player *) ((ClientPlayer *) x));
}
static void *_p_CardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((Card *) x));
}
static void *_p_DistanceSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *) ((DistanceSkill *) x));
}
static void *_p_LuaDistanceSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(DistanceSkill *) ((LuaDistanceSkill *) x));
}
static void *_p_AttackRangeSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *) ((AttackRangeSkill *) x));
}
static void *_p_LuaAttackRangeSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(AttackRangeSkill *) ((LuaAttackRangeSkill *) x));
}
static void *_p_TrickCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *) ((TrickCard *) x));
}
static void *_p_LuaTriggerSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(TriggerSkill *) ((LuaTriggerSkill *) x));
}
static void *_p_TriggerSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *) ((TriggerSkill *) x));
}
static void *_p_FilterSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(ViewAsSkill *)(OneCardViewAsSkill *) ((FilterSkill *) x));
}
static void *_p_LuaFilterSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(ViewAsSkill *)(OneCardViewAsSkill *)(FilterSkill *) ((LuaFilterSkill *) x));
}
static void *_p_LuaTrickCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(TrickCard *) ((LuaTrickCard *) x));
}
static void *_p_ArmorTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *) ((Armor *) x));
}
static void *_p_RoomThreadTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (QThread *) ((RoomThread *) x));
}
static void *_p_QThreadTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((QThread *) x));
}
static void *_p_EngineTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((Engine *) x));
}
static void *_p_BasicCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *) ((BasicCard *) x));
}
static void *_p_LuaBasicCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(BasicCard *) ((LuaBasicCard *) x));
}
static void *_p_WrappedCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *) ((WrappedCard *) x));
}
static void *_p_ArraySummonCardTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(SkillCard *) ((ArraySummonCard *) x));
}
static void *_p_LuaWeaponTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(EquipCard *)(Weapon *) ((LuaWeapon *) x));
}
static void *_p_SkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *)  ((Skill *) x));
}
static void *_p_RoomTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (QThread *) ((Room *) x));
}
static void *_p_SlashTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Card *)(BasicCard *) ((Slash *) x));
}
static void *_p_TargetModSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *) ((TargetModSkill *) x));
}
static void *_p_LuaTargetModSkillTo_p_QObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QObject *) (Skill *)(TargetModSkill *) ((LuaTargetModSkill *) x));
}
static void *_p_SlashTo_p_BasicCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BasicCard *)  ((Slash *) x));
}
static void *_p_AnalepticTo_p_BasicCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BasicCard *)  ((Analeptic *) x));
}
static void *_p_LuaBasicCardTo_p_BasicCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BasicCard *)  ((LuaBasicCard *) x));
}
static void *_p_DelayedTrickTo_p_TrickCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TrickCard *)  ((DelayedTrick *) x));
}
static void *_p_LuaTrickCardTo_p_TrickCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TrickCard *)  ((LuaTrickCard *) x));
}
static void *_p_LuaMaxCardsSkillTo_p_MaxCardsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MaxCardsSkill *)  ((LuaMaxCardsSkill *) x));
}
static void *_p_ServerPlayerTo_p_Player(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Player *)  ((ServerPlayer *) x));
}
static void *_p_ClientPlayerTo_p_Player(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Player *)  ((ClientPlayer *) x));
}
static void *_p_OffensiveHorseTo_p_Horse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Horse *)  ((OffensiveHorse *) x));
}
static void *_p_DefensiveHorseTo_p_Horse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Horse *)  ((DefensiveHorse *) x));
}
static void *_p_BasicCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *)  ((BasicCard *) x));
}
static void *_p_LuaBasicCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (BasicCard *) ((LuaBasicCard *) x));
}
static void *_p_ArraySummonCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (SkillCard *) ((ArraySummonCard *) x));
}
static void *_p_DefensiveHorseTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *)(Horse *) ((DefensiveHorse *) x));
}
static void *_p_OffensiveHorseTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *)(Horse *) ((OffensiveHorse *) x));
}
static void *_p_DummyCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (SkillCard *) ((DummyCard *) x));
}
static void *_p_WrappedCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *)  ((WrappedCard *) x));
}
static void *_p_EquipCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *)  ((EquipCard *) x));
}
static void *_p_DelayedTrickTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (TrickCard *) ((DelayedTrick *) x));
}
static void *_p_AnalepticTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (BasicCard *) ((Analeptic *) x));
}
static void *_p_TreasureTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *) ((Treasure *) x));
}
static void *_p_LuaTreasureTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *)(Treasure *) ((LuaTreasure *) x));
}
static void *_p_LuaWeaponTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *)(Weapon *) ((LuaWeapon *) x));
}
static void *_p_SlashTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (BasicCard *) ((Slash *) x));
}
static void *_p_HorseTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *) ((Horse *) x));
}
static void *_p_SkillCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *)  ((SkillCard *) x));
}
static void *_p_TrickCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *)  ((TrickCard *) x));
}
static void *_p_ArmorTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *) ((Armor *) x));
}
static void *_p_LuaSkillCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (SkillCard *) ((LuaSkillCard *) x));
}
static void *_p_LuaTrickCardTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (TrickCard *) ((LuaTrickCard *) x));
}
static void *_p_WeaponTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *) ((Weapon *) x));
}
static void *_p_LuaArmorTo_p_Card(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Card *) (EquipCard *)(Armor *) ((LuaArmor *) x));
}
static void *_p_LuaWeaponTo_p_Weapon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Weapon *)  ((LuaWeapon *) x));
}
static void *_p_RoomThreadTo_p_QThread(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QThread *)  ((RoomThread *) x));
}
static void *_p_RoomTo_p_QThread(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QThread *)  ((Room *) x));
}
static void *_p_LuaBattleArraySkillTo_p_BattleArraySkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BattleArraySkill *)  ((LuaBattleArraySkill *) x));
}
static void *_p_LuaAITo_p_TrustAI(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TrustAI *)  ((LuaAI *) x));
}
static void *_p_LuaDistanceSkillTo_p_DistanceSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DistanceSkill *)  ((LuaDistanceSkill *) x));
}
static void *_p_LuaAttackRangeSkillTo_p_AttackRangeSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AttackRangeSkill *)  ((LuaAttackRangeSkill *) x));
}
static void *_p_FilterSkillTo_p_OneCardViewAsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OneCardViewAsSkill *)  ((FilterSkill *) x));
}
static void *_p_LuaFilterSkillTo_p_OneCardViewAsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OneCardViewAsSkill *) (FilterSkill *) ((LuaFilterSkill *) x));
}
static void *_p_FilterSkillTo_p_ViewAsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ViewAsSkill *) (OneCardViewAsSkill *) ((FilterSkill *) x));
}
static void *_p_LuaFilterSkillTo_p_ViewAsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ViewAsSkill *) (OneCardViewAsSkill *)(FilterSkill *) ((LuaFilterSkill *) x));
}
static void *_p_LuaViewAsSkillTo_p_ViewAsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ViewAsSkill *)  ((LuaViewAsSkill *) x));
}
static void *_p_OneCardViewAsSkillTo_p_ViewAsSkill(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ViewAsSkill *)  ((OneCardViewAsSkill *) x));
}
static void *_p_LuaArmorTo_p_Armor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Armor *)  ((LuaArmor *) x));
}
static void *_p_WeaponTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *)  ((Weapon *) x));
}
static void *_p_ArmorTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *)  ((Armor *) x));
}
static void *_p_OffensiveHorseTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *) (Horse *) ((OffensiveHorse *) x));
}
static void *_p_DefensiveHorseTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *) (Horse *) ((DefensiveHorse *) x));
}
static void *_p_TreasureTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *)  ((Treasure *) x));
}
static void *_p_LuaWeaponTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *) (Weapon *) ((LuaWeapon *) x));
}
static void *_p_LuaTreasureTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *) (Treasure *) ((LuaTreasure *) x));
}
static void *_p_LuaArmorTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *) (Armor *) ((LuaArmor *) x));
}
static void *_p_HorseTo_p_EquipCard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EquipCard *)  ((Horse *) x));
}
static swig_type_info _swigt__p_AI = {"_p_AI", "AI *", 0, 0, (void*)&_wrap_class_AI, 0};
static swig_type_info _swigt__p_Analeptic = {"_p_Analeptic", "Analeptic *", 0, 0, (void*)&_wrap_class_Analeptic, 0};
static swig_type_info _swigt__p_Armor = {"_p_Armor", "Armor *", 0, 0, (void*)&_wrap_class_Armor, 0};
static swig_type_info _swigt__p_ArraySummonCard = {"_p_ArraySummonCard", "ArraySummonCard *", 0, 0, (void*)&_wrap_class_ArraySummonCard, 0};
static swig_type_info _swigt__p_AttackRangeSkill = {"_p_AttackRangeSkill", "AttackRangeSkill *", 0, 0, (void*)&_wrap_class_AttackRangeSkill, 0};
static swig_type_info _swigt__p_BasicCard = {"_p_BasicCard", "BasicCard *", 0, 0, (void*)&_wrap_class_BasicCard, 0};
static swig_type_info _swigt__p_BattleArraySkill = {"_p_BattleArraySkill", "BattleArraySkill *", 0, 0, (void*)&_wrap_class_BattleArraySkill, 0};
static swig_type_info _swigt__p_Card = {"_p_Card", "Card *", 0, 0, (void*)&_wrap_class_Card, 0};
static swig_type_info _swigt__p_CardEffectStruct = {"_p_CardEffectStruct", "CardEffectStruct *", 0, 0, (void*)&_wrap_class_CardEffectStruct, 0};
static swig_type_info _swigt__p_CardMoveReason = {"_p_CardMoveReason", "CardMoveReason *", 0, 0, (void*)&_wrap_class_CardMoveReason, 0};
static swig_type_info _swigt__p_CardPattern = {"_p_CardPattern", "CardPattern *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CardResponseStruct = {"_p_CardResponseStruct", "CardResponseStruct *", 0, 0, (void*)&_wrap_class_CardResponseStruct, 0};
static swig_type_info _swigt__p_CardUseStruct = {"_p_CardUseStruct", "CardUseStruct *", 0, 0, (void*)&_wrap_class_CardUseStruct, 0};
static swig_type_info _swigt__p_Card__Suit = {"_p_Card__Suit", "enum Card::Suit *|Card::Suit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CardsMoveOneTimeStruct = {"_p_CardsMoveOneTimeStruct", "CardsMoveOneTimeStruct *", 0, 0, (void*)&_wrap_class_CardsMoveOneTimeStruct, 0};
static swig_type_info _swigt__p_CardsMoveStruct = {"_p_CardsMoveStruct", "CardsMoveStruct *", 0, 0, (void*)&_wrap_class_CardsMoveStruct, 0};
static swig_type_info _swigt__p_Client = {"_p_Client", "Client *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClientPlayer = {"_p_ClientPlayer", "ClientPlayer *", 0, 0, (void*)&_wrap_class_ClientPlayer, 0};
static swig_type_info _swigt__p_ClientSocket = {"_p_ClientSocket", "ClientSocket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DamageStruct = {"_p_DamageStruct", "DamageStruct *", 0, 0, (void*)&_wrap_class_DamageStruct, 0};
static swig_type_info _swigt__p_DeathStruct = {"_p_DeathStruct", "DeathStruct *", 0, 0, (void*)&_wrap_class_DeathStruct, 0};
static swig_type_info _swigt__p_DefensiveHorse = {"_p_DefensiveHorse", "DefensiveHorse *", 0, 0, (void*)&_wrap_class_DefensiveHorse, 0};
static swig_type_info _swigt__p_DelayedTrick = {"_p_DelayedTrick", "DelayedTrick *", 0, 0, (void*)&_wrap_class_DelayedTrick, 0};
static swig_type_info _swigt__p_DistanceSkill = {"_p_DistanceSkill", "DistanceSkill *", 0, 0, (void*)&_wrap_class_DistanceSkill, 0};
static swig_type_info _swigt__p_DummyCard = {"_p_DummyCard", "DummyCard *", 0, 0, (void*)&_wrap_class_DummyCard, 0};
static swig_type_info _swigt__p_DyingStruct = {"_p_DyingStruct", "DyingStruct *", 0, 0, (void*)&_wrap_class_DyingStruct, 0};
static swig_type_info _swigt__p_Engine = {"_p_Engine", "Engine *", 0, 0, (void*)&_wrap_class_Engine, 0};
static swig_type_info _swigt__p_EquipCard = {"_p_EquipCard", "EquipCard *", 0, 0, (void*)&_wrap_class_EquipCard, 0};
static swig_type_info _swigt__p_FilterSkill = {"_p_FilterSkill", "FilterSkill *", 0, 0, (void*)&_wrap_class_FilterSkill, 0};
static swig_type_info _swigt__p_General = {"_p_General", "General *", 0, 0, (void*)&_wrap_class_General, 0};
static swig_type_info _swigt__p_Horse = {"_p_Horse", "Horse *", 0, 0, (void*)&_wrap_class_Horse, 0};
static swig_type_info _swigt__p_JudgeStruct = {"_p_JudgeStruct", "JudgeStruct *", 0, 0, (void*)&_wrap_class_JudgeStruct, 0};
static swig_type_info _swigt__p_LogMessage = {"_p_LogMessage", "LogMessage *", 0, 0, (void*)&_wrap_class_LogMessage, 0};
static swig_type_info _swigt__p_LuaAI = {"_p_LuaAI", "LuaAI *", 0, 0, (void*)&_wrap_class_LuaAI, 0};
static swig_type_info _swigt__p_LuaArmor = {"_p_LuaArmor", "LuaArmor *", 0, 0, (void*)&_wrap_class_LuaArmor, 0};
static swig_type_info _swigt__p_LuaAttackRangeSkill = {"_p_LuaAttackRangeSkill", "LuaAttackRangeSkill *", 0, 0, (void*)&_wrap_class_LuaAttackRangeSkill, 0};
static swig_type_info _swigt__p_LuaBasicCard = {"_p_LuaBasicCard", "LuaBasicCard *", 0, 0, (void*)&_wrap_class_LuaBasicCard, 0};
static swig_type_info _swigt__p_LuaBattleArraySkill = {"_p_LuaBattleArraySkill", "LuaBattleArraySkill *", 0, 0, (void*)&_wrap_class_LuaBattleArraySkill, 0};
static swig_type_info _swigt__p_LuaDistanceSkill = {"_p_LuaDistanceSkill", "LuaDistanceSkill *", 0, 0, (void*)&_wrap_class_LuaDistanceSkill, 0};
static swig_type_info _swigt__p_LuaFilterSkill = {"_p_LuaFilterSkill", "LuaFilterSkill *", 0, 0, (void*)&_wrap_class_LuaFilterSkill, 0};
static swig_type_info _swigt__p_LuaFunction = {"_p_LuaFunction", "LuaFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LuaMaxCardsSkill = {"_p_LuaMaxCardsSkill", "LuaMaxCardsSkill *", 0, 0, (void*)&_wrap_class_LuaMaxCardsSkill, 0};
static swig_type_info _swigt__p_LuaSkillCard = {"_p_LuaSkillCard", "LuaSkillCard *", 0, 0, (void*)&_wrap_class_LuaSkillCard, 0};
static swig_type_info _swigt__p_LuaTargetModSkill = {"_p_LuaTargetModSkill", "LuaTargetModSkill *", 0, 0, (void*)&_wrap_class_LuaTargetModSkill, 0};
static swig_type_info _swigt__p_LuaTreasure = {"_p_LuaTreasure", "LuaTreasure *", 0, 0, (void*)&_wrap_class_LuaTreasure, 0};
static swig_type_info _swigt__p_LuaTrickCard = {"_p_LuaTrickCard", "LuaTrickCard *", 0, 0, (void*)&_wrap_class_LuaTrickCard, 0};
static swig_type_info _swigt__p_LuaTriggerSkill = {"_p_LuaTriggerSkill", "LuaTriggerSkill *", 0, 0, (void*)&_wrap_class_LuaTriggerSkill, 0};
static swig_type_info _swigt__p_LuaViewAsSkill = {"_p_LuaViewAsSkill", "LuaViewAsSkill *", 0, 0, (void*)&_wrap_class_LuaViewAsSkill, 0};
static swig_type_info _swigt__p_LuaWeapon = {"_p_LuaWeapon", "LuaWeapon *", 0, 0, (void*)&_wrap_class_LuaWeapon, 0};
static swig_type_info _swigt__p_MaxCardsSkill = {"_p_MaxCardsSkill", "MaxCardsSkill *", 0, 0, (void*)&_wrap_class_MaxCardsSkill, 0};
static swig_type_info _swigt__p_OffensiveHorse = {"_p_OffensiveHorse", "OffensiveHorse *", 0, 0, (void*)&_wrap_class_OffensiveHorse, 0};
static swig_type_info _swigt__p_OneCardViewAsSkill = {"_p_OneCardViewAsSkill", "OneCardViewAsSkill *", 0, 0, (void*)&_wrap_class_OneCardViewAsSkill, 0};
static swig_type_info _swigt__p_Package = {"_p_Package", "Package *", 0, 0, (void*)&_wrap_class_Package, 0};
static swig_type_info _swigt__p_PhaseChangeStruct = {"_p_PhaseChangeStruct", "PhaseChangeStruct *", 0, 0, (void*)&_wrap_class_PhaseChangeStruct, 0};
static swig_type_info _swigt__p_PindianStruct = {"_p_PindianStruct", "PindianStruct *", 0, 0, (void*)&_wrap_class_PindianStruct, 0};
static swig_type_info _swigt__p_Player = {"_p_Player", "Player *", 0, 0, (void*)&_wrap_class_Player, 0};
static swig_type_info _swigt__p_PlayerNumStruct = {"_p_PlayerNumStruct", "PlayerNumStruct *", 0, 0, (void*)&_wrap_class_PlayerNumStruct, 0};
static swig_type_info _swigt__p_QDialog = {"_p_QDialog", "QDialog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QListT_Card_const_p_t = {"_p_QListT_Card_const_p_t", "QList< Card const * > *", 0, 0, (void*)&_wrap_class_QList_Sl_Card_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_QListT_CardsMoveStruct_t = {"_p_QListT_CardsMoveStruct_t", "QList< CardsMoveStruct > *", 0, 0, (void*)&_wrap_class_QList_Sl_CardsMoveStruct_Sg_, 0};
static swig_type_info _swigt__p_QListT_DelayedTrick_const_p_t = {"_p_QListT_DelayedTrick_const_p_t", "QList< DelayedTrick const * > *", 0, 0, (void*)&_wrap_class_QList_Sl_DelayedTrick_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_QListT_Player__Phase_t = {"_p_QListT_Player__Phase_t", "QList< Player::Phase > *", 0, 0, (void*)&_wrap_class_QList_Sl_Player_Phase_Sg_, 0};
static swig_type_info _swigt__p_QListT_Player__Place_t = {"_p_QListT_Player__Place_t", "QList< Player::Place > *", 0, 0, (void*)&_wrap_class_QList_Sl_Player_Place_Sg_, 0};
static swig_type_info _swigt__p_QListT_Player_const_p_t = {"_p_QListT_Player_const_p_t", "QList< Player const * > *", 0, 0, (void*)&_wrap_class_QList_Sl_Player_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_QListT_QVariant_t = {"_p_QListT_QVariant_t", "QVariantList *|QList< QVariant > *", 0, 0, (void*)&_wrap_class_QList_Sl_QVariant_Sg_, 0};
static swig_type_info _swigt__p_QListT_ServerPlayer_p_t = {"_p_QListT_ServerPlayer_p_t", "QList< ServerPlayer * > *", 0, 0, (void*)&_wrap_class_QList_Sl_ServerPlayer_Sm__Sg_, 0};
static swig_type_info _swigt__p_QListT_Skill_const_p_t = {"_p_QListT_Skill_const_p_t", "QList< Skill const * > *", 0, 0, (void*)&_wrap_class_QList_Sl_Skill_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_QListT_TriggerEvent_t = {"_p_QListT_TriggerEvent_t", "QList< enum TriggerEvent > *|QList< TriggerEvent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QListT_bool_t = {"_p_QListT_bool_t", "QList< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QListT_int_t = {"_p_QListT_int_t", "QList< int > *", 0, 0, (void*)&_wrap_class_QList_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_QMapT_ServerPlayer_p_QStringList_t = {"_p_QMapT_ServerPlayer_p_QStringList_t", "QMap< ServerPlayer *,QStringList > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QObject = {"_p_QObject", "QObject *", 0, 0, (void*)&_wrap_class_QObject, 0};
static swig_type_info _swigt__p_QString = {"_p_QString", "QString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QStringList = {"_p_QStringList", "QStringList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QThread = {"_p_QThread", "QThread *", 0, 0, (void*)&_wrap_class_QThread, 0};
static swig_type_info _swigt__p_QVariant = {"_p_QVariant", "QVariant *", 0, 0, (void*)&_wrap_class_QVariant, 0};
static swig_type_info _swigt__p_RecoverStruct = {"_p_RecoverStruct", "RecoverStruct *", 0, 0, (void*)&_wrap_class_RecoverStruct, 0};
static swig_type_info _swigt__p_Room = {"_p_Room", "Room *", 0, 0, (void*)&_wrap_class_Room, 0};
static swig_type_info _swigt__p_RoomThread = {"_p_RoomThread", "RoomThread *", 0, 0, (void*)&_wrap_class_RoomThread, 0};
static swig_type_info _swigt__p_Scenario = {"_p_Scenario", "Scenario *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ServerPlayer = {"_p_ServerPlayer", "ServerPlayer *", 0, 0, (void*)&_wrap_class_ServerPlayer, 0};
static swig_type_info _swigt__p_Skill = {"_p_Skill", "Skill *", 0, 0, (void*)&_wrap_class_Skill, 0};
static swig_type_info _swigt__p_SkillCard = {"_p_SkillCard", "SkillCard *", 0, 0, (void*)&_wrap_class_SkillCard, 0};
static swig_type_info _swigt__p_Slash = {"_p_Slash", "Slash *", 0, 0, (void*)&_wrap_class_Slash, 0};
static swig_type_info _swigt__p_SlashEffectStruct = {"_p_SlashEffectStruct", "SlashEffectStruct *", 0, 0, (void*)&_wrap_class_SlashEffectStruct, 0};
static swig_type_info _swigt__p_TargetModSkill = {"_p_TargetModSkill", "TargetModSkill *", 0, 0, (void*)&_wrap_class_TargetModSkill, 0};
static swig_type_info _swigt__p_Treasure = {"_p_Treasure", "Treasure *", 0, 0, (void*)&_wrap_class_Treasure, 0};
static swig_type_info _swigt__p_TrickCard = {"_p_TrickCard", "TrickCard *", 0, 0, (void*)&_wrap_class_TrickCard, 0};
static swig_type_info _swigt__p_TriggerSkill = {"_p_TriggerSkill", "TriggerSkill *", 0, 0, (void*)&_wrap_class_TriggerSkill, 0};
static swig_type_info _swigt__p_TrustAI = {"_p_TrustAI", "TrustAI *", 0, 0, (void*)&_wrap_class_TrustAI, 0};
static swig_type_info _swigt__p_ViewAsSkill = {"_p_ViewAsSkill", "ViewAsSkill *", 0, 0, (void*)&_wrap_class_ViewAsSkill, 0};
static swig_type_info _swigt__p_Weapon = {"_p_Weapon", "Weapon *", 0, 0, (void*)&_wrap_class_Weapon, 0};
static swig_type_info _swigt__p_WrappedCard = {"_p_WrappedCard", "WrappedCard *", 0, 0, (void*)&_wrap_class_WrappedCard, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ServerPlayer = {"_p_p_ServerPlayer", "ServerPlayer **", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AI,
  &_swigt__p_Analeptic,
  &_swigt__p_Armor,
  &_swigt__p_ArraySummonCard,
  &_swigt__p_AttackRangeSkill,
  &_swigt__p_BasicCard,
  &_swigt__p_BattleArraySkill,
  &_swigt__p_Card,
  &_swigt__p_CardEffectStruct,
  &_swigt__p_CardMoveReason,
  &_swigt__p_CardPattern,
  &_swigt__p_CardResponseStruct,
  &_swigt__p_CardUseStruct,
  &_swigt__p_Card__Suit,
  &_swigt__p_CardsMoveOneTimeStruct,
  &_swigt__p_CardsMoveStruct,
  &_swigt__p_Client,
  &_swigt__p_ClientPlayer,
  &_swigt__p_ClientSocket,
  &_swigt__p_DamageStruct,
  &_swigt__p_DeathStruct,
  &_swigt__p_DefensiveHorse,
  &_swigt__p_DelayedTrick,
  &_swigt__p_DistanceSkill,
  &_swigt__p_DummyCard,
  &_swigt__p_DyingStruct,
  &_swigt__p_Engine,
  &_swigt__p_EquipCard,
  &_swigt__p_FilterSkill,
  &_swigt__p_General,
  &_swigt__p_Horse,
  &_swigt__p_JudgeStruct,
  &_swigt__p_LogMessage,
  &_swigt__p_LuaAI,
  &_swigt__p_LuaArmor,
  &_swigt__p_LuaAttackRangeSkill,
  &_swigt__p_LuaBasicCard,
  &_swigt__p_LuaBattleArraySkill,
  &_swigt__p_LuaDistanceSkill,
  &_swigt__p_LuaFilterSkill,
  &_swigt__p_LuaFunction,
  &_swigt__p_LuaMaxCardsSkill,
  &_swigt__p_LuaSkillCard,
  &_swigt__p_LuaTargetModSkill,
  &_swigt__p_LuaTreasure,
  &_swigt__p_LuaTrickCard,
  &_swigt__p_LuaTriggerSkill,
  &_swigt__p_LuaViewAsSkill,
  &_swigt__p_LuaWeapon,
  &_swigt__p_MaxCardsSkill,
  &_swigt__p_OffensiveHorse,
  &_swigt__p_OneCardViewAsSkill,
  &_swigt__p_Package,
  &_swigt__p_PhaseChangeStruct,
  &_swigt__p_PindianStruct,
  &_swigt__p_Player,
  &_swigt__p_PlayerNumStruct,
  &_swigt__p_QDialog,
  &_swigt__p_QListT_Card_const_p_t,
  &_swigt__p_QListT_CardsMoveStruct_t,
  &_swigt__p_QListT_DelayedTrick_const_p_t,
  &_swigt__p_QListT_Player__Phase_t,
  &_swigt__p_QListT_Player__Place_t,
  &_swigt__p_QListT_Player_const_p_t,
  &_swigt__p_QListT_QVariant_t,
  &_swigt__p_QListT_ServerPlayer_p_t,
  &_swigt__p_QListT_Skill_const_p_t,
  &_swigt__p_QListT_TriggerEvent_t,
  &_swigt__p_QListT_bool_t,
  &_swigt__p_QListT_int_t,
  &_swigt__p_QMapT_ServerPlayer_p_QStringList_t,
  &_swigt__p_QObject,
  &_swigt__p_QString,
  &_swigt__p_QStringList,
  &_swigt__p_QThread,
  &_swigt__p_QVariant,
  &_swigt__p_RecoverStruct,
  &_swigt__p_Room,
  &_swigt__p_RoomThread,
  &_swigt__p_Scenario,
  &_swigt__p_ServerPlayer,
  &_swigt__p_Skill,
  &_swigt__p_SkillCard,
  &_swigt__p_Slash,
  &_swigt__p_SlashEffectStruct,
  &_swigt__p_TargetModSkill,
  &_swigt__p_Treasure,
  &_swigt__p_TrickCard,
  &_swigt__p_TriggerSkill,
  &_swigt__p_TrustAI,
  &_swigt__p_ViewAsSkill,
  &_swigt__p_Weapon,
  &_swigt__p_WrappedCard,
  &_swigt__p_int,
  &_swigt__p_p_ServerPlayer,
};

static swig_cast_info _swigc__p_AI[] = {  {&_swigt__p_AI, 0, 0, 0},  {&_swigt__p_TrustAI, _p_TrustAITo_p_AI, 0, 0},  {&_swigt__p_LuaAI, _p_LuaAITo_p_AI, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analeptic[] = {  {&_swigt__p_Analeptic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Armor[] = {  {&_swigt__p_Armor, 0, 0, 0},  {&_swigt__p_LuaArmor, _p_LuaArmorTo_p_Armor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArraySummonCard[] = {  {&_swigt__p_ArraySummonCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttackRangeSkill[] = {  {&_swigt__p_AttackRangeSkill, 0, 0, 0},  {&_swigt__p_LuaAttackRangeSkill, _p_LuaAttackRangeSkillTo_p_AttackRangeSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BasicCard[] = {  {&_swigt__p_Slash, _p_SlashTo_p_BasicCard, 0, 0},  {&_swigt__p_Analeptic, _p_AnalepticTo_p_BasicCard, 0, 0},  {&_swigt__p_BasicCard, 0, 0, 0},  {&_swigt__p_LuaBasicCard, _p_LuaBasicCardTo_p_BasicCard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BattleArraySkill[] = {  {&_swigt__p_BattleArraySkill, 0, 0, 0},  {&_swigt__p_LuaBattleArraySkill, _p_LuaBattleArraySkillTo_p_BattleArraySkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Card[] = {  {&_swigt__p_BasicCard, _p_BasicCardTo_p_Card, 0, 0},  {&_swigt__p_LuaBasicCard, _p_LuaBasicCardTo_p_Card, 0, 0},  {&_swigt__p_ArraySummonCard, _p_ArraySummonCardTo_p_Card, 0, 0},  {&_swigt__p_Card, 0, 0, 0},  {&_swigt__p_DefensiveHorse, _p_DefensiveHorseTo_p_Card, 0, 0},  {&_swigt__p_OffensiveHorse, _p_OffensiveHorseTo_p_Card, 0, 0},  {&_swigt__p_DummyCard, _p_DummyCardTo_p_Card, 0, 0},  {&_swigt__p_WrappedCard, _p_WrappedCardTo_p_Card, 0, 0},  {&_swigt__p_EquipCard, _p_EquipCardTo_p_Card, 0, 0},  {&_swigt__p_DelayedTrick, _p_DelayedTrickTo_p_Card, 0, 0},  {&_swigt__p_Slash, _p_SlashTo_p_Card, 0, 0},  {&_swigt__p_Horse, _p_HorseTo_p_Card, 0, 0},  {&_swigt__p_Armor, _p_ArmorTo_p_Card, 0, 0},  {&_swigt__p_Analeptic, _p_AnalepticTo_p_Card, 0, 0},  {&_swigt__p_Treasure, _p_TreasureTo_p_Card, 0, 0},  {&_swigt__p_LuaTreasure, _p_LuaTreasureTo_p_Card, 0, 0},  {&_swigt__p_Weapon, _p_WeaponTo_p_Card, 0, 0},  {&_swigt__p_LuaWeapon, _p_LuaWeaponTo_p_Card, 0, 0},  {&_swigt__p_SkillCard, _p_SkillCardTo_p_Card, 0, 0},  {&_swigt__p_LuaSkillCard, _p_LuaSkillCardTo_p_Card, 0, 0},  {&_swigt__p_TrickCard, _p_TrickCardTo_p_Card, 0, 0},  {&_swigt__p_LuaTrickCard, _p_LuaTrickCardTo_p_Card, 0, 0},  {&_swigt__p_LuaArmor, _p_LuaArmorTo_p_Card, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardEffectStruct[] = {  {&_swigt__p_CardEffectStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardMoveReason[] = {  {&_swigt__p_CardMoveReason, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardPattern[] = {  {&_swigt__p_CardPattern, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardResponseStruct[] = {  {&_swigt__p_CardResponseStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardUseStruct[] = {  {&_swigt__p_CardUseStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Card__Suit[] = {  {&_swigt__p_Card__Suit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardsMoveOneTimeStruct[] = {  {&_swigt__p_CardsMoveOneTimeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CardsMoveStruct[] = {  {&_swigt__p_CardsMoveStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Client[] = {  {&_swigt__p_Client, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClientPlayer[] = {  {&_swigt__p_ClientPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClientSocket[] = {  {&_swigt__p_ClientSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DamageStruct[] = {  {&_swigt__p_DamageStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeathStruct[] = {  {&_swigt__p_DeathStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DefensiveHorse[] = {  {&_swigt__p_DefensiveHorse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DelayedTrick[] = {  {&_swigt__p_DelayedTrick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistanceSkill[] = {  {&_swigt__p_DistanceSkill, 0, 0, 0},  {&_swigt__p_LuaDistanceSkill, _p_LuaDistanceSkillTo_p_DistanceSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DummyCard[] = {  {&_swigt__p_DummyCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DyingStruct[] = {  {&_swigt__p_DyingStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Engine[] = {  {&_swigt__p_Engine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EquipCard[] = {  {&_swigt__p_Armor, _p_ArmorTo_p_EquipCard, 0, 0},  {&_swigt__p_EquipCard, 0, 0, 0},  {&_swigt__p_OffensiveHorse, _p_OffensiveHorseTo_p_EquipCard, 0, 0},  {&_swigt__p_DefensiveHorse, _p_DefensiveHorseTo_p_EquipCard, 0, 0},  {&_swigt__p_Weapon, _p_WeaponTo_p_EquipCard, 0, 0},  {&_swigt__p_LuaWeapon, _p_LuaWeaponTo_p_EquipCard, 0, 0},  {&_swigt__p_Treasure, _p_TreasureTo_p_EquipCard, 0, 0},  {&_swigt__p_LuaTreasure, _p_LuaTreasureTo_p_EquipCard, 0, 0},  {&_swigt__p_LuaArmor, _p_LuaArmorTo_p_EquipCard, 0, 0},  {&_swigt__p_Horse, _p_HorseTo_p_EquipCard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterSkill[] = {  {&_swigt__p_FilterSkill, 0, 0, 0},  {&_swigt__p_LuaFilterSkill, _p_LuaFilterSkillTo_p_FilterSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_General[] = {  {&_swigt__p_General, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Horse[] = {  {&_swigt__p_OffensiveHorse, _p_OffensiveHorseTo_p_Horse, 0, 0},  {&_swigt__p_DefensiveHorse, _p_DefensiveHorseTo_p_Horse, 0, 0},  {&_swigt__p_Horse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_JudgeStruct[] = {  {&_swigt__p_JudgeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LogMessage[] = {  {&_swigt__p_LogMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaAI[] = {  {&_swigt__p_LuaAI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaArmor[] = {  {&_swigt__p_LuaArmor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaAttackRangeSkill[] = {  {&_swigt__p_LuaAttackRangeSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaBasicCard[] = {  {&_swigt__p_LuaBasicCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaBattleArraySkill[] = {  {&_swigt__p_LuaBattleArraySkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaDistanceSkill[] = {  {&_swigt__p_LuaDistanceSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaFilterSkill[] = {  {&_swigt__p_LuaFilterSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaFunction[] = {  {&_swigt__p_LuaFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaMaxCardsSkill[] = {  {&_swigt__p_LuaMaxCardsSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaSkillCard[] = {  {&_swigt__p_LuaSkillCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaTargetModSkill[] = {  {&_swigt__p_LuaTargetModSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaTreasure[] = {  {&_swigt__p_LuaTreasure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaTrickCard[] = {  {&_swigt__p_LuaTrickCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaTriggerSkill[] = {  {&_swigt__p_LuaTriggerSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaViewAsSkill[] = {  {&_swigt__p_LuaViewAsSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaWeapon[] = {  {&_swigt__p_LuaWeapon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaxCardsSkill[] = {  {&_swigt__p_MaxCardsSkill, 0, 0, 0},  {&_swigt__p_LuaMaxCardsSkill, _p_LuaMaxCardsSkillTo_p_MaxCardsSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OffensiveHorse[] = {  {&_swigt__p_OffensiveHorse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OneCardViewAsSkill[] = {  {&_swigt__p_FilterSkill, _p_FilterSkillTo_p_OneCardViewAsSkill, 0, 0},  {&_swigt__p_LuaFilterSkill, _p_LuaFilterSkillTo_p_OneCardViewAsSkill, 0, 0},  {&_swigt__p_OneCardViewAsSkill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Package[] = {  {&_swigt__p_Package, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhaseChangeStruct[] = {  {&_swigt__p_PhaseChangeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PindianStruct[] = {  {&_swigt__p_PindianStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Player[] = {  {&_swigt__p_ServerPlayer, _p_ServerPlayerTo_p_Player, 0, 0},  {&_swigt__p_ClientPlayer, _p_ClientPlayerTo_p_Player, 0, 0},  {&_swigt__p_Player, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerNumStruct[] = {  {&_swigt__p_PlayerNumStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QDialog[] = {  {&_swigt__p_QDialog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_Card_const_p_t[] = {  {&_swigt__p_QListT_Card_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_CardsMoveStruct_t[] = {  {&_swigt__p_QListT_CardsMoveStruct_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_DelayedTrick_const_p_t[] = {  {&_swigt__p_QListT_DelayedTrick_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_Player__Phase_t[] = {  {&_swigt__p_QListT_Player__Phase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_Player__Place_t[] = {  {&_swigt__p_QListT_Player__Place_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_Player_const_p_t[] = {  {&_swigt__p_QListT_Player_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_QVariant_t[] = {  {&_swigt__p_QListT_QVariant_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_ServerPlayer_p_t[] = {  {&_swigt__p_QListT_ServerPlayer_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_Skill_const_p_t[] = {  {&_swigt__p_QListT_Skill_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_TriggerEvent_t[] = {  {&_swigt__p_QListT_TriggerEvent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_bool_t[] = {  {&_swigt__p_QListT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QListT_int_t[] = {  {&_swigt__p_QListT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QMapT_ServerPlayer_p_QStringList_t[] = {  {&_swigt__p_QMapT_ServerPlayer_p_QStringList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QObject[] = {  {&_swigt__p_LuaAI, _p_LuaAITo_p_QObject, 0, 0},  {&_swigt__p_Package, _p_PackageTo_p_QObject, 0, 0},  {&_swigt__p_Analeptic, _p_AnalepticTo_p_QObject, 0, 0},  {&_swigt__p_ViewAsSkill, _p_ViewAsSkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaViewAsSkill, _p_LuaViewAsSkillTo_p_QObject, 0, 0},  {&_swigt__p_OneCardViewAsSkill, _p_OneCardViewAsSkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaArmor, _p_LuaArmorTo_p_QObject, 0, 0},  {&_swigt__p_Horse, _p_HorseTo_p_QObject, 0, 0},  {&_swigt__p_EquipCard, _p_EquipCardTo_p_QObject, 0, 0},  {&_swigt__p_LuaSkillCard, _p_LuaSkillCardTo_p_QObject, 0, 0},  {&_swigt__p_SkillCard, _p_SkillCardTo_p_QObject, 0, 0},  {&_swigt__p_Room, _p_RoomTo_p_QObject, 0, 0},  {&_swigt__p_Armor, _p_ArmorTo_p_QObject, 0, 0},  {&_swigt__p_BattleArraySkill, _p_BattleArraySkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaBattleArraySkill, _p_LuaBattleArraySkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaTreasure, _p_LuaTreasureTo_p_QObject, 0, 0},  {&_swigt__p_Treasure, _p_TreasureTo_p_QObject, 0, 0},  {&_swigt__p_MaxCardsSkill, _p_MaxCardsSkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaMaxCardsSkill, _p_LuaMaxCardsSkillTo_p_QObject, 0, 0},  {&_swigt__p_DelayedTrick, _p_DelayedTrickTo_p_QObject, 0, 0},  {&_swigt__p_TrustAI, _p_TrustAITo_p_QObject, 0, 0},  {&_swigt__p_General, _p_GeneralTo_p_QObject, 0, 0},  {&_swigt__p_DummyCard, _p_DummyCardTo_p_QObject, 0, 0},  {&_swigt__p_OffensiveHorse, _p_OffensiveHorseTo_p_QObject, 0, 0},  {&_swigt__p_DefensiveHorse, _p_DefensiveHorseTo_p_QObject, 0, 0},  {&_swigt__p_ServerPlayer, _p_ServerPlayerTo_p_QObject, 0, 0},  {&_swigt__p_ClientPlayer, _p_ClientPlayerTo_p_QObject, 0, 0},  {&_swigt__p_LuaAttackRangeSkill, _p_LuaAttackRangeSkillTo_p_QObject, 0, 0},  {&_swigt__p_AttackRangeSkill, _p_AttackRangeSkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaDistanceSkill, _p_LuaDistanceSkillTo_p_QObject, 0, 0},  {&_swigt__p_DistanceSkill, _p_DistanceSkillTo_p_QObject, 0, 0},  {&_swigt__p_FilterSkill, _p_FilterSkillTo_p_QObject, 0, 0},  {&_swigt__p_LuaFilterSkill, _p_LuaFilterSkillTo_p_QObject, 0, 0},  {&_swigt__p_TrickCard, _p_TrickCardTo_p_QObject, 0, 0},  {&_swigt__p_LuaTrickCard, _p_LuaTrickCardTo_p_QObject, 0, 0},  {&_swigt__p_LuaTriggerSkill, _p_LuaTriggerSkillTo_p_QObject, 0, 0},  {&_swigt__p_TriggerSkill, _p_TriggerSkillTo_p_QObject, 0, 0},  {&_swigt__p_RoomThread, _p_RoomThreadTo_p_QObject, 0, 0},  {&_swigt__p_QThread, _p_QThreadTo_p_QObject, 0, 0},  {&_swigt__p_Skill, _p_SkillTo_p_QObject, 0, 0},  {&_swigt__p_BasicCard, _p_BasicCardTo_p_QObject, 0, 0},  {&_swigt__p_LuaBasicCard, _p_LuaBasicCardTo_p_QObject, 0, 0},  {&_swigt__p_WrappedCard, _p_WrappedCardTo_p_QObject, 0, 0},  {&_swigt__p_QObject, 0, 0, 0},  {&_swigt__p_ArraySummonCard, _p_ArraySummonCardTo_p_QObject, 0, 0},  {&_swigt__p_Slash, _p_SlashTo_p_QObject, 0, 0},  {&_swigt__p_AI, _p_AITo_p_QObject, 0, 0},  {&_swigt__p_LuaWeapon, _p_LuaWeaponTo_p_QObject, 0, 0},  {&_swigt__p_Weapon, _p_WeaponTo_p_QObject, 0, 0},  {&_swigt__p_Player, _p_PlayerTo_p_QObject, 0, 0},  {&_swigt__p_Card, _p_CardTo_p_QObject, 0, 0},  {&_swigt__p_Engine, _p_EngineTo_p_QObject, 0, 0},  {&_swigt__p_LuaTargetModSkill, _p_LuaTargetModSkillTo_p_QObject, 0, 0},  {&_swigt__p_TargetModSkill, _p_TargetModSkillTo_p_QObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QString[] = {  {&_swigt__p_QString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QStringList[] = {  {&_swigt__p_QStringList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QThread[] = {  {&_swigt__p_QThread, 0, 0, 0},  {&_swigt__p_RoomThread, _p_RoomThreadTo_p_QThread, 0, 0},  {&_swigt__p_Room, _p_RoomTo_p_QThread, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QVariant[] = {  {&_swigt__p_QVariant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RecoverStruct[] = {  {&_swigt__p_RecoverStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Room[] = {  {&_swigt__p_Room, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoomThread[] = {  {&_swigt__p_RoomThread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Scenario[] = {  {&_swigt__p_Scenario, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ServerPlayer[] = {  {&_swigt__p_ServerPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Skill[] = {  {&_swigt__p_LuaBattleArraySkill, _p_LuaBattleArraySkillTo_p_Skill, 0, 0},  {&_swigt__p_BattleArraySkill, _p_BattleArraySkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaMaxCardsSkill, _p_LuaMaxCardsSkillTo_p_Skill, 0, 0},  {&_swigt__p_MaxCardsSkill, _p_MaxCardsSkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaFilterSkill, _p_LuaFilterSkillTo_p_Skill, 0, 0},  {&_swigt__p_FilterSkill, _p_FilterSkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaTriggerSkill, _p_LuaTriggerSkillTo_p_Skill, 0, 0},  {&_swigt__p_TriggerSkill, _p_TriggerSkillTo_p_Skill, 0, 0},  {&_swigt__p_OneCardViewAsSkill, _p_OneCardViewAsSkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaViewAsSkill, _p_LuaViewAsSkillTo_p_Skill, 0, 0},  {&_swigt__p_ViewAsSkill, _p_ViewAsSkillTo_p_Skill, 0, 0},  {&_swigt__p_TargetModSkill, _p_TargetModSkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaTargetModSkill, _p_LuaTargetModSkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaDistanceSkill, _p_LuaDistanceSkillTo_p_Skill, 0, 0},  {&_swigt__p_DistanceSkill, _p_DistanceSkillTo_p_Skill, 0, 0},  {&_swigt__p_AttackRangeSkill, _p_AttackRangeSkillTo_p_Skill, 0, 0},  {&_swigt__p_LuaAttackRangeSkill, _p_LuaAttackRangeSkillTo_p_Skill, 0, 0},  {&_swigt__p_Skill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SkillCard[] = {  {&_swigt__p_DummyCard, _p_DummyCardTo_p_SkillCard, 0, 0},  {&_swigt__p_SkillCard, 0, 0, 0},  {&_swigt__p_ArraySummonCard, _p_ArraySummonCardTo_p_SkillCard, 0, 0},  {&_swigt__p_LuaSkillCard, _p_LuaSkillCardTo_p_SkillCard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Slash[] = {  {&_swigt__p_Slash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SlashEffectStruct[] = {  {&_swigt__p_SlashEffectStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TargetModSkill[] = {  {&_swigt__p_TargetModSkill, 0, 0, 0},  {&_swigt__p_LuaTargetModSkill, _p_LuaTargetModSkillTo_p_TargetModSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Treasure[] = {  {&_swigt__p_Treasure, 0, 0, 0},  {&_swigt__p_LuaTreasure, _p_LuaTreasureTo_p_Treasure, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrickCard[] = {  {&_swigt__p_DelayedTrick, _p_DelayedTrickTo_p_TrickCard, 0, 0},  {&_swigt__p_TrickCard, 0, 0, 0},  {&_swigt__p_LuaTrickCard, _p_LuaTrickCardTo_p_TrickCard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TriggerSkill[] = {  {&_swigt__p_TriggerSkill, 0, 0, 0},  {&_swigt__p_LuaTriggerSkill, _p_LuaTriggerSkillTo_p_TriggerSkill, 0, 0},  {&_swigt__p_BattleArraySkill, _p_BattleArraySkillTo_p_TriggerSkill, 0, 0},  {&_swigt__p_LuaBattleArraySkill, _p_LuaBattleArraySkillTo_p_TriggerSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrustAI[] = {  {&_swigt__p_TrustAI, 0, 0, 0},  {&_swigt__p_LuaAI, _p_LuaAITo_p_TrustAI, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ViewAsSkill[] = {  {&_swigt__p_FilterSkill, _p_FilterSkillTo_p_ViewAsSkill, 0, 0},  {&_swigt__p_LuaFilterSkill, _p_LuaFilterSkillTo_p_ViewAsSkill, 0, 0},  {&_swigt__p_ViewAsSkill, 0, 0, 0},  {&_swigt__p_LuaViewAsSkill, _p_LuaViewAsSkillTo_p_ViewAsSkill, 0, 0},  {&_swigt__p_OneCardViewAsSkill, _p_OneCardViewAsSkillTo_p_ViewAsSkill, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Weapon[] = {  {&_swigt__p_Weapon, 0, 0, 0},  {&_swigt__p_LuaWeapon, _p_LuaWeaponTo_p_Weapon, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WrappedCard[] = {  {&_swigt__p_WrappedCard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ServerPlayer[] = {  {&_swigt__p_p_ServerPlayer, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AI,
  _swigc__p_Analeptic,
  _swigc__p_Armor,
  _swigc__p_ArraySummonCard,
  _swigc__p_AttackRangeSkill,
  _swigc__p_BasicCard,
  _swigc__p_BattleArraySkill,
  _swigc__p_Card,
  _swigc__p_CardEffectStruct,
  _swigc__p_CardMoveReason,
  _swigc__p_CardPattern,
  _swigc__p_CardResponseStruct,
  _swigc__p_CardUseStruct,
  _swigc__p_Card__Suit,
  _swigc__p_CardsMoveOneTimeStruct,
  _swigc__p_CardsMoveStruct,
  _swigc__p_Client,
  _swigc__p_ClientPlayer,
  _swigc__p_ClientSocket,
  _swigc__p_DamageStruct,
  _swigc__p_DeathStruct,
  _swigc__p_DefensiveHorse,
  _swigc__p_DelayedTrick,
  _swigc__p_DistanceSkill,
  _swigc__p_DummyCard,
  _swigc__p_DyingStruct,
  _swigc__p_Engine,
  _swigc__p_EquipCard,
  _swigc__p_FilterSkill,
  _swigc__p_General,
  _swigc__p_Horse,
  _swigc__p_JudgeStruct,
  _swigc__p_LogMessage,
  _swigc__p_LuaAI,
  _swigc__p_LuaArmor,
  _swigc__p_LuaAttackRangeSkill,
  _swigc__p_LuaBasicCard,
  _swigc__p_LuaBattleArraySkill,
  _swigc__p_LuaDistanceSkill,
  _swigc__p_LuaFilterSkill,
  _swigc__p_LuaFunction,
  _swigc__p_LuaMaxCardsSkill,
  _swigc__p_LuaSkillCard,
  _swigc__p_LuaTargetModSkill,
  _swigc__p_LuaTreasure,
  _swigc__p_LuaTrickCard,
  _swigc__p_LuaTriggerSkill,
  _swigc__p_LuaViewAsSkill,
  _swigc__p_LuaWeapon,
  _swigc__p_MaxCardsSkill,
  _swigc__p_OffensiveHorse,
  _swigc__p_OneCardViewAsSkill,
  _swigc__p_Package,
  _swigc__p_PhaseChangeStruct,
  _swigc__p_PindianStruct,
  _swigc__p_Player,
  _swigc__p_PlayerNumStruct,
  _swigc__p_QDialog,
  _swigc__p_QListT_Card_const_p_t,
  _swigc__p_QListT_CardsMoveStruct_t,
  _swigc__p_QListT_DelayedTrick_const_p_t,
  _swigc__p_QListT_Player__Phase_t,
  _swigc__p_QListT_Player__Place_t,
  _swigc__p_QListT_Player_const_p_t,
  _swigc__p_QListT_QVariant_t,
  _swigc__p_QListT_ServerPlayer_p_t,
  _swigc__p_QListT_Skill_const_p_t,
  _swigc__p_QListT_TriggerEvent_t,
  _swigc__p_QListT_bool_t,
  _swigc__p_QListT_int_t,
  _swigc__p_QMapT_ServerPlayer_p_QStringList_t,
  _swigc__p_QObject,
  _swigc__p_QString,
  _swigc__p_QStringList,
  _swigc__p_QThread,
  _swigc__p_QVariant,
  _swigc__p_RecoverStruct,
  _swigc__p_Room,
  _swigc__p_RoomThread,
  _swigc__p_Scenario,
  _swigc__p_ServerPlayer,
  _swigc__p_Skill,
  _swigc__p_SkillCard,
  _swigc__p_Slash,
  _swigc__p_SlashEffectStruct,
  _swigc__p_TargetModSkill,
  _swigc__p_Treasure,
  _swigc__p_TrickCard,
  _swigc__p_TriggerSkill,
  _swigc__p_TrustAI,
  _swigc__p_ViewAsSkill,
  _swigc__p_Weapon,
  _swigc__p_WrappedCard,
  _swigc__p_int,
  _swigc__p_p_ServerPlayer,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

